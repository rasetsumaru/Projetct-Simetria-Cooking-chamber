<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>VisiWinNET.Compact.Systems</name>
  </assembly>
  <members>
    <member name="T:VisiWinNET.Alarm.AlarmClass">
      <summary>Class for monitoring alarm class information of an alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmClass.LocalizableText">
      <summary>Returns the internally used unequivocal identification of the localizable text.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmClass.Name">
      <summary>Name of the alarm class</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmClass.Text">
      <summary>Value of the "Runtime name" parameter within the project databank.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmClass.GetStateInfo(VisiWinNET.Alarm.AlarmStates)">
      <summary>Monitoring of alarm class parameters</summary>
      <returns>'alarmStateInfo' type object containing view parameters</returns>
      <param name="State">Alarm status whose view parameters are to be monitored.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmClass.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmDef">
      <summary>Class describing an alarm definition (like in project database)</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmDef.#ctor">
      <summary>Initializes a new instance of the 'AlarmDef' class</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmDef.#ctor(System.UInt32,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
      <summary>Initializes a new instance of the 'AlarmDef' class</summary>
      <param name="ID">Value for 'ID' property</param>
      <param name="alarmGroup">Value for 'Group' property</param>
      <param name="alarmClass">Value for 'Class' property</param>
      <param name="locText">Value for 'LocalizableText' property</param>
      <param name="priority">Value for 'Priority' property</param>
      <param name="locParam1">Value for 'LocalizableParam1' property</param>
      <param name="param2">Value for 'Param2' property</param>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.AcknowledgeMode">
      <summary>Returns which acknowledgement mode has been selected for the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.Class">
      <summary>Determines the alarm class that is to be used for the performance of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.Group">
      <summary>Determines the alarm group into which the alarm is to be inserted</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.ID">
      <summary>Determines an unequivocal numeric identifier for the alarm.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.LocalizableName">
      <summary>Determines the localizable name for the definition</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.LocalizableParam1">
      <summary>Determines the projected value of the "Parameter1" alphanumeric parameter</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.LocalizableText">
      <summary>Determines the text for the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.LocalizedName">
      <summary>Specifies the localizable name for the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.LowActive">
      <summary>Returns whether the alarm is 0-active</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.Name">
      <summary>Returns the name of an alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.Param2">
      <summary>Determines the value of the "Parameter2" numeric parameter</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmDef.Priority">
      <summary>Determines or returns the priority of the alarm</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmDef.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmEventArgs">
      <summary>Provides data for the 'NewAlarm', 'ChangeAlarm', 'InitAlarm', 'ClearAlarm' and 'ToggleAlarm' events.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmEventArgs.Alarm">
      <summary>Object describing the alarm triggering an event.</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmFilter">
      <summary>Object for filtering alarms</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmFilter.#ctor">
      <summary>Initializes a new instance of the 'AlarmFilter' class.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmFilter.DesiredClasses">
      <summary>Filter for alarm classes</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmFilter.DesiredGroups">
      <summary>Filter for alarm groups</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmFilter.DesiredStates">
      <summary>Filter for alarm states</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmFilter.MaxPriority">
      <summary>Filter for upper priority limit</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmFilter.MinPriority">
      <summary>Filter for lower priority limit</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmFilter.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmGroup">
      <summary>Class for querying alarm group information</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.GroupTree">
      <summary>Returns the full designator of the alarm group</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.Image">
      <summary>Return of group symbol</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.LocalizableText">
      <summary>Returns the internally used unequivocal identification of the localizable text.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.Name">
      <summary>Name of the returned alarm group</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.SubGroups">
      <summary>Returns a collection of the subsidiary alarm groups</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmGroup.Text">
      <summary>Localizable name for alarm group</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmGroup.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmItem">
      <summary>Returns information referring to an alarm.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmItem.Acknowledge">
      <summary>Acknowledges the alarm</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmItem.Clear(System.DateTime)">
      <summary>Deactivates the alarm</summary>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as deactivation time</param>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmManager">
      <summary>Administration of alarm classes and groups, global recording configuration</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmManager.AlarmDefs">
      <summary>Contains as a collection all alarm definitions of the project</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmManager.Classes">
      <summary>Obtains access to the parameters of the project's alarm classes from a collection.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmManager.CurrentFile">
      <summary>Determines the name of the current recording file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmManager.FilePath">
      <summary>Determines the file path for the recording files.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmManager.Groups">
      <summary>Contains as a collection access to the parameters of the top hierarchy of alarm groups in the project.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAlarm(System.String,System.DateTime)">
      <summary>Acknowledges an alarm with the given time stamp.
</summary>
      <param name="strName">Full name of the alarm. All superior group names and the alarm name, separated by ".", are expected as a name.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAlarm(System.String)">
      <summary>Acknowledges an alarm. The system time is used as acknowlegdement time stamp. </summary>
      <param name="strName">Full name of the alarm. All superior group names and the alarm name, separated by ".", are expected as a name.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAlarm(System.UInt32,System.DateTime)">
      <summary>Acknowledges an alarm with the given time stamp. The alarm is identified by ID.
</summary>
      <param name="ID">Specification of the unequivocal identifier of the alarm. Every alarm contains an unequivocal numeric identifier. With alarms that have been added to the project at development time this identifier originates from the project databank. Alarms that were defined at runtime through 'SetAlarm' contain the ID as an equally-named parameter. The ID can in both cases be identified with the appropriate 'AlarmDef' object.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAlarm(System.UInt32)">
      <summary>Acknowledges an alarm. The system time is used as acknowlegdement time stamp. The alarm is identified by ID.
</summary>
      <param name="ID">Specification of the unequivocal identifier of the alarm. Every alarm contains an unequivocal numeric identifier. With alarms that have been added to the project at development time this identifier originates from the project databank. Alarms that were defined at runtime through 'SetAlarm' contain the ID as an equally-named parameter. The ID can in both cases be identified with the appropriate 'AlarmDef' object.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAll(System.DateTime)">
      <summary>The 'AcknowledgeAll' method acknowledges all current alarms in the system with the given time stamp. 
</summary>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeAll">
      <summary>The 'AcknowledgeAll' method acknowledges all current alarms with the system time. 
</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeClass(System.String)">
      <summary>The 'AcknowledgeClass' method acknowledges all alarms of the specified alarm class with the system time.
</summary>
      <param name="strName">Name of alarm class. All alarms referring to this alarm class are acknowledged.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeClass(System.String,System.DateTime)">
      <summary>The 'AcknowledgeClass' method acknowledges all alarms of the specified alarm class witj the given time stamp.
</summary>
      <param name="strName">Name of alarm class. All alarms referring to this alarm class are acknowledged.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeGroup(System.String)">
      <summary>The 'AcknowledgeGroup' method acknowledges all alarms of the specified alarm group with the system time.
</summary>
      <param name="strName">Name of the alarm group. All alarms that lie in this alarm group are acknowledged.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.AcknowledgeGroup(System.String,System.DateTime)">
      <summary>The 'AcknowledgeGroup' method acknowledges all alarms of the specified alarm group with the given time stamp.
</summary>
      <param name="strName">Name of the alarm group. All alarms that lie in this alarm group are acknowledged.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAlarm(System.String,System.DateTime)">
      <summary>Deactivates an alarm with the given time stamp.
</summary>
      <param name="Name">Full name of the alarm. All superior group names and the alarm name, separated by ".", are expected as a name.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as deactivation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAlarm(System.UInt32,System.DateTime)">
      <summary>Deactivates an alarm with the given time stamp. The alarm is identified by ID.
</summary>
      <param name="ID">Specification of the unequivocal identifier of the alarm. Every alarm contains an unequivocal numeric identifier. With alarms that have been added to the project at development time this identifier originates from the project databank. Alarms that were defined at runtime through 'SetAlarm' contain the ID as an equally-named parameter. The ID can in both cases be identified with the appropriate 'AlarmDef' object.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as deactivation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAlarm(System.UInt32)">
      <summary>Deactivates an alarm with the system time. The alarm is identified by ID.
</summary>
      <param name="ID">Specification of the unequivocal identifier of the alarm. Every alarm contains an unequivocal numeric identifier. With alarms that have been added to the project at development time this identifier originates from the project databank. Alarms that were defined at runtime through 'SetAlarm' contain the ID as an equally-named parameter. The ID can in both cases be identified with the appropriate 'AlarmDef' object.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAlarm(System.String)">
      <summary>Deactivates an alarm with the system time.

</summary>
      <param name="Name">Full name of the alarm. All superior group names and the alarm name, separated by ".", are expected as a name.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAll(System.DateTime)">
      <summary>Deactivates all current alarms with the specified timestamp</summary>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as acknowledgement time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearAll">
      <summary>Deactivates all current alarms with system time</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearClass(System.String,System.DateTime)">
      <summary>Deactivates all alarms of an alarm class with th given time stamp. 
</summary>
      <param name="strName">Name of the alarm class. All alarms that refer to this alarm class are deactivated.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as deactivation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearClass(System.String)">
      <summary>Deactivates all alarms of an alarm class. System time will be used as deactivation time stamp.
</summary>
      <param name="strName">Name of the alarm class. All alarms that refer to this alarm class are deactivated.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearGroup(System.String)">
      <summary>Deactivates all alarms in the specified alarm group</summary>
      <param name="strName">Name of the alarm group. All alarms in this alarm group are deactivated.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.ClearGroup(System.String,System.DateTime)">
      <summary>Deactivates all alarms in the specified alarm group</summary>
      <param name="strName">Name of the alarm group. All alarms in this alarm group are deactivated.</param>
      <param name="dTimeStamp">Specification of the time stamp that is to be stored or displayed as deactivation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.GetExtAlarmParam(System.String,System.String)">
      <summary>Returns the value of a free parameter on the specified alarm.</summary>
      <returns>Value of the free parameter. The data type of the value results from the settings of the free parameter ("Data type" setting).</returns>
      <param name="strName">Alternatively to the ID specification: full name of the alarm whose value is to be returned</param>
      <param name="param">Name of the free parameter</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.GetExtAlarmParam(System.UInt32,System.String)">
      <summary>Returns the value of a free parameter on the specified alarm.</summary>
      <returns>Value of the free parameter. The data type of the value results from the settings of the free parameter ("Data type" setting).</returns>
      <param name="ID">Unequivocal identifier of the alarm whose value is to be returned</param>
      <param name="param">Name of the free parameter</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.GetExtParamInfo(System.String,outSystem.Int32,outSystem.String)">
      <summary>Returns information on a free parameter.</summary>
      <returns>Data type of the free parameter</returns>
      <param name="param">Name of the parameter on which information is to be returned</param>
      <param name="info">After the method access the value of the "Utilization number" parameter is found here.</param>
      <param name="description">After the method access the value of the "Comment" parameter is found here.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.DateTime,System.String,System.Int32,System.Object[])">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
      <param name="param1">Value of the alphanumeric "Parameter1" parameter</param>
      <param name="param2">Value of the numeric "Parameter2" parameter</param>
      <param name="textParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(VisiWinNET.Alarm.AlarmDef,System.DateTime,System.Object[])">
      <summary>Creates a temporary alarm with the transfered 'AlarmDef' object.
</summary>
      <param name="newAlarm">Newly created object of the 'AlarmDef' type. An alarm generated this way no longer refers to the information of the project databank.Usually temporary alarms are used if the alarm information is lodged in the control with alarm number and extra information. In the simplest case the PLC transmits the occurring alarms to the application with the help of a variable. In the 'Change' event of a 'VarServer' component the appropriate 'AlarmDef' objects are then generated, and activated through 'SetAlarm'.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
      <param name="objTextParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.DateTime,System.Object[])">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
      <param name="textParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.String,System.Int32,System.Object[])">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="param1">Value of the alphanumeric "Parameter1" parameter</param>
      <param name="param2">Value of the numeric "Parameter2" parameter</param>
      <param name="textParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(VisiWinNET.Alarm.AlarmDef,System.DateTime)">
      <summary>Creates a temporary alarm with the transfered 'AlarmDef' object.
</summary>
      <param name="newAlarm">Newly created object of the 'AlarmDef' type. An alarm generated this way no longer refers to the information of the project databank.Usually temporary alarms are used if the alarm information is lodged in the control with alarm number and extra information. In the simplest case the PLC transmits the occurring alarms to the application with the help of a variable. In the 'Change' event of a 'VarServer' component the appropriate 'AlarmDef' objects are then generated, and activated through 'SetAlarm'.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.DateTime)">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(VisiWinNET.Alarm.AlarmDef,System.DateTime,System.Object[],System.String,System.Int32)">
      <summary>Creates a temporary alarm with the transfered 'AlarmDef' object.
</summary>
      <param name="newAlarm">Newly created object of the 'AlarmDef' type. An alarm generated this way no longer refers to the information of the project databank.Usually temporary alarms are used if the alarm information is lodged in the control with alarm number and extra information. In the simplest case the PLC transmits the occurring alarms to the application with the help of a variable. In the 'Change' event of a 'VarServer' component the appropriate 'AlarmDef' objects are then generated, and activated through 'SetAlarm'.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
      <param name="objTextParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
      <param name="strParam1">Value of the alphanumeric "Parameter1" parameter</param>
      <param name="nParam2">Value of the numeric "Parameter2" parameter</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.String,System.Int32)">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="param1">Value of the alphanumeric "Parameter1" parameter</param>
      <param name="param2">Value of the numeric "Parameter2" parameter</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.DateTime,System.String,System.Int32)">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="timeStamp">Specification of the time stamp that is to be stored or displayed as activation time. If no time stamp is specified the system uses the current system time instead.</param>
      <param name="param1">Value of the alphanumeric "Parameter1" parameter</param>
      <param name="param2">Value of the numeric "Parameter2" parameter</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(VisiWinNET.Alarm.AlarmDef)">
      <summary>Creates a temporary alarm with the transfered 'AlarmDef' object.
</summary>
      <param name="newAlarm">Newly created object of the 'AlarmDef' type. An alarm generated this way no longer refers to the information of the project databank.Usually temporary alarms are used if the alarm information is lodged in the control with alarm number and extra information. In the simplest case the PLC transmits the occurring alarms to the application with the help of a variable. In the 'Change' event of a 'VarServer' component the appropriate 'AlarmDef' objects are then generated, and activated through 'SetAlarm'.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String)">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.AlarmManager.SetAlarm(System.String,System.Object[])">
      <summary>Activates an alarm. The name of an alarm from the project database is passed as a parameter.
</summary>
      <param name="name">Full name of the alarm. All superior group names and the alarm name, separated by "." characters, are expected as a name.Example:Grp1.Subgrp5.Msg22sets the alarm "Msg22" in the group "SubGrp5". This group lies in the "Grp1" alarm group. "Grp1" has no superior alarm group.</param>
      <param name="textParams">Field of values that are shown in the alarm text as formatted text modules.In the alarm text format character strings enclosed by "@" characters are replaced by the values specified here.</param>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmStateInfo">
      <summary>Display information regarding the current alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.BackColor">
      <summary>Background colour for the alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.ForeColor">
      <summary>Font colour for the alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.Image">
      <summary>Symbol for the alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.IsLogging">
      <summary>Returns whether the alarm status is recorded.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.IsPrinting">
      <summary>Returns whether the alarm status is printed </summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.LocalizableText">
      <summary>Returns the internally used unequivocable identification of the localizable text referring to the alarm status.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmStateInfo.Text">
      <summary>Status text for the alarm status</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmTickerEventArgs">
      <summary>Supplies data for the "AlarmTicker" event.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmTickerEventArgs.EventCode">
      <summary>Cause of the event</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmTickerEventArgs.Param1">
      <summary>Additional text information about the cause of the event</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AlarmTickerEventArgs.Param2">
      <summary>Additional numeric information about the cause of the event</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AsyncRequestSuccessArgs">
      <summary>Provides data for the "AsyncAlarmRequestFinished" event.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.AsyncRequestSuccessArgs.Success">
      <summary>Indicates whether the access of the asynchronous query was concluded successfully.</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.CurrentAlarms">
      <summary>Class for collecting and monitoring the alarms currently present in the system</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.CurrentAlarms.#ctor">
      <summary>Creates a new instance of the CurrentAlarms class. </summary>
    </member>
    <member name="M:VisiWinNET.Alarm.CurrentAlarms.#ctor(VisiWinNET.Alarm.AlarmFilter)">
      <summary>Creates a new instance of the CurrentAlarms class. A filter object can be defined to filter the alarms that are to be returned.</summary>
      <param name="NewFilter">Indication of a filter object filtering the queried alarms</param>
    </member>
    <member name="P:VisiWinNET.Alarm.CurrentAlarms.Alarms">
      <summary>Register of present alarms</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.CurrentAlarms.Filter">
      <summary>Filters the alarm information by alarm classes, groups, status and priority.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.CurrentAlarms.SortMode">
      <summary>Determines where newly present alarms are to be sorted in the collection</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.CurrentAlarms.AcknowledgeAlarm(VisiWinNET.Alarm.AlarmItem)">
      <summary>Method to acknowledge an alarm</summary>
      <param name="AckAlarm">'AlarmItem' type object from the list of present alarms ('Alarms' property). The alarm shown here is acknowledged.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.CurrentAlarms.AcknowledgeAll">
      <summary>Method to acknowledge all alarms shown in the object</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.CurrentAlarms.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="E:VisiWinNET.Alarm.CurrentAlarms.ChangeAlarm">
      <summary>Is triggered when an alarm from the 'Alarms' property collection changes status.</summary>
      <param name="sender">Indication of the object of the 'CurrentAlarms' type that has triggered the event</param>
      <param name="e">Object of the 'CurrentAlarms.AlarmEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Alarm.CurrentAlarms.ClearAlarm">
      <summary>Is triggered when an alarm from the 'Alarms' property collection is deleted.</summary>
      <param name="sender">Indication of the object of the 'CurrentAlarms' type that has triggered the event</param>
      <param name="e">Object of the 'CurrentAlarms.AlarmEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Alarm.CurrentAlarms.InitAlarm">
      <summary>Is triggered after the object has connected with the alarm server</summary>
      <param name="sender">Indication of the object of the 'CurrentAlarms' type that has triggered the event</param>
      <param name="e">Object of the 'CurrentAlarms.AlarmEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Alarm.CurrentAlarms.NewAlarm">
      <summary>Is triggered when a new alarm is inserted in the 'Alarms' property register.</summary>
      <param name="sender">Indication of the 'CurrentAlarms' type object that has triggered the event</param>
      <param name="e">Object of the 'CurrentAlarms.AlarmEventArgs' type containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableAlarmClasses">
      <summary>Collection of alarm class information</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmClasses.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmClasses.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index.</param>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmClasses.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="Class">Indication of alarm class name to access the element</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarmClasses.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.CollectionsIEnumerator type containing all 'AlarmClass' objects</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableAlarmDefs">
      <summary>Collection of alarm informations</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmDefs.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmDefs.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index.</param>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmDefs.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="Alarm">Specification of the full alarm name (hierarchy of the alarm groups and alarm name, separated by a ".") for access to the element.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarmDefs.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.CollectionsIEnumerator type containing all 'AlarmDef' objects</returns>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarmDefs.Refresh">
      <summary>Re-reads the contents of the collection from the project databank</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableAlarmFiles">
      <summary>Collection of information about the files recorded by the system</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmFiles.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmFiles.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index</param>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmFiles.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="FileName">Indication of file name for element accessThe file name must be entered without path and file extension.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarmFiles.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.Inumerator type containing all 'HistoricalAlarmFile' objects</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableAlarmGroups">
      <summary>Collection of alarm group information</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmGroups.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmGroups.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index</param>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarmGroups.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="Group">Indication of alarm group name to access the element. If the alarm group is not in the top hierarchy the full nomination of the group must be entered:From the top hierarchy downwards to the proper group all names must be separated by "." characters.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarmGroups.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'AlarmGroup' objects</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableAlarms">
      <summary>Collection of alarm informations</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarms.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableAlarms.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableAlarms.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'AlarmItem' objects</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.EnumerableHistoricalAlarms">
      <summary>Collection of recorded alarm information</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableHistoricalAlarms.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.EnumerableHistoricalAlarms.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Indication of enumeration index to access the element.The first element is addressed with the '0' index</param>
    </member>
    <member name="M:VisiWinNET.Alarm.EnumerableHistoricalAlarms.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections|Enumerator type containing all 'HistoricalAlarmItem' objects</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarmFile">
      <summary>Class encapsulating the information of a historic alarm file</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmFile.#ctor">
      <summary>Initializes a new instance of the 'HistoricalAlarmFile' class.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmFile.#ctor(System.String)">
      <summary>Initializes a new instance of the 'HistoricalAlarmFile' class.</summary>
      <param name="fileName">File name under which the object is to encapsulate the information</param>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.Alarms">
      <summary>Returns a collection of alarm information from the file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.FileName">
      <summary>Returns the name of the file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.Filter">
      <summary>Determines a filter object for querying alarm information.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.MaxFileTime">
      <summary>Returns the time stamp of the last alarm recorded in the file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.MinFileTime">
      <summary>Returns the time stamp of the first alarm recorded in the file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFile.Notes">
      <summary>Returns a collection of all notes from the file</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmFile.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmFile.GetHistoricalData">
      <summary>Retrieve recorded alarms.</summary>
      <returns>True: The query was successfully started. False: An error has occurred.</returns>
    </member>
    <member name="E:VisiWinNET.Alarm.HistoricalAlarmFile.AsyncAlarmRequestFinished">
      <summary>Is triggered when an asynchronous query of alarm information was ended.</summary>
      <param name="sender">Definition of the object of the 'HistoricalAlarmFile' type that has triggered the event</param>
      <param name="e">Object of the 'AsyncRequestSuccessArgs' type containing further information related to the event</param>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarmFilter">
      <summary>Class describing the filter setting for querying recorded alarms</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFilter.MaxTime">
      <summary>Sets the final point of the time filter.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFilter.MinTime">
      <summary>Sets the starting point of the time filter.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmFilter.User">
      <summary>Determines a user name</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmFilter.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarmItem">
      <summary>Returns information relating to a recorded alarm.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.AcknowledgeTime">
      <summary>Acknowledgement time</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.ActivationCounter">
      <summary>Counter for the reactivated status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.ActivationTime">
      <summary>Time the alarm has been activated</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Class">
      <summary>Information on the linked alarm class</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.DeactivationTime">
      <summary>Time of deactivation</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.FileName">
      <summary>Name of the file in which the historic alarms were recorded</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Group">
      <summary>Returns the object representing the alarm group of the recorded alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.HasNotes">
      <summary>Returns whether notes have been stored on the recorded alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.HistoricalID">
      <summary>Shows the unequivocal identification of the alarm from the file.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.LocalizableParam1">
      <summary>Returns the projected value of the alphanumeric "Parameter1" parameter.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.LocalizableText">
      <summary>Returns the internally used unequivocal identification of the localizable text</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Machine">
      <summary>Returns the computer name with which the alarm was acknowledged.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Name">
      <summary>Returns the name of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Notes">
      <summary>Returns the notes added to a recorded alarm as a collection</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Param1">
      <summary>Returns the value of the alphanumeric 'Parameter1' parameter</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Param2">
      <summary>Value of the numeric 'Parameter2' parameter</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Priority">
      <summary>Priority of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.State">
      <summary>Alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.StateInfo">
      <summary>Display of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.Text">
      <summary>Returns the text of the alarm in the currently set language.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmItem.User">
      <summary>Returns the user name with which the alarm was acknowledged.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmItem.Equals(System.Object)">
      <summary>Determines whether two objects are equal</summary>
      <returns>True if both objects are equal</returns>
      <param name="obj">Passing of the object with which the equality is to be checked.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmItem.GetHashCode">
      <summary>Returns the hashcode of this object</summary>
      <returns>Computed hashcode</returns>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmItem.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarmNote">
      <summary>Class representing a note relating to a recorded alarm</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNote.#ctor(System.String,System.String,System.DateTime)">
      <summary>Creates a new instance of the 'HistoricalAlarmNote' class</summary>
      <param name="fileName">Optional indication of the name of the file in which the note is to be recorded</param>
      <param name="noteText">Text of note</param>
      <param name="timeStamp">Time stamp of note</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNote.#ctor(System.String)">
      <summary>Creates a new instance of the 'HistoricalAlarmNote' class</summary>
      <param name="noteText">Text of note</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNote.#ctor(System.String,System.DateTime)">
      <summary>Creates a new instance of the 'HistoricalAlarmNote' class</summary>
      <param name="noteText">Text of note</param>
      <param name="timeStamp">Time stamp of note</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNote.#ctor(System.String,System.DateTime,System.String)">
      <summary>Creates a new instance of the 'HistoricalAlarmNote' class</summary>
      <param name="noteText">Text of note</param>
      <param name="timeStamp">Time stamp of note</param>
      <param name="historicalAlarmID">Specification of the 'HistoricalID' of a 'HistoricalAlarmItem' object</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNote.#ctor(System.String,System.String,System.DateTime,System.String)">
      <summary>Creates a new instance of the 'HistoricalAlarmNote' class</summary>
      <param name="fileName">Optional indication of the name of the file in which the note is to be recorded</param>
      <param name="noteText">Text of note</param>
      <param name="timeStamp">Time stamp of note</param>
      <param name="historicalAlarmID">Specification of an 'HistoricalID' of a 'HistoricalAlarmItem' object</param>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.FileName">
      <summary>Returns the name of the file in which the note is recorded</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.HistoricalAlarmID">
      <summary>Identifaction of the alarm to which the note shall relate</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.ID">
      <summary>Identification of a note after having been added</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.Text">
      <summary>Text of note</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.TimeStamp">
      <summary>Specification of date / time</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNote.User">
      <summary>Specification of author</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarmNotes">
      <summary>Class for drafting and querying notes related to alarms and alarm files</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNotes.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNotes.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNotes.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of enumeration index to access the element.The first element is addressed with the "0" index.</param>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarmNotes.Item(System.String)">
      <summary>Access to an element in the list with help of the noteID</summary>
      <param name="noteID">Specification of unequivocal (within file) identification of note</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Add(VisiWinNET.Alarm.HistoricalAlarmNote)">
      <summary>Adds a new note</summary>
      <returns>Unequivocal identification of note (within the file)</returns>
      <param name="note">Object to be added, containing the note information</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Change(System.String,System.String)">
      <summary>Changes an already existing note</summary>
      <returns>'True' if change has been successful</returns>
      <param name="noteID">Specification of unequivocal identification of a note from a file</param>
      <param name="newText">New text to be stored as a note</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Change(VisiWinNET.Alarm.HistoricalAlarmNote)">
      <summary>Changes an already existing note</summary>
      <returns>'True' if change has been successful</returns>
      <param name="note">Passing of object with changed parameters</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.|Enumerator type containing all 'HitoricalAlarmNote' objects</returns>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Remove(VisiWinNET.Alarm.HistoricalAlarmNote)">
      <summary>Deletes a note</summary>
      <returns>'True' if change was carried out successfully</returns>
      <param name="note">Passing of 'HistoricalAlarmNote' object to be deleted. The note is located by the 'ID' and 'HistoricalAlarmID' properties of the passed object, and subsequently deleted.</param>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarmNotes.Remove(System.String)">
      <summary>Deletes a note</summary>
      <returns>'True' if change was carried out successfully</returns>
      <param name="noteID">Unequivocal identification of note that is to be deleted</param>
    </member>
    <member name="T:VisiWinNET.Alarm.HistoricalAlarms">
      <summary>Class for accessing historic alarms</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarms.#ctor">
      <summary>Creates a new instance of the 'HistoricalAlarms' class</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarms.Alarms">
      <summary>Collection of retrieved alarms</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarms.Files">
      <summary>Returns information from all files created by the alarm server as a collection.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.HistoricalAlarms.Filter">
      <summary>Determines the filter for the retrieval of historic alarm information.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarms.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.HistoricalAlarms.GetHistoricalData">
      <summary>Retrieval of recorded alarms</summary>
      <returns>True: The query was successfully started.</returns>
    </member>
    <member name="E:VisiWinNET.Alarm.HistoricalAlarms.AlarmTicker">
      <summary>Information event about alarm server functions</summary>
      <param name="sender">Specification of 'HistoricalAlarms' type object that has triggered the event</param>
      <param name="e">'HistoricalAlarms.AlarmTickerEventArgs' type object containing further information related to the event</param>
    </member>
    <member name="E:VisiWinNET.Alarm.HistoricalAlarms.AsyncAlarmRequestFinished">
      <summary>Is triggered when an asynchronous query for alarm information is ended.</summary>
      <param name="sender">Specification of the 'HistoricalAlarms' type object that has triggered the event</param>
      <param name="e">'HistoricalAlarms.AsyncRequestSuccessArgs' type object containing further information related to the event.</param>
    </member>
    <member name="T:VisiWinNET.Alarm.StatusBarAlarm">
      <summary>Class to link to an alarm line</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.StatusBarAlarm.#ctor">
      <summary>Creates a new instance of the 'StatusBarAlarm' class.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.StatusBarAlarm.#ctor(VisiWinNET.Alarm.AlarmFilter)">
      <summary>Creates a new instance of the 'StatusBarAlarm' class.</summary>
      <param name="NewFilter">Specification of an 'AlarmFilter' type object that filters the returned alarm information by groups, classes or priorities. If no object is specified all alarm information is returned.</param>
    </member>
    <member name="P:VisiWinNET.Alarm.StatusBarAlarm.CurrentAlarm">
      <summary>Returns the alarm with the highest current priority.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.StatusBarAlarm.Filter">
      <summary>Filters the alarm information by alarm classes, groups, status and priority.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.StatusBarAlarm.SortMode">
      <summary>Determines with alarms of the same priority which alarm is returned.</summary>
    </member>
    <member name="P:VisiWinNET.Alarm.StatusBarAlarm.ToggleAlarms">
      <summary>Determines whether cyclic switches are to be made between multiple currently present alarms.</summary>
    </member>
    <member name="M:VisiWinNET.Alarm.StatusBarAlarm.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="E:VisiWinNET.Alarm.StatusBarAlarm.ChangeAlarm">
      <summary>Is triggered when the alarm information indicated in the 'CurrentAlarm' property has changed.</summary>
      <param name="sender">Specification of 'StatusBarAlarm' type object that has triggered the event</param>
      <param name="e">'AlarmEventArg' type object containing the new alarm information</param>
    </member>
    <member name="E:VisiWinNET.Alarm.StatusBarAlarm.ClearAlarm">
      <summary>Is triggered when an alarm information indicated in the 'CurrentAlarm' property is deleted.</summary>
      <param name="sender">Specification of the 'StatusBarAlarm' type object that has triggered the event</param>
      <param name="e">Return of an 'EventArg' object (base class for event arguments) containing no further information</param>
    </member>
    <member name="E:VisiWinNET.Alarm.StatusBarAlarm.ToggleAlarm">
      <summary>Is triggered when switches are made between alarms in the Toggle mode.</summary>
      <param name="sender">Indication of the 'StatusBarAlarm' object that has triggered the event</param>
      <param name="e">Object of the 'AlarmEventArg' type containing the new alarm information</param>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmHandler">
      <summary>Delegate for the 'NewAlarm', 'ChangeAlarm', 'InitAlarm', 'ToggleAlarm' and 'ClearAlarm' events</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmTickerHandler">
      <summary>Delegate for the 'AlarmTicker' event</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AsyncAlarmRequestFinishedHandler">
      <summary>Delegate for the 'AsyncAlarmRequestFinished' event</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.ClearAlarmHandler">
      <summary>Delegate for the ClearAlarm event</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmSortModes">
      <summary>Enumeration containing the possible sorting sequences of alarms that are current / to be displayed</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmSortModes.FirstUpFaultOnTop">
      <summary>For multiple alarms (Alarm lists): New alarms are inserted at the end of the register.
For the alarm with the highest priority (Alarm lines): A further alarm with the currently highest priority will not overwrite the current return/display value.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmSortModes.NewestFaultOnTop">
      <summary>For multiple alarms: New alarms will be inserted at the beginning of the register.
For the alarm with the highest priority: A further alarm with the currently highest priority will overwrite the current return/display value.</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.AlarmStates">
      <summary>Enumeration containing the possible alarm states</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.Active">
      <summary>Tantamount to the alarm status 'arrived'. The event bit is active. No acknowledgement was made.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.ActiveAck">
      <summary>Tantamount to the alarm status 'arrived acknowledged'. The alarm was acknowledged by a client but the event bit is still active.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.Cleared">
      <summary>The alarm was finally cleared. The event bit is inactive. All necessary acknowledgements  were made.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.Inactive">
      <summary>Tantamount to the alarm status 'gone'. The event bit is inactive. No acknowledgement was made during the active status. A further acknowledgement is still expected.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.InactiveAck">
      <summary>Tantamount to the alarm status 'acknowledged gone'. The event bit is inactive. An acknowledgement was made during the active status. A further acknowledgement is still expected.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.None">
      <summary>Only allowed as a filter setting. When this value is set as a filter all alarm states are returned in the query.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.AlarmStates.Reactivated">
      <summary>The alarm was reactivated.
If the event bit was set back by the PLC but the implemented acknowledgement philosophy requires an acknowledgement by the user the 'reactivated' status will appear unless the alarm is acknowledged, and the event bit reset.</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.EventCodes">
      <summary>Enumeration containing the possibe causes of an 'AlarmTicker' event</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.EventCodes.NewFile">
      <summary>The history record file was changed.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.EventCodes.NewPath">
      <summary>The path specification for the history files was changed.</summary>
    </member>
    <member name="T:VisiWinNET.Alarm.ExtAlarmParamType">
      <summary>Enumeration of the data types of the free parameters</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.Double">
      <summary>The free parameter is returned as 'Double' (floating point number).</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.File">
      <summary>The free parameter is returned as a field of bytes.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.Image">
      <summary>The free parameter is returned as an 'Image' object.</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.Long">
      <summary>The free parameter is returned as 'Long' (whole-numbered).</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.None">
      <summary>The free parameter has not been not found</summary>
    </member>
    <member name="F:VisiWinNET.Alarm.ExtAlarmParamType.Text">
      <summary>The free parameter is returned as 'String'.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogChangeEventArgs">
      <summary>Provides data for the 'ChangeX', 'ChangeY' and 'Change' events</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.Cause">
      <summary>Cause of value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.PreviousState">
      <summary>Converted value of process variable prior to change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.PreviousValue">
      <summary>Value of the process variable prior to change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.Quality">
      <summary>Evaluating process information</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.State">
      <summary>Converted current process variable value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.TimeStamp">
      <summary>Time stamp of the transferred value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogChangeEventArgs.Value">
      <summary>Current variable value</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the following information is returned: - value - time stamp - QualityFlag - cause of change. Example: Value = 10 | TimeStamp = 20.11.2003 09:35:53 | Quality = VisiWinNET.DataAccess.OPCQuality | Cause = Process</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogItem">
      <summary>Object to access a numerical calue from the process databank</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.#ctor">
      <summary>Creates a new instance of the AnalogItem class.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.CalculatedDecPoint">
      <summary>Returns the point shifting calculated from 'DecPoint' and 'UnitConversion'.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.DecPoint">
      <summary>Decimal adjustment with whole-numbered values or specification of decimal places with floating point figures</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.EditableState">
      <summary>Cached copy of the 'State' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.EditableValue">
      <summary>Cached copy of the 'Value' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.State">
      <summary>Value that has been converted/altered for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.UnitConversion">
      <summary>Determines whether a unit conversion is to take place</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.UnitText">
      <summary>Value of the 'UnitText' parameter</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogItem.Value">
      <summary>Value from the variable core</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.CalculateValue(System.Double,outSystem.Double)">
      <summary>Conducts the conversion as determined in the 'DecPoint' and 'UnitConversion' using the value passed in 'normalizedValue'.</summary>
      <returns>True when the conversion has been successful.</returns>
      <param name="normalizedValue">Value to be converted</param>
      <param name="calculatedValue">A variable of the 'Double' type is expected as a parameter. Here the converted value can be read out after the method has been called up.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.ReverseCalculateValue(System.Double,outSystem.Double)">
      <summary>Conducts the conversion determined via the 'DecPoint' and 'UnitConversion' properties with the value passed in 'calculatedValue' in reverse direction.</summary>
      <returns>True if the conversion has been conducted successfully.</returns>
      <param name="calculatedValue">Value to be converted</param>
      <param name="normalizedValue">A variable of the 'Double' type is expected as a parameter. Here, the converted value can be read out after the method has been accessed.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.StartEdit">
      <summary>Starts the editing of the internal copy of a process variable value.</summary>
      <returns>"True" if the copy of the process variable value was released for editing, otherwise "False".</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.StopEdit(System.Boolean)">
      <summary>Confirms or abolishes the input to the linked process variable.</summary>
      <param name="transmitEditResult">Determines whether the content of the 'EditableValue' property is to be transmitted to the 'Value' property and thus to the variable core.True: The value is to be writtenFalse: The value is to be abolished. The previous input is cleared by accessing the 'StartEdit' method.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogItem.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Returns the value of the 'Name' property, i.e. the name of the linked process variable.</returns>
    </member>
    <member name="E:VisiWinNET.DataAccess.AnalogItem.Change">
      <summary>Is triggered when the value of the process variable changes.</summary>
      <param name="sender">Object of the 'AnalogItem' type that has triggered the event</param>
      <param name="e">Object of the 'AnalogChangeEventsArg' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.AnalogItem.EditStateChange">
      <summary>Is triggered when the object changes the editing status.</summary>
      <param name="sender">Indication of the 'AnalogItem' type object that has triggered the event</param>
      <param name="e">Object of the 'AnalogItem.EditStateChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.AnalogItem.VerifyEditValue">
      <summary>Event to verify the input value</summary>
      <param name="sender">Indication of the 'AnalogItem' type object that has triggered the event</param>
      <param name="e">Object of the 'VerifyAnalogEditValueEventArgs' type containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogValue">
      <summary>Class used to set a firm or dynamic input limit</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValue.#ctor">
      <summary>Creates a new instance of the 'AnalogValue' class.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValue.IsAttached">
      <summary>Establishes whether the object is currently administering a valid process variable registration</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValue.RecipeEdit">
      <summary>Returns whether the process value determined by 'VWItem' is currently obtained from the variable core or the recipe server.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValue.RecipeMember">
      <summary>Determines whether the object participates in the recipe administration.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValue.Value">
      <summary>Value of the input limit</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValue.VWItem">
      <summary>Dynamic value as input limit</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValue.Attach">
      <summary>Registers the object with the process variable core.</summary>
      <returns>True: the connection with the indicated process variable value could be established. False: an error has occurred.</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValue.Detach">
      <summary>Deregisters the object with the process variable core.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValue.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValue.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Returns the value of the 'Name' property, i.e. the name of the linked process variable.</returns>
    </member>
    <member name="E:VisiWinNET.DataAccess.AnalogValue.Change">
      <summary>Reports the change of the process variable value indicated in the 'VWItem' property.</summary>
      <param name="sender">Indication of the 'AnalogValue' type object that has triggered the event</param>
      <param name="e">Object of the 'AnalogValueChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogValueChangeEventArgs">
      <summary>Provides data for the 'Change', 'MaxValueChange' and 'MinValueChange' events.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValueChangeEventArgs.Cause">
      <summary>Cause of the variable change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValueChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable kernel</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValueChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.AnalogValueChangeEventArgs.Value">
      <summary>Current value of the process variable</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.AnalogValueChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the following information is returned: - value - cause of change. Example: Value = 1 | Cause = Process</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.BitChangeEventArgs">
      <summary>Provides data for the 'BitChange' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.BitNumber">
      <summary>Indication of the number of the bit that has triggered the event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.BitValue">
      <summary>Bit value subsequent to the change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.Cause">
      <summary>Cause of the bit change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.PreviousValue">
      <summary>Value of the process variable prior to the change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.Quality">
      <summary>Evaluating information from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.TimeStamp">
      <summary>Time stamp of the transmitted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BitChangeEventArgs.Value">
      <summary>Current variable value</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>A character string containing the information on the event, e.g.: Value = 0 | State = 0 | TimeStamp = 08.11.2007 10:57:49 | Quality = Data = Good Limit = Ok | Source = Configuration | RecipeMode = False</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.BitHelper">
      <summary>Class that allows identifying and manipulating a whole-numbered variable on a binary level</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.#ctor">
      <summary>Creates a new instance of the 'BitHelper' class</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.GetBit(System.Int32,System.Int32)">
      <summary>Identifies the value of a bit from a variable.</summary>
      <returns>If the queried bit has the value "1", 'True' is returned, otherwise 'False'.</returns>
      <param name="sourceValue">(Signed or unsigned) value from which the bit status is to be identified</param>
      <param name="bitNumber">Number of the bit in 'sourceValue' to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.GetBit(System.UInt32,System.Int32)">
      <summary>Identifies the value of a bit from a variable.</summary>
      <returns>If the queried bit has the value "1", 'True' is returned, otherwise 'False'.</returns>
      <param name="sourceValue">(Signed or unsigned) value from which the bit status is to be identified</param>
      <param name="bitNumber">Number of the bit in 'sourceValue' to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.GetBit(System.Int32,System.Short)">
      <summary>Identifies the value of a bit from a variable.</summary>
      <returns>If the queried bit has the value "1", 'True' is returned, otherwise 'False'.</returns>
      <param name="sourceValue">(Signed or unsigned) value from which the bit status is to be identified</param>
      <param name="bitNumber">Number of the bit in 'sourceValue' to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.HiByte(System.UInt16)">
      <summary>Returns the value of the upper byte of a word (data type 'UInt16'=2 byte).</summary>
      <returns>The identified upper byte of the word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose upper byte is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.HiByte(System.Short)">
      <summary>Returns the value of the upper byte of a word (data type 'Short'=2 byte).</summary>
      <returns>The identified upper byte of the word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose upper byte is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.HiWord(System.UInt32)">
      <summary>Returns the value of th upper word of a long word (data type 'UInt32'=4 Byte).</summary>
      <returns>The identified upper wordof the long word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose upper word is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.HiWord(System.Int32)">
      <summary>Returns the value of th upper word of a long word (data type 'Integer'=4 Byte).</summary>
      <returns>The identified upper wordof the long word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose upper word is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LeftShift(System.Int32,System.Int32)">
      <summary>Provides the binary shifting of the specified value to the left by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="shiftValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LeftShift(System.UInt32,System.Int32)">
      <summary>Provides the binary shifting of the specified value to the left by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="shiftValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LeftShift(System.Int32,System.Short)">
      <summary>Provides the binary shifting of the specified value to the left by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="shiftValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LoByte(System.UInt16)">
      <summary>Returns the value of the lowerbyte of a word (data type 'UInt16'=2 byte).</summary>
      <returns>The identified lower byte of the word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose lower byte is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LoByte(System.Short)">
      <summary>Returns the value of the lowerbyte of a word (data type 'Short'=2 byte).</summary>
      <returns>The identified lower byte of the word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose lower byte is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LoWord(System.UInt32)">
      <summary>Returns the value of the lower word of a long word (data type 'UInt32'=4 byte)</summary>
      <returns>The identified lower word of the long word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose lower word is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.LoWord(System.Int32)">
      <summary>Returns the value of the lower word of a long word (data type 'Integer'=4 byte)</summary>
      <returns>The identified lower word of the long word</returns>
      <param name="sourceValue">(Signed or unsigned) value whose lower word is to be identified</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.RightShift(System.UInt32,System.Int32)">
      <summary>Provides the binary shifting of the specified value to the right by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="sourceValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.RightShift(System.Int32,System.Int32)">
      <summary>Provides the binary shifting of the specified value to the right by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="sourceValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.RightShift(System.Int32,System.Short)">
      <summary>Provides the binary shifting of the specified value to the right by the specified number of places.</summary>
      <returns>Shifted value</returns>
      <param name="sourceValue">(Signed or unsigned) value for binary shifting</param>
      <param name="shiftBy">Number of binary places by which the value is to be shifted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.SetBit(System.UInt32,System.Int32,System.Boolean)">
      <summary>Sets the value of a bit from a variable</summary>
      <returns>The new value in which the bit was set / reset.</returns>
      <param name="sourceValue">(Signed or unsigned) value in which the bit is to be set/reset</param>
      <param name="bitNumber">Number of the bit whose value is to be set. Possible input: "1..31".</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.SetBit(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the value of a bit from a variable</summary>
      <returns>The new value in which the bit was set / reset.</returns>
      <param name="sourceValue">(Signed or unsigned) value in which the bit is to be set/reset</param>
      <param name="bitNumber">Number of the bit whose value is to be set. Possible input: "1..31".</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.SetBit(System.Int32,System.Short,System.Boolean)">
      <summary>Sets the value of a bit from a variable</summary>
      <returns>The new value in which the bit was set / reset.</returns>
      <param name="sourceValue">(Signed or unsigned) value in which the bit is to be set/reset</param>
      <param name="bitNumber">Number of the bit whose value is to be set. Possible input: "1..31".</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.SetBit(System.UInt32,System.Int32,System.Int32)">
      <summary>Sets the value of a bit from a variable</summary>
      <returns>The new value in which the bit was set / reset.</returns>
      <param name="sourceValue">(Signed or unsigned) value in which the bit is to be set/reset</param>
      <param name="bitNumber">Number of the bit whose value is to be set. Possible input: "1..31".</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BitHelper.SetBit(System.Int32,System.Int32,System.Int32)">
      <summary>Sets the value of a bit from a variable</summary>
      <returns>The new value in which the bit was set / reset.</returns>
      <param name="sourceValue">(Signed or unsigned) value in which the bit is to be set/reset</param>
      <param name="bitNumber">Number of the bit whose value is to be set. Possible input: "1..31".</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.BlockInfo">
      <summary>Contains information on a blockwise variable registration/deregistration process through the 'MultiItemActivator' class.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BlockInfo.Name">
      <summary>Returns the name of the 'BlockInfo'</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BlockInfo.State">
      <summary>Returns the status that the 'BlockInfo' object is assuming</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.BlockInfo.Equals(System.Object)">
      <summary>Determines whether two objects are equal</summary>
      <returns>True if both objects are equal</returns>
      <param name="obj">Passing of the object with which the equality is to be checked.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BlockInfo.GetHashCode">
      <summary>Returns the hashcode of this object</summary>
      <returns>Computed hashcode</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.BlockInfo.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the name is returned together with the status.</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.BlocksInfo">
      <summary>Collection of 'BlockInfo' objects
</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.BlocksInfo.#ctor">
      <summary>Initializes a new instance of the 'BlocksInfo' class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BlocksInfo.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.BlocksInfo.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of (0-indicated) index</param>
    </member>
    <member name="P:VisiWinNET.DataAccess.BlocksInfo.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="formName">Specification of BlockInfo name</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.BlocksInfo.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.CollectionsIEnumerator type containing all 'BlockInfo' objects</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.ChangeEventArgs">
      <summary>Provides data for the 'Change' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.Cause">
      <summary>Cause of the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.PreviousState">
      <summary>Value prior to the change, that has been converted/altered for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.PreviousValue">
      <summary>Value of the process variable prior to the change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.Quality">
      <summary>Evaluating information from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.State">
      <summary>Value prior to the change, that has been converted/altered for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.TimeStamp">
      <summary>Time stamp of the transmitted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ChangeEventArgs.Value">
      <summary>Current variable value</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.ChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the following information is returned: - value - time stamp - QualityFlag - cause of change Example: Value = 12 | TimeStamp = 20.11.2003 09:49:53 | Quality = VisiWinNET.DataAccess.OPCQuality | Cause = StopEd</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.DigitalChangeEventArgs">
      <summary>Provides data for the 'Change' and 'ChangeMonitor' events.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.Cause">
      <summary>Cause of the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.PreviousState">
      <summary>Value prior to the change that has been converted/altered for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.PreviousValue">
      <summary>Value of the process variable prior to the change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.Quality">
      <summary>Evaluating information from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.State">
      <summary>New value, converted/altered for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.TimeStamp">
      <summary>Time stamp of the transmitted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalChangeEventArgs.Value">
      <summary>Current variable value</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.DigitalChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the following information is returned: - value - status - time stamp - QualityFlag - cause of change Example: Value = 1 | State = True | TimeStamp = 20.11.2003 09:53:35 | Quality = VisiWinNET.DataAccess.OPCQuality | Cause = ValueProperty</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.DigitalItem">
      <summary>Object for access to a bit of a whole-numbered process variable from the process databank</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.DigitalItem.#ctor">
      <summary>Creates a new instance of the DigitalItem class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalItem.BitNumber">
      <summary>Determines the number of the bit in the process variable.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalItem.EditableState">
      <summary>Cached copy of the 'State' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalItem.EditableValue">
      <summary>Cached copy of the 'Value' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalItem.State">
      <summary>Value, converted/changes for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.DigitalItem.Value">
      <summary>Value from the variable core</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.DigitalItem.StartEdit">
      <summary>Starts the editing of the internal copy of a process variable value</summary>
      <returns>"True" when the copy of the process variable value was released for editing, otherwise "False"</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.DigitalItem.StopEdit(System.Boolean)">
      <summary>Confirms or abolishes the input to the linked process variable.</summary>
      <param name="transmitEditResult">Determines whether the content of the 'EditableValue' property is to be transmitted to the 'Value' property and thus to the variable core.True: the value is writtenFalse: the value is abolished. Via re-accessing the 'StartEdit' method the previous input is adjusted.</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.DigitalItem.Change">
      <summary>Is triggered when the bit determined via 'BitNumber' in the value of the process variable changes</summary>
      <param name="sender">Specification of the 'DigitalItem' type object that has triggered the event</param>
      <param name="e">Object of the 'DigitalChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.DigitalItem.EditStateChange">
      <summary>Is triggered when the object changes the editing status</summary>
      <param name="sender">Specification of the 'DigitalItem' type object that has triggered the event</param>
      <param name="e">Object of the 'DigitalItem.EditStateChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.DigitalItem.VerifyEditValue">
      <summary>Event for the verification of the input value</summary>
      <param name="sender">Definition of the 'DigitalItem' type object that has triggered the event</param>
      <param name="e">Object of the 'VerifyDigitalEditValueEventArgs' type containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.EditStateChangeEventArgs">
      <summary>Provides data for the 'EditStateChange' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.EditStateChangeEventArgs.EditState">
      <summary>Returns the current editing status</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.Item">
      <summary>Object for accessing a process variable from the process databank without specific data type definition.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.Item.#ctor">
      <summary>Creates a new instance of the Item class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.CalculatedDecPoint">
      <summary>Returns the point shifting calculated from 'DecPoint' and 'UnitConversion'.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.DecPoint">
      <summary>Decimal adjustment with whole-numbered values or specification of decimal places with floating point figures</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.EditableState">
      <summary>Cached copy of the 'State' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.EditableValue">
      <summary>Cached copy of the 'Value' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.State">
      <summary>Value converted/changed for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.UnitConversion">
      <summary>Determines whether a unit conversion is to take place</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.UnitText">
      <summary>Value of the 'Einheitentext' parameter</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.Item.Value">
      <summary>Value from the variable core</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.Item.CalculateValue(System.Object,outSystem.Object)">
      <summary>Conducts the conversion with the value passed in 'Value' as determined through the 'DecPoint' and 'UnitConversion' properties</summary>
      <returns>True when the conversion has been conducted successfully</returns>
      <param name="Value">Value that is to be converted</param>
      <param name="RetValue">A variabe of the 'Object' tape is expected as a parameter. After accessing the method the converted value can be read out here.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.Item.ReverseCalculateValue(System.Object,outSystem.Object)">
      <summary>Executes the reverse conversion with the value passed in 'Value' as determined through the 'DecPoint' and 'UnitConversion' properties.</summary>
      <returns>True when the conversion has been successful</returns>
      <param name="Value">Value to be converted</param>
      <param name="RetValue">A variable of the 'Object' tape is expected as a parameter. After accessing the method the converted value can be read out here.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.Item.StartEdit">
      <summary>Starts editing the internal copy of a process variable value.</summary>
      <returns>"True" when the copy of the process variable value was released for editing, otherwise "False".</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.Item.StopEdit(System.Boolean)">
      <summary>Confirms or abolishes the input to the linked process variable.</summary>
      <param name="transmitEditResult">Determines whether the content of the 'EditableValue' property is to be transmitted to the 'Value' property and thus to the variable core.True: the value is writtenFalse: the value is abolished. Through re-accessing the 'StartEdit' method the prior input is adjusted.</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.Item.Change">
      <summary>Is triggered when the value of the process variable changes</summary>
      <param name="sender">Specification of the 'Item' type object that has triggered the event</param>
      <param name="e">Object of the 'ChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.Item.EditStateChange">
      <summary>Is triggered when the object changes the editing status</summary>
      <param name="sender">Definition of the 'Item' type object that has triggered the event</param>
      <param name="e">Object of the 'EditStateChangeEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.Item.VerifyEditValue">
      <summary>Event to verify the input value</summary>
      <param name="sender">Indication of the 'Item' type object that has triggered the event</param>
      <param name="e">Object of the 'Item.VerifyEditValueEventArgs' type that contains further information on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.ItemInfo">
      <summary>Object for access to the properties of a variable from the process databank</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.#ctor(System.String)">
      <summary>Creates a new instance of the 'ItemInfo' class</summary>
      <param name="VWItem">Name of the process variable whose information is to be returned.The complete process variable designator (as also choosable in the VWItem properties of the controls) is expected as a name:{channel name.}{Variable}{&lt;.element resolution&gt;}with:{channel name.}: name of the communication channel (with internal variables this space remains free){Variable}: the alias of the process variable{&lt;.element resolution&gt;}: definition of the structure/field element, enclosed in pointed brackets. Field elements are identified by square brackets. Structural elements are separated by the point operator.</param>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.DataType">
      <summary>Indication of the data type</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.DefaultValue">
      <summary>Returns the value of the "Substitute Value" parameter</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.IsValid">
      <summary>Returns whether the specified variable was found in the variable kernel.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.ItemID">
      <summary>Returns the ItemID/Address of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.LocalizedName">
      <summary>Value of the Text' parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.MaxValue">
      <summary>Value of the 'Maximum' parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.MinValue">
      <summary>Value of the 'Minimum' parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.Name">
      <summary>Name of the process variable from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.PLCAddress">
      <summary>Returns the ItemID/address of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.Text">
      <summary>Returns the localizable text on the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.UnitClass">
      <summary>Returns the unit class specified in the variable definition.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.UnitDecPoint">
      <summary>Returns the value of the "DecPoint" parameter.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.ItemInfo.UnitText">
      <summary>Returns the value of the "Unit text" parameter.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.CalculateValue(System.Object,outSystem.Object)">
      <summary>Conducts the conversion to be applied to the process variable with the value passed in 'Value'.</summary>
      <returns>True: the method access was successful False: an error has occurred</returns>
      <param name="Value">Value to be converted</param>
      <param name="RetValue">A variable of the 'Object' type is expected as a parameter. Subsequent to accessing the method the converted value can be read our here.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.GetItemInfo(System.String)">
      <summary>Static function for generating an 'ItemInfo' object</summary>
      <returns>Object of the 'ItemInfo' type</returns>
      <param name="VWItem">Name of the process variable whose information is to be returned.The expected name is the full process variable designator (as also choosable in the VWItem properties of the controls).</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.GetProperty(System.String)">
      <summary>Returns a property of the linked proces variable</summary>
      <returns>Object containing the queried property value</returns>
      <param name="property">Name of the property to be queried. At present querying the substitution value via the 'DefaultValue' value is possible here.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.ItemInfo.ReverseCalculateValue(System.Object,outSystem.Object)">
      <summary>Conducts the invers conversion to be applied to the process variable with thevalue passed in 'Value'.</summary>
      <returns>True: the method access was successful False: an error has occurred</returns>
      <param name="Value">Value to be converted</param>
      <param name="RetValue">A variable of the 'Object' type is expected as a parameter. Here, the converted value can be read out after accessing the method.</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.MultiItemActivator">
      <summary>Activates/deactivates the blockwise exchange of process variables.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.#ctor">
      <summary>Initializes a new instance of the 'MultiItemActivator' class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.MultiItemActivator.ActiveBlocks">
      <summary>Returns the active variable blocks</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.MultiItemActivator.HasPendingMultiAction">
      <summary>Returns whether the function of the 'StartMultiAction' method is presently interrupting the blockwise variable (de)activation.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.MultiItemActivator.PendingBlocks">
      <summary>Returns the blocks for whom 'DeactivationBlockFinished'/ 'ActivationBlockFinished' has not yet been called up</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.ActivationBlockFinished(System.String,System.Boolean)">
      <summary>Finalizes the blockwise variable activation process started through 'ActivationBlockStart'</summary>
      <param name="blockName">Name of the block that was passed in 'ActivationBlockStart'</param>
      <param name="success">True: carry out block activationFalse: abort block activation</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.ActivationBlockStart(System.String)">
      <summary>Starts the blockwise variable activation process</summary>
      <param name="blockName">Freely selectable name for the block</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.DeactivationBlockFinished(System.String,System.Boolean)">
      <summary>Finishes the blockwise variable activation process started through 'DeactivationBlockStart'

</summary>
      <param name="blockName">Name of the block that was passed in 'DeactivationBlockStart'</param>
      <param name="success">True: carry out block deactivationFalse: abort block deactivation</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.DeactivationBlockStart(System.String)">
      <summary>Starts the blockwise variable deactivation process</summary>
      <param name="blockName">Freely selectable name for the block</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.MultiActionFinished">
      <summary>Unblanks the blockwise registration/deregistration actions blanked through 'MultiActionFinished'</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.MultiActionStart">
      <summary>Blanks all blockwise registration/deregistration actions started through 'ActivationBlockFinished'/'DeactivationBlockFinished' until 'MultiActionFinished' was called up</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.MultiItemActivator.StartMultiAction">
      <summary>Blanks all blockwise registration/deregistration actions started through 'ActivationBlockFinished'/'DeactivationBlockFinished' until 'MultiActionFinished' was called up</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.StateChangeEventArgs">
      <summary>Provides data for the 'Change' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.Cause">
      <summary>Cause of a value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.PreviousState">
      <summary>Value prior to the change, converted/changed for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.PreviousValue">
      <summary>Value of the process variable prior to the change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.Quality">
      <summary>Evaluating information from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.RecipeMode">
      <summary>Returns whether the linked variable is to be obtained through the recipe cache of the variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.Source">
      <summary>Returns a detailed reason for the value change</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.State">
      <summary>Value subsequent to the change, converted/changed for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.TimeStamp">
      <summary>Time stamp of the transmitted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateChangeEventArgs.Value">
      <summary>Current variable value</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateChangeEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>A character string containing the information on the event, e.g.: Value = 0 | State = 0 | TimeStamp = 08.11.2007 10:57:49 | Quality = Data = Good Limit = Ok | Source = Configuration | RecipeMode = False</returns>
    </member>
    <member name="T:VisiWinNET.DataAccess.StateItem">
      <summary>Object to access an area of a whole-numbered process variable from the process databank</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.#ctor">
      <summary>Creates a new instance of the StateItem class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.BitEvents">
      <summary>Determines whether the 'BitChange' event is to be used.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.BitNumber">
      <summary>Indication of the lowest-value bit in the process variable to be evaluated</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.EditableState">
      <summary>Cached copy of the 'State' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.EditableValue">
      <summary>Cached copy of the 'Value' property</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.Mode">
      <summary>Determines the way of interpreting the process variable</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.Offset">
      <summary>Process variable offset for '0' status</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.Range">
      <summary>Indicates the number of the states</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.State">
      <summary>Value, converted/changed for the application</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.Value">
      <summary>Value from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.StateItem.WatchedBitNo">
      <summary>Determines the bit(s) whose change(s) trigger(s) a 'BitChange' event.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.GetBitState(System.Int32,outSystem.Boolean)">
      <summary>Return of an individual bit status from the 'Value' property</summary>
      <returns>When 'bitState' is passed the return value will return 'True' if the specified bit could be read out, otherwise 'False'. If only the bit number is passed the return value directly returns the bit status.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be returned.The indication is "0" indicated.</param>
      <param name="bitState">A variable of the 'Boolean' type is expected as a passing parameter.Here the value of the queried bit can be read out after accessing the method.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.GetBitState(System.Int32)">
      <summary>Return of an individual bit status from the 'Value' property</summary>
      <returns>When 'bitState' is passed the return value will return 'True' if the specified bit could be read out, otherwise 'False'. If only the bit number is passed the return value directly returns the bit status.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be returned.The indication is "0" indicated.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.GetEditableBitState(System.Int32,outSystem.Boolean)">
      <summary>Return of an individual bit status from the Editable'Value' property</summary>
      <returns>When 'bitState' is passed the return value will return 'True' if the specified bit could be read out, otherwise 'False'. If only the bit number is passed the return value directly returns the bit status.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be returned.The indication is "0" indicated.</param>
      <param name="bitState">A variable of the 'Boolean' type is expected as a passing parameter.Here the value of the queried bit can be read out after accessing the method.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.GetEditableBitState(System.Int32)">
      <summary>Return of an individual bit status from the Editable'Value' property</summary>
      <returns>When 'bitState' is passed the return value will return 'True' if the specified bit could be read out, otherwise 'False'. If only the bit number is passed the return value directly returns the bit status.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be returned.The indication is "0" indicated.</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.SetBitState(System.Int32,System.Boolean)">
      <summary>Writing of an individual bit status in the 'Value' property</summary>
      <returns>'True' if the indicated bit could be written, otherwise 'False'.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be written.The indication is "0" indicated.</param>
      <param name="newState">Indication of the value that is to be written</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.SetEditableBitState(System.Int32,System.Boolean)">
      <summary>Writing of an individual bit status in the 'EditableValue' property</summary>
      <returns>'True' if the indicated bit could be written, otherwise 'False'.</returns>
      <param name="bitNumber">Indication of the number of the bit whose value is to be written.The indication is "0" indicated.</param>
      <param name="newState">Indication of the value that is to be written</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.StartEdit">
      <summary>Starts the editing of the internal copy of a process variable value.</summary>
      <returns>'True' if the copy of the variable value was released for editing, otherwise 'False'.</returns>
    </member>
    <member name="M:VisiWinNET.DataAccess.StateItem.StopEdit(System.Boolean)">
      <summary>Confirms or abolishes the input to the linked process variable</summary>
      <param name="transmitEditResult">Determines whether the content of the 'EditableValue' property is to be transmitted to the 'Value' property and thus to the variable core.True: the value is writtenFalse: the value is abolished. Prior inout is adjustedby re-accessing the 'StartEdit' method.</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.StateItem.BitChange">
      <summary>Is triggered when the bit determined via WatchedBitNo in the process variable changes.</summary>
      <param name="sender">Indication of a 'StateItem' type object that has triggered the event</param>
      <param name="e">Object og the 'StateItem.BitChangeEventArgs' type contrining further information as on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.StateItem.Change">
      <summary>Is triggered when the value of the process variable changes</summary>
      <param name="sender">Indication of the 'StateItem' type object that has triggered the event</param>
      <param name="e">Object of the 'StateChangeEventArgs' type containing further information as on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.StateItem.EditStateChange">
      <summary>Is triggered when the object changes the editing status</summary>
      <param name="sender">Indication of the 'StateItem' type object that has triggered the event</param>
      <param name="e">Object of the 'StateItem.EditStateChangeEventArgs' type containing further information as on the event</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.StateItem.VerifyEditValue">
      <summary>Event to verify the input value</summary>
      <param name="sender">Indication of the 'StateItem' object that has triggered the event</param>
      <param name="e">Object of the 'VerifyStateEditValueEventArgs' type containing further information as on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.UnitClass">
      <summary>Class for access to the unit conversion in a unit class currently used in the system</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.DecPoint">
      <summary>Decimal adjustment with whole-numbered values or specification of decimal place with floating point figures</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.Name">
      <summary>Name of the unit class</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.Offset">
      <summary>Value addend/offset</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.Slope">
      <summary>Value factor</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.UnitName">
      <summary>Value of the "Unit text" definition parameter</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.X1">
      <summary>X coordinate of the first straight line base point</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.X2">
      <summary>X coordinate of the second straight line point</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.Y1">
      <summary>Y coordinate of the first straight line point</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.UnitClass.Y2">
      <summary>Y coordinate of the first straight line point</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.UnitClass.CalculateValue(System.Object)">
      <summary>Conducts the conversion to be applied to the process variable with the value passed in 'normalizedValue'</summary>
      <returns>Converted value</returns>
      <param name="normalizedValue">Value to be converted</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.UnitClass.GetDisplayUnitClass(System.String)">
      <summary>Static method for generating a 'UnitClass' object that encapsules the functions of "Unit class (Display)".</summary>
      <returns>Object that encapsulates the requested unit class</returns>
      <param name="className">Name of the unit class from the process connection</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.UnitClass.GetProcessUnitClass(System.String)">
      <summary>Static method for generating a 'UnitClass' object that encapsules the functions of "Unit class (Process)".</summary>
      <returns>Object encapsulating the requested unit class</returns>
      <param name="className">Name of the unit class from the process connection</param>
    </member>
    <member name="M:VisiWinNET.DataAccess.UnitClass.ReverseCalculateValue(System.Object)">
      <summary>Conducts the inverse conversion to be applied to the process variable with the value passed in 'calcuatedValue'.</summary>
      <returns>Converted value</returns>
      <param name="calculatedValue">Value to be converted</param>
    </member>
    <member name="E:VisiWinNET.DataAccess.UnitClass.Change">
      <summary>Is triggered when the information of the unit conversion was changed</summary>
      <param name="sender">Specification of the object of the 'UnitClass' type that has triggered the event</param>
      <param name="e">Object of the 'EventArgs' type containing no further information on the event</param>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyAnalogEditValueEventArgs">
      <summary>Provides data for the 'VerifyEditValue' event.</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyAnalogEditValueEventArgs.Cancel">
      <summary>Aborts the writing process</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyAnalogEditValueEventArgs.EditedState">
      <summary>Passing of the converted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyAnalogEditValueEventArgs.EditedValue">
      <summary>Passing of the value</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyDigitalEditValueEventArgs">
      <summary>Provides data for the 'VerifyEditValue' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyDigitalEditValueEventArgs.Cancel">
      <summary>Aborts the writing process</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyDigitalEditValueEventArgs.EditedState">
      <summary>Passing of the converted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyDigitalEditValueEventArgs.EditedValue">
      <summary>Passing of the value</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyEditValueEventArgs">
      <summary>Provides data for the 'VerifyEditValue' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyEditValueEventArgs.Cancel">
      <summary>Aborts the writing process</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyEditValueEventArgs.EditedState">
      <summary>Passing of the converted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyEditValueEventArgs.EditedValue">
      <summary>Passing of the value</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyStateEditValueEventArgs">
      <summary>Provides data for the 'VerifyEditValue' event</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyStateEditValueEventArgs.Cancel">
      <summary>Aborts the writing process</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyStateEditValueEventArgs.EditedState">
      <summary>Passing of the converted value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.VerifyStateEditValueEventArgs.EditedValue">
      <summary>Passing of the value</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogChangeHandler">
      <summary>Delegate for the 'ChangeX, 'ChangeY' and 'Change' events</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.AnalogValueChangeEventHandler">
      <summary>Delegate for the 'ChangeX', 'ChangeY' and 'Change' events</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.BitChangeHandler">
      <summary>Delegate for the 'BitChange' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.ChangeHandler">
      <summary>Delegate for the 'Change' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.DigitalChangeHandler">
      <summary>Delegate for the 'Change' and 'ChangeMonitor' events</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.EditStateChangeHandler">
      <summary>Delegate for the 'EditStateChange' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.StateChangeHandler">
      <summary>Delegate for the 'Change' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.UnitClassChangeHandler">
      <summary>Delegate for the &lt;undetected event&gt; event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyAnalogEditValueHandler">
      <summary>Delegate for the 'VerifyEditValue' event
</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyDigitalEditValueHandler">
      <summary>Delegate for the 'VerifyEditValue' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyEditValueHandler">
      <summary>Delegate for the 'VerifyEditValue' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.VerifyStateEditValueHandler">
      <summary>Delegate for the 'VerifyEditValue' event</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.BlockStates">
      <summary>Contains the possible states of a 'BlockInfo' object.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.BlockStates.Active">
      <summary>'ActivationBlockStart' und 'ActivationBlockFinished' were called up consecutively. The variable registration processes requested between the two methods were processed as a list.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.BlockStates.PendingActivation">
      <summary>'ActivationBlockStart' was called up. Registration of the variable list must yet be started through 'ActivationBlockFinished'.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.BlockStates.PendingDeactivation">
      <summary>'DeactivationBlockStart' was called up. Deregistration of the variable list must yet be started through 'ActivationBlockFinished'.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.ChangedBy">
      <summary>Enumeration for the source of a variable change</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.Config">
      <summary>A property of the object was changed, switching the value (e.g. 'Name' property of the 'ItemBase' base class.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.Process">
      <summary>The value of the variable has changed in the communication component (i.e. in the PLC).</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.Recipe">
      <summary>The variable value was changed by writing from the recipe server.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.StopEdit">
      <summary>The variable value has changed by accessing the 'StopEdit' method</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.UnitConversion">
      <summary>The variable value has changed by a switch (process or language related) being made in the unit conversion.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangedBy.ValueProperty">
      <summary>The variable value has changed by writing to the 'Value' property (i.e. from the application by user input or program code).</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.ChangeSources">
      <summary>Encompasses the possible sources for the change of a process variable</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Alarm">
      <summary>Through the alarm system a bit of a process variable determined as an event variable was reset. The reason here was the acknowledgement of the alarm</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Application">
      <summary>An access from the application changes the process variable value. The access was triggered from another item instance or through 'VWSet'.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Configuration">
      <summary>The linked process variable was changed (change in 'Name'/'BitNumber', changeover of a multiplexer).</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.ExternalOPCClient">
      <summary>An application that has logged on with the variable server as an OPC client has changed the process variable value.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Process">
      <summary>The PLC has changed the value.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Quality">
      <summary>The quality flag of the process variable has changed.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.Recipe">
      <summary>The process variable value was changed through the transfer functions of a recipe.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.StopEdit">
      <summary>The value was changed through an input (access of StopEdit of an item object).</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.System">
      <summary>The value was changed through a system function (e.g. a trigger variable reset by the archive system).</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.UnitConversion">
      <summary>The value was changed by a unit changeover.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.ValueProperty">
      <summary>The value was changed by the 'Value' property being written to in this instance.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ChangeSources.View">
      <summary>The display of the item object was changed over between recipe cache and variable kernel.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.DataQualities">
      <summary>Enumeration for the OPC transmit status of a value</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.Bad">
      <summary>Category "Bad"
The process value cannot be used. An unknown error has occurred.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.CommFailure">
      <summary>Category "Bad"
The process value cannot be used. Communication could not be established. There is no previous value.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.ConfigError">
      <summary>Category "Bad"
The process value cannot be used. A problem with the configuration of the OPC server has occurred. It is for example possible that the process variable was deleted from the configuration of the OPC server.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.DeviceFailure">
      <summary>Category "Bad"
The process value cannot be used. A device error has occurred.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.EguExceeded">
      <summary>Category "Uncertain"
The process value has left the set limits. Further information can be read in the Limit' property.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.Good">
      <summary>Category "Good"
The process value can be used.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.LastKnown">
      <summary>Category "Uncertain"
A communication error has occurred. The process value could not be reread. There is, however, a former value that is passed here. The time that value was read can be read in the time stamp.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.LastUsable">
      <summary>Category "Bad"
The process value is to be regarded as outdated, and no longer acceptable.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.LocalOverride">
      <summary>Category "Good"
The process value was overwritten manually.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.NotConnected">
      <summary>Category "Bad"
The value could not be read because the control is not supporting it, caused e.g. by accessing an optional entry that is not existent in the current configuration. </summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.OutofService">
      <summary>Category "Bad"
Access to the process value or the group was deactivated or barred.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.SensorCal">
      <summary>Category "Uncertain"
Either the value regarded as sensor value no longer lies within the region defined (through the limits) as 'normal' or another logic within the OPC server has diagnosed that the value is to be regarded as 'uncalibrated'.
Specified information about the evaluation of a value my means of the defined limits is indicated in the 'Limit' property.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.SensorFailure">
      <summary>Category "Bad"
An error has been diagnosed during the admission process of the value regarded as sensor value by the OPC server.
Specified information about the evaluation of a value my means of the defined limits is indicated in the 'Limit' property.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.SubNormal">
      <summary>Category "Uncertain"
The value is reveiced from several sources, an inadequate quantity of which posess the "Good" quality.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataQualities.Uncertain">
      <summary>Category "Uncertain"
The value was categorized as "unsafe" without specified information. </summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.DataTypes">
      <summary>Enumeration for the data type of a process variable.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_BOOL">
      <summary>Truth value: True/False</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_BSTR">
      <summary>Character string
</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_DATE">
      <summary>Date/time format</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_EMPTY">
      <summary>The data type is not specified. This data type is for example returned when no proces variable was specified.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_I1">
      <summary>Whole-numbered signed 1-byte value (-128..127)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_I2">
      <summary>Whole-numbered signed 2-byte value (-32768..32767)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_I4">
      <summary>Whole-numbered signed 4-byte value (-2147483648..2147483647)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_INT">
      <summary>Whole-numbered signed value, device type depending</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_R4">
      <summary>Floating point figure, short precision (4 byte)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_R8">
      <summary>Floating point figure, double precision (8 byte)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_UI1">
      <summary>Whole-numbered unsigned 1-byte value (0..255)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_UI2">
      <summary>Whole-numbered unsigned 2-byte value (0..65535)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_UI4">
      <summary>Whole-numbered unsigned 4-byte value (0..4294967295)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.DataTypes.VT_UINT">
      <summary>Whole-numbered unsigned value, device type depending</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.EditStates">
      <summary>Enumeration for the editing status of the linked process variable</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.EditStates.Changed">
      <summary>The 'Value' property and with it the addressed process variable value was already changed in this object before.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.EditStates.Editing">
      <summary>The object has been set to the editing mode by the 'StartEdit' method but the vallue was not yet written.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.EditStates.Unchanged">
      <summary>The 'Value' property and with it the addressed proces variable value has not yet been changed in this object.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.ItemMode">
      <summary>Enumeration for the possible process variable interpretations</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ItemMode.Bits">
      <summary>Identification of the status from up to 32 sequences bits, favouring the bit with the highest set value. The start bit is determined by the 'BitNumber' property, the number of bits or states by the 'Range' property.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ItemMode.Masked">
      <summary>Evaluation of the status of bits of consecutive values. The masked bit group is regarded as an integral value.
The start bit is determined with the 'BitNumber' property, the maximum for State is determined with the 'Range' property. Range also indirectly determines the size of the bit group to be masked.
Example:
Variable value: 47 (hex: 0x2F binary:0010 1111)
BitNumber = 2
Range = 10
The status is evaluated by:
- Evaluation of the bit mask size through the value of 'Range': from the above mentioned value results the masking of bit group from Bit2 with four bits as a value.
In the above mentioned case the masked bits have the value "1011" ) 11 decimal.
If appropriate capping of the evaluated status through 'Range': if the masked value exceeds the value of Range the value of Range is returned as status.
Therefore, in the above mentioned constellation the masked value 11 is first evaluated for State. In the final step, however, State is limited to 10 as the masked value is higher than 'Range'.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.ItemMode.Value">
      <summary>Identification of the status from the entire variable value. The number of states is determined by the Range property (number of states = Range+1). The Offset property is being subtracted from the variable value.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.LimitQualities">
      <summary>Enumeration containing the limit-evaluating values of a process variable status (Quality)</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.LimitQualities.Const">
      <summary>The value is a constant, and cannot be altered.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.LimitQualities.High">
      <summary>The value has exceeded the upper limit.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.LimitQualities.Low">
      <summary>The value has exceeded the upper limit.</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.LimitQualities.Ok">
      <summary>The value has no limits or lies between the set limits.</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.MainQualities">
      <summary>Enumeration with elements for a general evaluation of transmitted process values</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.MainQualities.Bad">
      <summary>A serious problem has occurred. Either any communication has ceased or the evaluation has diagnosed a hardware problem
</summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.MainQualities.Good">
      <summary>The value has been judged as current. It could be written/read without error. </summary>
    </member>
    <member name="F:VisiWinNET.DataAccess.MainQualities.Uncertain">
      <summary>A problem has occurred. Example: the value could no longer be read when last accessed. There is, however, a prior value still at disposal. In this case the client must decide whether that value shall be used in the current process.
</summary>
    </member>
    <member name="T:VisiWinNET.DataAccess.OPCQuality">
      <summary>Structure for access to the status information of a process value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.OPCQuality.Data">
      <summary>Status information as to the transmitted process value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.OPCQuality.Limit">
      <summary>Additional information as to the transmitted variable value relating to defined value area limitations</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.OPCQuality.Main">
      <summary>Specifies a general evaluation on the transmitted process variable value</summary>
    </member>
    <member name="P:VisiWinNET.DataAccess.OPCQuality.Value">
      <summary>The 'Value' property returns a numerical value from which 'Data' and 'Limit' are deduced.</summary>
    </member>
    <member name="M:VisiWinNET.DataAccess.OPCQuality.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Character string describing the OPCQuality property, for example: "Data = Good Limit = Ok"</returns>
    </member>
    <member name="T:VisiWinNET.Internals.Alarm.AlarmItemBase">
      <summary>Base class for currently active or server-recorded alarms</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.AcknowledgeTime">
      <summary>Acknowledgement time</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.ActivationCounter">
      <summary>Counter for the reactivated status</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.ActivationTime">
      <summary>Time the alarm has been activated</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Class">
      <summary>Information on the linked alarm class</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.DeactivationTime">
      <summary>Time of deactivation</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Group">
      <summary>Information on the alarm group in which the alarm was projected</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.LocalizableParam1">
      <summary>Returns the projected value of the alphanumeric "Parameter1" parameter.</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.LocalizableText">
      <summary>Returns the internally used unequivocal identification of the localizable text</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Machine">
      <summary>Returns the computer name with which the alarm was acknowledged.</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Name">
      <summary>Returns the name of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Param1">
      <summary>Returns the value of the alphanumeric 'Parameter1' parameter</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Param2">
      <summary>Value of the numeric 'Parameter2' parameter</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Priority">
      <summary>Priority of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.State">
      <summary>Alarm status</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.StateInfo">
      <summary>Display of the alarm</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.Text">
      <summary>Returns the text of the alarm in the currently set language.</summary>
    </member>
    <member name="P:VisiWinNET.Internals.Alarm.AlarmItemBase.User">
      <summary>Returns the user name with which the alarm was acknowledged.</summary>
    </member>
    <member name="M:VisiWinNET.Internals.Alarm.AlarmItemBase.Equals(System.Object)">
      <summary>Determines whether two objects are equal</summary>
      <returns>True if both objects are equal</returns>
      <param name="obj">Passing of the object with which the equality is to be checked.</param>
    </member>
    <member name="M:VisiWinNET.Internals.Alarm.AlarmItemBase.GetHashCode">
      <summary>Returns the hashcode of this object</summary>
      <returns>Computed hashcode</returns>
    </member>
    <member name="M:VisiWinNET.Internals.Alarm.AlarmItemBase.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Internals.DataAccess.ItemBase">
      <summary>Base class for access to data from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.DataType">
      <summary>Spedification of the data type</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.EditState">
      <summary>Indicates the editing status of the object</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.IsAttached">
      <summary>Establishes whether the object is currently administering a valid process variable registration</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.ItemMaxValue">
      <summary>Value of the "Maximum" parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.ItemMinValue">
      <summary>Value of the "Minimum" parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.LocalizableName">
      <summary>Returns the internally used unequivocal identification of the localizable text.</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.Name">
      <summary>Name of the process variable from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.Quality">
      <summary>Evaluating information from the variable core</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.RecipeEdit">
      <summary>Returns whether the process variable value is exchanged with the variable core or the recipe server </summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.RecipeMember">
      <summary>Determines whether the object participates in the recipe administration</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.Text">
      <summary>Value of the 'Text" parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Internals.DataAccess.ItemBase.TimeStamp">
      <summary>Time stamp of the last transmitted value</summary>
    </member>
    <member name="M:VisiWinNET.Internals.DataAccess.ItemBase.Attach">
      <summary>Registers the object with the process variable core.</summary>
      <returns>True: the connection with the indicated process variable value could be established. False: an error has occurred.</returns>
    </member>
    <member name="M:VisiWinNET.Internals.DataAccess.ItemBase.Detach">
      <summary>Deregisters the object with the process variable core.</summary>
    </member>
    <member name="M:VisiWinNET.Internals.DataAccess.ItemBase.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Internals.DataAccess.ItemBase.GetItemProperty(System.String,outSystem.Object)">
      <summary>Returns a property of the linked process variable</summary>
      <returns>"True" if the access was successful, otherwise "False".</returns>
      <param name="PropertyName">Name of parameter whose value is to be returned</param>
      <param name="PropertyValue">A non-initialized variable of the 'Object' type is expected as a passing parameter.After the successful method access the value of the queried parameter is found here.</param>
    </member>
    <member name="M:VisiWinNET.Internals.DataAccess.ItemBase.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Returns the value of the 'Name' property, i.e. the name of the linked process variable.</returns>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.DateTimeFormat">
      <summary>Formats date/time specifications with a (localizable) formatting command</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeFormat.DefaultDateFormat">
      <summary>Default value for the date format ("MM/dd/yyyy")</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeFormat.DefaultTimeFormat">
      <summary>Default value for the time format ("hh/mm/ss tt")</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.DateTimeFormat.#ctor">
      <summary>Creates a new instance of the DateTimeFormat class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.DateTimeFormat.FormatDate">
      <summary>Determines the formatting for the date.</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.DateTimeFormat.FormatTime">
      <summary>Determines the formatting for the time</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.DateTimeFormat.LocalizedDateTimeFormat">
      <summary>Returns the resulting formatting character string</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.DateTimeFormat.Mode">
      <summary>Determines whether date and/or time are returned</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.DateTimeFormat.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.DateTimeFormat.FormatDateTime(System.DateTime)">
      <summary>Carries out the formatting of a date/time specification</summary>
      <returns>The formatted character string</returns>
      <param name="dt">'DateTime' type object that is to be formatted</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.DateTimeFormat.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Returns, depending on the setting of the 'Mode' property, a combination of the 'FormatDate' and 'FormatTime' property values.</returns>
    </member>
    <member name="E:VisiWinNET.LanguageSwitching.DateTimeFormat.PropertyChanged">
      <summary>Is triggered when a property of the object was changed</summary>
      <param name="sender">Indication of the 'DateTimeFormat' type object that has triggered the event</param>
      <param name="e">'EventArgs' type object containing no further information on the event</param>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LanguageChangeEventArgs">
      <summary>Provides data for the "LanguageChange" event</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LanguageChangeEventArgs.NewLCID">
      <summary>Unequivocal identification of the language subsequent to the localization</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LanguageManager">
      <summary>Class encapsulating the access to the definitions and data of the localization</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LanguageManager.CurrentLanguage">
      <summary>Shows information on the language currently set in the application.</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LanguageManager.CurrentLCID">
      <summary>Determines the language to be displayed in the application via the "Locale Identifier"</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LanguageManager.ProjectLanguages">
      <summary>Returns the languages present in the project as a collection</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.Localization">
      <summary>Reading access to the information of the localization</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.#ctor">
      <summary>Creates a new instance of the Localization class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.Localization.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.GetFont(System.String)">
      <summary>Returns the font information of the passed font class for the current language</summary>
      <returns>'System.Drawing.Font' type object encapsulating the font information</returns>
      <param name="fontClass">Name of the font class in which the queried font information is contained.</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.GetText(VisiWinNET.LanguageSwitching.TextTypes,System.String)">
      <summary>Queries an index text</summary>
      <returns>The return contains the queried text in the language currently set in the application.</returns>
      <param name="textType">The value passed here determines where the text is searched for.In a client-server application a text can be client as well as server-projected....System and ...Application distinguish between the "Components"/"Dialogs" and "User texts" branches of the localization.</param>
      <param name="name">Name of the index text. The full designator over all index text groups (similar to a path indication) up to the name of the index text is expected as a name. The individual names are separated from each other by a point.</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.GetText(System.String)">
      <summary>Queries an index text</summary>
      <returns>The return contains the queried text in the language currently set in the application.</returns>
      <param name="name">Name of the index text. The full designator over all index text groups (similar to a path indication) up to the name of the index text is expected as a name. The individual names are separated from each other by a point.</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.GetText(System.String,System.Object[])">
      <summary>Queries an index text</summary>
      <returns>The return contains the queried text in the language currently set in the application.</returns>
      <param name="name">Name of the index text. The full designator over all index text groups (similar to a path indication) up to the name of the index text is expected as a name. The individual names are separated from each other by a point.</param>
      <param name="textParams">Field of values that are shown in the formatting commands (@...@)</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.Localization.GetText(VisiWinNET.LanguageSwitching.TextTypes,System.String,System.Object[])">
      <summary>Queries an index text</summary>
      <returns>The return contains the queried text in the language currently set in the application.</returns>
      <param name="textType">The value passed here determines where the text is searched for.In a client-server application a text can be client as well as server-projected....System and ...Application distinguish between the "Components"/"Dialogs" and "User texts" branches of the localization.</param>
      <param name="name">Name of the index text. The full designator over all index text groups (similar to a path indication) up to the name of the index text is expected as a name. The individual names are separated from each other by a point.</param>
      <param name="textParams">Field of values that are shown in the formatting commands (@...@)</param>
    </member>
    <member name="E:VisiWinNET.LanguageSwitching.Localization.LanguageChange">
      <summary>Signals a change of the language to be displayed</summary>
      <param name="sender">Indication of the 'Localization' type object that has triggered the event</param>
      <param name="e">'Localization.LanguageChangeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LocalizedFont">
      <summary>Access to the font information of a font class</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedFont.#ctor">
      <summary>Creates a new instance of the LocalizedFont class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedFont.FontClass">
      <summary>Name of the font class from the project databank</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedFont.GetFont">
      <summary>Queries the font information</summary>
      <returns>Object containing the queried font information</returns>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedFont.GetFont(System.String)">
      <summary>Queries the font information</summary>
      <returns>Object containing the queried font information</returns>
      <param name="fontClass">Name of the font class with static method access</param>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LocalizedStateText">
      <summary>Class for access to localized texts from the project databank with additional selection by a passed status</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedStateText.#ctor">
      <summary>Creates a new instance of the LocalizedStateText class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.DisplayText">
      <summary>Return of the text</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.Text">
      <summary>Indication of the text name for the status "0"</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.TextGroup">
      <summary>Indication of the text group</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.TextOn">
      <summary>Indication of the text name for the status "&lt;&gt;0"</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.TextPrefix">
      <summary>Filter for a text area within a group</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.TextType">
      <summary>Determines where the text is searched for.
</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedStateText.UseTextOn">
      <summary>Determines how the texts are switched</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedStateText.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedStateText.LoadStateText(System.Long)">
      <summary>Identification of the text in dependence of the passed status</summary>
      <param name="state">Status used to identify the text that is to be returned</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedStateText.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>A text information about the text used</returns>
    </member>
    <member name="E:VisiWinNET.LanguageSwitching.LocalizedStateText.StateTextChange">
      <summary>Reports a change in the 'DisplayText' property</summary>
      <param name="sender">Indication of the 'LocalizedStateText' type object that has triggered the event</param>
      <param name="e">'StateTextChangeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LocalizedText">
      <summary>Class for access to a localized text from the project databank</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedText.#ctor">
      <summary>Creates a new instance of the LocalizedText class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedText.DisplayText">
      <summary>Returns the acquired text in the language currently set in the application</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedText.Text">
      <summary>Indication of the text name</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedText.TextGroup">
      <summary>Indication of the text group</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.LocalizedText.TextType">
      <summary>Determines where the text is searched for.
</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedText.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.LocalizedText.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>A text information about the text used</returns>
    </member>
    <member name="E:VisiWinNET.LanguageSwitching.LocalizedText.TextChange">
      <summary>Reports a change in the 'DisplayText' property</summary>
      <param name="sender">Indication of the 'LocalizedText' type object that has triggered the event</param>
      <param name="e">'LocalizedText.TextChangeEventArgs' type object containing no further information on the event</param>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.ProjectLanguage">
      <summary>Class to change languages and to read out language-dependent system information</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.ProjectLanguage.#ctor(System.Int32,System.String)">
      <summary>Creates a new instance of the ProjectLanguage class</summary>
      <param name="LCID">Indication of the 'LCID' property value</param>
      <param name="name">Indication of the 'Name' property value</param>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.ProjectLanguage.Culture">
      <summary>System-dependent information of the currently set application language</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.ProjectLanguage.LCID">
      <summary>Unequivocal identifier of language</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.ProjectLanguage.Name">
      <summary>Shows the system-dependent designator of a language identifier</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.ProjectLanguages">
      <summary>Class containing the languages defined in the project as a collection.</summary>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.ProjectLanguages.#ctor">
      <summary>Initializes a new instance of the 'ProjectLanguages' class</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.ProjectLanguages.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.ProjectLanguages.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="M:VisiWinNET.LanguageSwitching.ProjectLanguages.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>A System.Collections.IEnumerator type object containing all 'ProjectLanguage' objects</returns>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.StateTextChangeEventArgs">
      <summary>Provides data for the 'TextChange' event.</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.StateTextChangeEventArgs.Cause">
      <summary>Indicates the cause of the text change </summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.TextChangeEventArgs">
      <summary>Provides information in the 'TextChange' event.</summary>
    </member>
    <member name="P:VisiWinNET.LanguageSwitching.TextChangeEventArgs.Cause">
      <summary>Indicates the cause of the text change</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.LanguageChangeHandler">
      <summary>Delegate for the 'LanguageChange' event</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.StateTextChangeHandler">
      <summary>Delegate for the 'TextChange' event</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.TextChangeHandler">
      <summary>Delegate for the 'TextChange' event</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.DateTimeMode">
      <summary>Enumeration of the different date/time format display modes</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.DateCRTime">
      <summary>The date is indicated followed by the time. Date and time are displayed separated by a word wrap.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.DateOnly">
      <summary>Only the date is indicated.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.DateTime">
      <summary>The date is indicated followed by the time.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.TimeCRDate">
      <summary>The time is indicated followed by the date. Time and date are displayed separated by a word wrap.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.TimeDate">
      <summary>The time is indicated followed by the date.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.DateTimeMode.TimeOnly">
      <summary>Only the time is indicated.</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.StateTextChangedBy">
      <summary>Lists the possible causes of a text change in the 'LocalizedStateText' class.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.StateTextChangedBy.Language">
      <summary>The language was changed in the application.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.StateTextChangedBy.Param">
      <summary>The value of a dynamic parameter that was incorporated in the text has changed.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.StateTextChangedBy.Property">
      <summary>A different text was selected via the properties of the 'LocalizedStateText' class.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.StateTextChangedBy.State">
      <summary>Via the 'LoadStateText' method of the 'LocalizedStateText' object the variable value dependent text selection was re-effected.</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.TextChangedBy">
      <summary>Lists the possible causes of a text change in the 'LocalizedText' class.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextChangedBy.Language">
      <summary>The language was changed in the application.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextChangedBy.Param">
      <summary>The value of a dynamic parameter that was incorporated in the text has changed.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextChangedBy.Property">
      <summary>A different text was selected via the properties of the 'LocalizedText' class.</summary>
    </member>
    <member name="T:VisiWinNET.LanguageSwitching.TextTypes">
      <summary>Enumeration containing the different text categories for querying index texts as elements</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextTypes.ClientApplication">
      <summary>The query refers to the texts in the "User texts" branch of the client project.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextTypes.ClientSystem">
      <summary>The query refers to the texts in the "Components" and "Dialogs" branches of the client project.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextTypes.ServerApplication">
      <summary>The query refers to the texts in the "User texts" branch of the server project.</summary>
    </member>
    <member name="F:VisiWinNET.LanguageSwitching.TextTypes.ServerSystem">
      <summary>The query refers to the texts in the "Components" and "Dialogs" branches of the server project.</summary>
    </member>
    <member name="T:VisiWinNET.Logging.AsyncRequestSuccessArgs">
      <summary>Provides data for the 'AsyncLoggingRequestFinished' event</summary>
    </member>
    <member name="P:VisiWinNET.Logging.AsyncRequestSuccessArgs.Success">
      <summary>Indicates whether the query of recorded logging event data was successful.</summary>
    </member>
    <member name="T:VisiWinNET.Logging.EnumerableLoggingEntries">
      <summary>Contains all logging events recorded by the server as a collection.</summary>
    </member>
    <member name="P:VisiWinNET.Logging.EnumerableLoggingEntries.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Logging.EnumerableLoggingEntries.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="M:VisiWinNET.Logging.EnumerableLoggingEntries.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>A System.Collections.IEnumerator type object containing all 'HistoricalLoggingEntry' objects</returns>
    </member>
    <member name="T:VisiWinNET.Logging.EnumerableLoggingFiles">
      <summary>Collection of recorded logging file information</summary>
    </member>
    <member name="P:VisiWinNET.Logging.EnumerableLoggingFiles.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Logging.EnumerableLoggingFiles.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="P:VisiWinNET.Logging.EnumerableLoggingFiles.Item(System.String)">
      <summary>Access to an element in the list with help of the file name</summary>
      <param name="FileName">File name of the element that is to be returned. The file name is to be entered without path and ending.</param>
    </member>
    <member name="M:VisiWinNET.Logging.EnumerableLoggingFiles.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'HistoricalLoggingFile' objects</returns>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLogging">
      <summary>Access to the files and the logging events recorded therein</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.#ctor">
      <summary>Creates a new instance of the HistoricalLogging class</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLogging.Entries">
      <summary>Returns the queried logging event information as a collection following a query</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLogging.Files">
      <summary>Returns information on the files created by the logging server as a collection</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLogging.Filter">
      <summary>Determines the filter for querying logging events</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLogging.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.GetHistoricalData(System.String[])">
      <summary>Method to read out logging entries</summary>
      <returns>True: the query was successfully started/conducted.</returns>
      <param name="requiredCategories">Variable field of the 'String' data type. A category name can be entered into every field element. This makes it possible to filter the query for multiple categories. If the field remains uninitialized all logging entries are returned.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.GetHistoricalData(System.String)">
      <summary>Method to read out logging entries</summary>
      <returns>True: the query was successfully started/conducted.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.GetHistoricalData(System.String[],System.String[])">
      <summary>Method to read out logging entries</summary>
      <returns>True: the query was successfully started/conducted.</returns>
      <param name="requiredCategories">Variable field of the 'String' data type. A category name can be entered into every field element. This makes it possible to filter the query for multiple categories. If the field remains uninitialized all logging entries are returned.</param>
      <param name="requiredEvents">Field of the 'String' data type. In every field element a protocol event name is expected. Only the protocol events that are specified here are read.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.GetHistoricalData(System.String,System.String[])">
      <summary>Method to read out logging entries</summary>
      <returns>True: the query was successfully started/conducted.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
      <param name="requiredEvents">Field of the 'String' data type. In every field element a protocol event name is expected. Only the protocol events that are specified here are read.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLogging.GetHistoricalData(System.String,System.String)">
      <summary>Method to read out logging entries</summary>
      <returns>True: the query was successfully started/conducted.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
      <param name="requiredEvent">Name of a protocol event. Only the entries on the event specified here are returned.</param>
    </member>
    <member name="E:VisiWinNET.Logging.HistoricalLogging.AsyncLoggingRequestFinished">
      <summary>Event reporting the end of the asynchronous querying of logging events</summary>
      <param name="sender">Indication of the 'HistoricalLogging' type object that has triggered the event</param>
      <param name="e">'AsyncRequestSuccessArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLoggingEntry">
      <summary>Class encapsulating the properties of a recorded logging entry</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingEntry.#ctor">
      <summary>Creates a new instance of the 'HistoricalLoggingEntry' class</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.CategoryName">
      <summary>Name of the logging category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.CategoryText">
      <summary>Returns the localizable designator of the category in the current project language</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.EventName">
      <summary>Name of the logging event</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.EventText">
      <summary>Returns the localizable designator of the logging event in the current project language</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.FileName">
      <summary>Name of the logging file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.HasNotes">
      <summary>Returns whether notes have been stored on the log entry</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.LocalizableCategoryText">
      <summary>Returns the internal identifier of the localizable category designator from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.LocalizableEventText">
      <summary>Returns the internal identifier of the localizable logging event designator from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.LocalizableParam1">
      <summary>Returns the passed value of the 'Param1' argument</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.LocalizableText">
      <summary>Returns the passed value of the Text argument</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.Notes">
      <summary>Collection of notes on the logging entry</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.Param1">
      <summary>Freely selectable text parameter recorded with the logging entry</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.Param2">
      <summary>Freely selectable numeric parameter recorded with the logging entry</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.Text">
      <summary>Logging text</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.TimeStamp">
      <summary>Time stamp recorded to the entry</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingEntry.User">
      <summary>User name recorded to the entry</summary>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLoggingFile">
      <summary>Class for access to a logging file</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.#ctor">
      <summary>Creates a new instance of the 'HistoricalLoggingFile' class</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.#ctor(System.String)">
      <summary>Creates a new instance of the 'HistoricalLoggingFile' class</summary>
      <param name="fileName">Name of the logging entry whose properties are to be returned via the interfaces of the object</param>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.Entries">
      <summary>Returns after a query the recorded logging events of the file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.FileName">
      <summary>Returns the name of the file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.Filter">
      <summary>Determines the filter for querying logging events</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.MaxFileTime">
      <summary>Returns the time stamp of the last logging entry recorded in the file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.MinFileTime">
      <summary>Returns the time stamp of the first logging entry recorded in the file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFile.Notes">
      <summary>Collection of all notes recorded in the file</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.GetHistoricalData(System.String[])">
      <summary>Reads the logging entries filtered to multiple category names</summary>
      <returns>True: The query was started successfully.</returns>
      <param name="requiredCategories">Variable field of the 'String' data type. A category name can be entered into every field element. This makes it possible to filter the query for multiple categories. If the field remains unitialized all logging entries are returned.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.GetHistoricalData(System.String)">
      <summary>Reads the logging entries of the specified category</summary>
      <returns>True: The query was started successfully.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.GetHistoricalData(System.String[],System.String[])">
      <summary>Reads the logging entries filtered to multiple category and event names</summary>
      <returns>True: The query was started successfully.</returns>
      <param name="requiredCategories">Variable field of the 'String' data type. A category name can be entered into every field element. This makes it possible to filter the query for multiple categories. If the field remains unitialized all logging entries are returned.</param>
      <param name="requiredEvents">Field of the 'String' data type. In every field element a protocol event name is expected. Only the protocol events that are specified here are read.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.GetHistoricalData(System.String,System.String[])">
      <summary>Reads the logging entries filtered to one category name and multiple event names</summary>
      <returns>True: The query was started successfully.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
      <param name="requiredEvents">Field of the 'String' data type. In every field element a protocol event name is expected. Only the protocol events that are specified here are read.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFile.GetHistoricalData(System.String,System.String)">
      <summary>Reads the logging entries for an event in one category</summary>
      <returns>True: The query was started successfully.</returns>
      <param name="requiredCategory">Name of a category. This method option can be used if only one category is to be queried.</param>
      <param name="requiredEvent">Name of a protocol event. Only the entries on the event specified here are returned.</param>
    </member>
    <member name="E:VisiWinNET.Logging.HistoricalLoggingFile.AsyncLoggingRequestFinished">
      <summary>Event reporting the end of the asynchronous query of logging events</summary>
      <param name="sender">Indication of the 'HistoricalLoggingFile' type object that has triggered the event</param>
      <param name="e">'AsyncRequestSuccessArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLoggingFilter">
      <summary>Class describing the filter settings for querying recorded logging events.</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFilter.MaxTime">
      <summary>Determines the end point of the temporal filter</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFilter.MinTime">
      <summary>Determines the start point of the temporal filter</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingFilter.User">
      <summary>Determines the name of the user by which the filtering is to be conducted</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingFilter.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Describes the object</returns>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLoggingNote">
      <summary>Represents a note from a file written on a logging event</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNote.#ctor(System.String,System.String,System.DateTime)">
      <summary>Initializes a new instance of the 'HistoricalLoggingNote' class</summary>
      <param name="fileName">Value for the 'FileName' property</param>
      <param name="noteText">Value for the 'Text' property</param>
      <param name="timeStamp">Value for the 'TimeStamp' property</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNote.#ctor(System.String)">
      <summary>Initializes a new instance of the 'HistoricalLoggingNote' class</summary>
      <param name="noteText">Value for the 'Text' property</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNote.#ctor(System.String,System.DateTime)">
      <summary>Initializes a new instance of the 'HistoricalLoggingNote' class</summary>
      <param name="noteText">Value for the 'Text' property</param>
      <param name="timeStamp">Value for the 'TimeStamp' property</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNote.#ctor(System.String,System.DateTime,System.String)">
      <summary>Initializes a new instance of the 'HistoricalLoggingNote' class</summary>
      <param name="noteText">Value for the 'Text' property</param>
      <param name="timeStamp">Value for the 'TimeStamp' property</param>
      <param name="loggingID">Value used as 'LoggingID' property</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNote.#ctor(System.String,System.String,System.DateTime,System.String)">
      <summary>Initializes a new instance of the 'HistoricalLoggingNote' class</summary>
      <param name="fileName">Value for the 'FileName' property</param>
      <param name="noteText">Value for the 'Text' property</param>
      <param name="timeStamp">Value for the 'TimeStamp' property</param>
      <param name="loggingID">Value used as 'LoggingID' property</param>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.FileName">
      <summary>Name of the file in which the note was recorded</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.ID">
      <summary>Indicates the unequivocal identifier of the note within the logging file</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.LoggingID">
      <summary>Identifier unequivocal within the logging file of the entry on which the note was written</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.Text">
      <summary>Text of the note</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.TimeStamp">
      <summary>Time stamp of the note</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNote.User">
      <summary>Name of the user who has written the note</summary>
    </member>
    <member name="T:VisiWinNET.Logging.HistoricalLoggingNotes">
      <summary>Collection of notes from logging files</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNotes.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNotes.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNotes.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="P:VisiWinNET.Logging.HistoricalLoggingNotes.Item(System.String)">
      <summary>Access to an element in the list with help of the 'noteID'</summary>
      <param name="noteID">Unequivocal identifier of the note that is to be returned</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Add(VisiWinNET.Logging.HistoricalLoggingNote)">
      <summary>Adds a new note to the collection</summary>
      <returns>Unequivocal identifier within the file</returns>
      <param name="note">Object encapsulating the information of the new note</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Change(System.String,System.String)">
      <summary>Changes the content of a note</summary>
      <returns>True: the method was successfully conducted.</returns>
      <param name="noteID">Unequivocal identifier of the note that is to be changed</param>
      <param name="newText">New text to be recorded in the note</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Change(VisiWinNET.Logging.HistoricalLoggingNote)">
      <summary>Changes the content of a note</summary>
      <returns>True: the method was successfully conducted.</returns>
      <param name="note">Object whose changed property values are recorded as a note. The note to be changed is searched for in the file by means of the 'ID' property of the passed object.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'HistoricalLoggingNote' objects of the collection</returns>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Remove(VisiWinNET.Logging.HistoricalLoggingNote)">
      <summary>Deletes the indicated note</summary>
      <returns>True: the method was successfully conducted.</returns>
      <param name="note">Object to be deleted from the file. The note to be deleted from the file is searched for by the 'ID' property of the passed object.</param>
    </member>
    <member name="M:VisiWinNET.Logging.HistoricalLoggingNotes.Remove(System.String)">
      <summary>Deletes the indicated note</summary>
      <returns>True: the method was successfully conducted.</returns>
      <param name="noteID">Direct specification of the internal identifier of the note to be deleted</param>
    </member>
    <member name="T:VisiWinNET.Logging.LoggingCategories">
      <summary>Collection administrating the logging categories of the project</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategories.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategories.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategories.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="categoryName">Specification of the element via the projected name of the category</param>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingCategories.Add(System.String,System.String)">
      <summary>Adds a new user-specific category</summary>
      <returns>True: the method call was successful</returns>
      <param name="name">Name for the new category</param>
      <param name="localizableText">Designator of a localizable text from the localization</param>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingCategories.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'LoggingCategory' objects</returns>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingCategories.Refresh">
      <summary>Re-reads the contents of the collection from the project databank</summary>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingCategories.SetLogState(System.String,System.Boolean)">
      <summary>Switches the recording of logging events of the indicated category on or off</summary>
      <param name="name">Name of category whose recording status is to be changed</param>
      <param name="enable">True: logging events of this category are recorded (if their recording status is activated).False: logging events of this category are not recorded.</param>
    </member>
    <member name="T:VisiWinNET.Logging.LoggingCategory">
      <summary>Class representing a logging category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategory.Enabled">
      <summary>Returns the recording status of the category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategory.Events">
      <summary>Collection of 'LoggingEvent' objects projected in this category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategory.LocalizableText">
      <summary>Determines the internal identifier of the localizable runtime name</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategory.Name">
      <summary>Name of the category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingCategory.Text">
      <summary>Localizable indentifier of the category</summary>
    </member>
    <member name="T:VisiWinNET.Logging.LoggingEvent">
      <summary>Class representing a logging event</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvent.Enabled">
      <summary>Returns the recording status of the logging event</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvent.LocalizableText">
      <summary>Determines the internal identifier of the localizable runtime name</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvent.Name">
      <summary>Name of the logging event</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvent.Text">
      <summary>Localizable indentifier of the event</summary>
    </member>
    <member name="T:VisiWinNET.Logging.LoggingEvents">
      <summary>Collection administrating the logging events of a category</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvents.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvents.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Index of element to be returned</param>
    </member>
    <member name="P:VisiWinNET.Logging.LoggingEvents.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="eventName">Specification of element via the projected name of the logging event</param>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingEvents.Add(System.String,System.String)">
      <summary>Inserts a new user-specific logging event</summary>
      <returns>True: the method call was successful</returns>
      <param name="name">Name for the new logging event</param>
      <param name="localizableText">Designator of a localizable text from the localization</param>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingEvents.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>A System.Collections.IEnumerator type object containing all 'LoggingEvent' objects</returns>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingEvents.Refresh">
      <summary>Re-reads the contents of the collection from the project databank</summary>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingEvents.SetLogState(System.String[],System.Boolean)">
      <summary>Switches the recording of multiple logging events on or off.</summary>
      <param name="names">Field of logging event names whose recording states are to be changed</param>
      <param name="enable">True: The logging event / logging events is / are recorded (if the recording status of the category is also activated).False: The logging event / logging events is / are not recorded.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LoggingEvents.SetLogState(System.String,System.Boolean)">
      <summary>Switches the recording of one logging event on or off.</summary>
      <param name="name">Name of event whose recording state is to be changed</param>
      <param name="enable">True: The logging event / logging events is / are recorded (if the recording status of the category is also activated).False: The logging event / logging events is / are not recorded.</param>
    </member>
    <member name="T:VisiWinNET.Logging.LogManager">
      <summary>Allows access to the definitions and contents of the logging</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LogManager.Categories">
      <summary>Access to the categories and events of the logging system</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LogManager.CurrentFile">
      <summary>Returns the name of the file currently written to by the logging system</summary>
    </member>
    <member name="P:VisiWinNET.Logging.LogManager.FilePath">
      <summary>Determines the path currently used by the system under which the logging files are recorded</summary>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String,System.Int32)">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String,System.Object[])">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="textParams">Field of parameters that are inserted into the text passed in 'logText'</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String)">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String,System.String)">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.Object[])">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
      <param name="textParams">Field of parameters that are inserted into the text passed in 'logText'</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.Log(System.String,System.String,System.DateTime,System.String,System.String,System.Int32)">
      <summary>Static method for recording a self-defined logging event</summary>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.MultiLog(System.String[],System.String[],System.DateTime[],System.String[],System.String[],System.Int32[],System.Object[])">
      <summary>Static method to record multiple self-defined logging events</summary>
      <param name="categoryNames">Field of category names</param>
      <param name="eventNames">Field of event names</param>
      <param name="timeStamps">Field of time stamps that are to be stored with the recordings</param>
      <param name="logTexts">Field of texts that are to be stored with the appropriate events.Texts support the formatting character strings known from the localization. Into these formatting character strings the values passed in 'textParams' are inserted.</param>
      <param name="params1">Field of free-to-choose text parameters that are to be stored with the events</param>
      <param name="params2">Field of free-to-choose numeric parameters that are to be stored with the events</param>
      <param name="textParams">Field of parameters to be inserted into the texts passed in 'logTexts"</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32,System.Object[])">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
      <param name="textParams">Field of parameters that are inserted into the text passed in 'logText'</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String,System.String)">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Int32)">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param1">Freely choosable text parameter that can be stored with the event.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Int32)">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="param2">Freely choosable numerical parameter that can be stored with the event.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String,System.Object[])">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
      <param name="textParams">Field of parameters that are inserted into the text passed in 'logText'</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteLog(System.String,System.String,System.String,System.String,System.DateTime,System.String)">
      <summary>Static method to record a self-defined logging event with passing of computer and user name</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryName">Name of the category containing the event to be triggered</param>
      <param name="eventName">Name of event to be triggered</param>
      <param name="timeStamp">Time stamp to be stored with the recording.</param>
      <param name="logText">Text to be stored with the event. The text can contain the formatting character strings known from the localization. The values passed in 'textParams' are inserted into these formatting character strings.</param>
    </member>
    <member name="M:VisiWinNET.Logging.LogManager.RemoteMultiLog(System.String,System.String,System.String[],System.String[],System.DateTime[],System.String[],System.String[],System.Int32[],System.Object[])">
      <summary>Static method to record multiple self-defined logging events with passing of computer and user names</summary>
      <param name="remoteMachine">Text to be stored as computer name</param>
      <param name="remoteUser">Text to be stored as user name</param>
      <param name="categoryNames">Field of category names</param>
      <param name="eventNames">Field of event names</param>
      <param name="timeStamps">Field of time stamps that are to be stored with the recordings</param>
      <param name="logTexts">Field of texts that are to be stored with the appropriate events.Texts support the formatting character strings known from the localization. Into these formatting character strings the values passed in 'textParams' are inserted.</param>
      <param name="params1">Field of free-to-choose text parameters that are to be stored with the events</param>
      <param name="params2">Field of free-to-choose numeric parameters that are to be stored with the events</param>
      <param name="textParams">Field of parameters to be inserted into the texts passed in 'logTexts"</param>
    </member>
    <member name="T:VisiWinNET.Logging.AsyncLoggingRequestFinishedHandler">
      <summary>Delegate for the 'AsyncLoggingRequestFinished' event</summary>
    </member>
    <member name="T:VisiWinNET.Project.ProjectInfo">
      <summary>Class for accessing global properties of the project</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Comment">
      <summary>Returns the comment from the project properties</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Configuration">
      <summary>Returns settings from the project configuration.</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.CreatedWithVersion">
      <summary>Returns the version number from VisiWinNET under which the project was created</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Developer">
      <summary>Returns the developer name from the project properties</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.IsInDesignMode">
      <summary>Returns whether the project is in design mode.</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.IsInRunMode">
      <summary>Returns whether the project is in runtime mode.</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Name">
      <summary>Returns the name of the project</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Path">
      <summary>Returns the path of the project</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectInfo.Version">
      <summary>Returns the version information from the project properties</summary>
    </member>
    <member name="T:VisiWinNET.Project.ProjectManager">
      <summary>Class for starting and ending an application</summary>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.#ctor">
      <summary>Creates a new instance of the 'ProjectManager' class</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectManager.DisableWindowsKeys">
      <summary>Determines whether the key combinations determined by the operating system are to be operational</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectManager.StartDelay">
      <summary>Allows a delay in the startup performance</summary>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.RunProject(System.String)">
      <summary>Starts the server components of the visualization</summary>
      <returns>True: The server components were started. False: The server components could not be started. Either the project was not found or another critical error has occurred. Further information about critical errors are listed in the event display.</returns>
      <param name="projectName">Name of the project. The name is specified at project development.</param>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.RunProject(System.String,System.Collections.Generic.IDictionary(OfTKeyTValue)&lt;System.String,System.Object&gt;)">
      <summary>Starts the server components of the visualization</summary>
      <returns>True: The server components were started. False: The server components could not be started. Either the project was not found or another critical error has occurred. Further information about critical errors are listed in the event display.</returns>
      <param name="projectName">Name of the project. The name is specified at project development.</param>
      <param name="projectParams">&lt;p class="HDC_Header"&gt;&lt;span class="expandcollapse" tabindex="0"&gt;&lt;img id="descriptionToggle" class="toggle" name="toggleSwitch" src="collapse.jpg"&gt;&lt;/img&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;div id="descriptionSection" class="section" name="collapseableSection"&gt;$Content$ &lt;/div&gt; false</param>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.RunProjectSync(System.String,System.Collections.Generic.IDictionary(OfTKeyTValue)&lt;System.String,System.Object&gt;)">
      <summary>Starts the server components of the application, and waits until the initialization phase of the server components is over.</summary>
      <returns>'True': The server components were initialized, otherwise 'False'.</returns>
      <param name="projectName">Name of the project. The name is specified at project development.</param>
      <param name="projectParams">&lt;p class="HDC_Header"&gt;&lt;span class="expandcollapse" tabindex="0"&gt;&lt;img id="descriptionToggle" class="toggle" name="toggleSwitch" src="collapse.jpg"&gt;&lt;/img&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;div id="descriptionSection" class="section" name="collapseableSection"&gt;$Content$ &lt;/div&gt; false</param>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.RunProjectSync(System.String)">
      <summary>Starts the server components of the application, and waits until the initialization phase of the server components is over.</summary>
      <returns>'True': The server components were initialized, otherwise 'False'.</returns>
      <param name="projectName">Name of the project. The name is specified at project development.</param>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.ShutdownProject">
      <summary>Terminates the server components</summary>
    </member>
    <member name="M:VisiWinNET.Project.ProjectManager.ShutdownProjectAndWindows(System.Boolean,System.Boolean)">
      <summary>Terminates the operating system</summary>
      <param name="reboot">True: the computer is re-started subsequent to the shutdown.False: the computer is not re-started subsequent to the shutdown.</param>
      <param name="forceShutdown">True: the computer is shut down even if further running applications cannot be properly terminated.False: other programs can prevent the computer shotdown.</param>
    </member>
    <member name="E:VisiWinNET.Project.ProjectManager.InitReady">
      <summary>Reports the end of the initializing phase of the server components</summary>
      <param name="sender">Indication of the 'ProjectManager' type object that has triggered the event</param>
      <param name="e">'ProjectManager.ProjectManagerEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Project.ProjectManager.PreProjectShutdown">
      <summary>Reports the begin of the terminating phase of the server components</summary>
      <param name="sender">Indication of the 'ProjectManager' type object that has triggered the event</param>
      <param name="e">'EventArgs' type object containing no further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Project.ProjectManager.ProjectShutdownFinished">
      <summary>Reports the end of the terminating phase of the server components</summary>
      <param name="sender">Indication of the 'ProjectManager' type object that has triggered the event</param>
      <param name="e">'EventArgs' type object containing no further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Project.ProjectManagerEventArgs">
      <summary>Provides data for the 'InitReady' event</summary>
    </member>
    <member name="P:VisiWinNET.Project.ProjectManagerEventArgs.Success">
      <summary>Indicates whether the initialising phase of the server components was conducted successfully</summary>
    </member>
    <member name="T:VisiWinNET.Project.InitReadyHandler">
      <summary>Delegate for the 'InitReady' event</summary>
    </member>
    <member name="T:VisiWinNET.Project.PreShutdownHandler">
      <summary>Delegate for the 'PreProjectShutdown' event</summary>
    </member>
    <member name="T:VisiWinNET.Project.ProjectShutdownFinishedHandler">
      <summary>Delegate for the 'ProjectShutdownFinished' event</summary>
    </member>
    <member name="T:VisiWinNET.Project.ConfigurationFlags">
      <summary>Enumeration containing bit-coded settings from the project configuration.</summary>
    </member>
    <member name="F:VisiWinNET.Project.ConfigurationFlags.ExtendedLimitEvents">
      <summary>Template for the value of the setting "'Limit' event in the 'VarIn' control element enhanced".
This setting is determined at design time in the project properties on the "Compatibility" index card.</summary>
    </member>
    <member name="F:VisiWinNET.Project.ConfigurationFlags.ExtendedUnitConversion">
      <summary>Template for the value of the setting "'DecPoint' property in the VisiWinNET Item can be written to".
This setting is determined at design time in the project properties on the "Compatibility" index card.</summary>
    </member>
    <member name="F:VisiWinNET.Project.ConfigurationFlags.OptimizedItemActivation">
      <summary>Template for the value of the "Optimized activation of variables with form changes" setting
This setting is at design time determined in the project properties on the "Compatibility" index card.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.GetRecipeEventArgs">
      <summary>Provides data for the 'GetDone' event</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.GetRecipeEventArgs.Result">
      <summary>Returns whether the 'Get' method access was successful</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.LoadRecipeEventArgs">
      <summary>Provides data for the 'LoadDone' event</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.LoadRecipeEventArgs.ErrorParams">
      <summary>Returns a field of 'RecipeErrorParam' objects describing the recipe values that caused an error with reading from the file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.LoadRecipeEventArgs.FileName">
      <summary>Returns the name of the recipe file from which the recipe values are to be loaded into the recipe cache</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.LoadRecipeEventArgs.FilePath">
      <summary>Returns the path for the recipe files currently used by the recipe definition</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.LoadRecipeEventArgs.Result">
      <summary>Returns whether the 'Load' method access was successful</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeChanges">
      <summary>Class encapsulating recipe value changes as a collection</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChanges.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChanges.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Indication of element to be read via the enumerator index</param>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChanges.MaxTime">
      <summary>Determines the end time that can be used to filter the data</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChanges.MinTime">
      <summary>Determines the start time that can be used to filter the data</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChanges.User">
      <summary>Determines a user name that is used for data filtering</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeChanges.ClearChanges">
      <summary>Deletes the recipe value changes from the collection</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeChanges.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>A System.Collections.Ienumerator type object containing all 'RecipeChange' objects</returns>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeClass">
      <summary>Class for access to a recipe</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.#ctor(System.String)">
      <summary>Creates a new instance of the 'RecipeClass' class</summary>
      <param name="name">Name of recipe to be used by the object</param>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.Changes">
      <summary>Returns the information of the change history for the file currently loaded in the recipe cache</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.CurrentPath">
      <summary>Returns or determines the current path of the recipe files</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.Files">
      <summary>Returns an object for access to the recipe files</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.IsEditing">
      <summary>Indicates whether the recipe editing mode is active</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.LockState">
      <summary>Returns whether the recipe object is blocked.</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.MaxFiles">
      <summary>Returns the maximum number of recipe files</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.Name">
      <summary>Name of recipe definition</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClass.Notes">
      <summary>Returns the notes on the file loaded in the recipe cache</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Get">
      <summary>Loads the recipe values from the process into the recipe buffer</summary>
      <returns>True: the method was successfully started/conducted. False: an error has occurred.</returns>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Get(System.Boolean)">
      <summary>Loads the recipe values from the process into the recipe buffer</summary>
      <returns>True: the method was successfully started/conducted. False: an error has occurred.</returns>
      <param name="itemsFromCache">'True': The values are read from the variable kernel.'False': The values are read from the communication component.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.GetItems(outSystem.String[])">
      <summary>Returns the variable designators of all recipe elements</summary>
      <returns>Number of the returned variable names</returns>
      <param name="recipeItems">A non-initialized variable field of the 'String' type is expected as a passing value. After the access the variable names that were indicated in the recipe definition as recipe elements are found here.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.GetValue(System.String,outSystem.Object)">
      <summary>Reading of a value from the recipe cache</summary>
      <returns>True: the value could be read. False: an error has occurred,</returns>
      <param name="VWItem">Designator of the process variable</param>
      <param name="recipeValue">A non-initialized variable of the 'Object' type is expected as a passing value. After the method access the value of the recipe element from the recipe cache is returned here. </param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.GetValues(System.String[],outSystem.Object[])">
      <summary>Reading of multiple values from the recipe cache</summary>
      <returns>True: the 'recipeValues' parameter contains recipe values.</returns>
      <param name="VWItems">Field of recipe element designators</param>
      <param name="recipeValues">A non-initialized field of the 'Object' type is expected as a passing value. After the method access the values of the recipe elements from the recipe cache can be read out here. </param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.GetValues(System.String[],outSystem.Object[],outSystem.Boolean[])">
      <summary>Reading of multiple values from the recipe cache</summary>
      <returns>True: the 'recipeValues' parameter contains recipe values.</returns>
      <param name="VWItems">Field of recipe element designators</param>
      <param name="recipeValues">A non-initialized field of the 'Object' type is expected as a passing value. After the method access the values of the recipe elements from the recipe cache can be read out here. </param>
      <param name="results">A non-initialized field of the 'Boolean' type is expected as a passing value. After the method access the information as to whether the method call was successful can be read here for each individual element.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.IsExistingRecipeFile(System.String,System.String)">
      <summary>Returns whether the specified recipe file is existent.</summary>
      <returns>True: The file is existent. False: The specified file is not existent.</returns>
      <param name="fileName">Name of recipe file</param>
      <param name="strFile">&lt;p class="HDC_Header"&gt;&lt;span class="expandcollapse" tabindex="0"&gt;&lt;img id="descriptionToggle" class="toggle" name="toggleSwitch" src="collapse.jpg"&gt;&lt;/img&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;div id="descriptionSection" class="section" name="collapseableSection"&gt;$Content$ &lt;/div&gt; false</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.IsMember(System.String)">
      <summary>Returns whether the indicated process variable designator is used as an element in the recipe</summary>
      <returns>'True': The indicated process variable is contained in the recipe as a recipe element, otherwise 'False'</returns>
      <param name="itemToTest">Process variable designator to be verified</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Load(System.String,System.Boolean)">
      <summary>Loads the recipe values from a file into the recipe cache</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
      <param name="fileName">Name of recipe file</param>
      <param name="normalized">Recipe values can be interpreted absolutely of relatively. With the absolute interpretation the values are directly exchanged with the VWOPC kernel. The relative interpretation allows via the standard factor and the nominal factor variable the conversion in relation to a "standard quantum". If only absolute recipe values are used in the application the parameter must always be set to False.True: The recipe values are loaded from the recipe into the recipe cache as relative values. There is no automatic conversion by the standard factor and the nominal factor variable. The relative recipe values should only be loaded for recipe editing, and must not be transferred into the process.False: The recipe values are loaded from the recipe into the recipe cache as absolute values. There is automatic conversion by the standard factor and the nominal factor variable. The absolute recipe values must not be loaded for recipe editing. They should only be loaded for transfer into the process.If 'normalized' is not used, the values will be transmitted absolute.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Load(System.String)">
      <summary>Loads the recipe values from a file into the recipe cache</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
      <param name="fileName">Name of recipe file</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Load(System.String,System.Boolean,VisiWinNET.Recipe.RecipeFileValidationMode)">
      <summary>Loads the recipe values from a file into the recipe cache</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
      <param name="fileName">Name of recipe file</param>
      <param name="normalized">Recipe values can be interpreted absolutely of relatively. With the absolute interpretation the values are directly exchanged with the VWOPC kernel. The relative interpretation allows via the standard factor and the nominal factor variable the conversion in relation to a "standard quantum". If only absolute recipe values are used in the application the parameter must always be set to False.True: The recipe values are loaded from the recipe into the recipe cache as relative values. There is no automatic conversion by the standard factor and the nominal factor variable. The relative recipe values should only be loaded for recipe editing, and must not be transferred into the process.False: The recipe values are loaded from the recipe into the recipe cache as absolute values. There is automatic conversion by the standard factor and the nominal factor variable. The absolute recipe values must not be loaded for recipe editing. They should only be loaded for transfer into the process.If 'normalized' is not used, the values will be transmitted absolute.</param>
      <param name="validationMode">&lt;p class="HDC_Header"&gt;&lt;span class="expandcollapse" tabindex="0"&gt;&lt;img id="descriptionToggle" class="toggle" name="toggleSwitch" src="collapse.jpg"&gt;&lt;/img&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;div id="descriptionSection" class="section" name="collapseableSection"&gt;$Content$ &lt;/div&gt; false</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.LockRecipe(System.Int32)">
      <summary>Blocks a recipe</summary>
      <returns>True: the method was successfully conducted. False: an error has occurred.</returns>
      <param name="timeOut">Time delay in milliseconds when another client has blocked this recipe class for own use. If the other client releases the recipe class within this delay period it is exclusively blocked for the accessing client. Otherwise the access remains unsuccessful. If the delay time lapses without the other client releasing the recipe class the function returns unsuccessfully.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Save(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Saves the recipe values as a file</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
      <param name="fileName">Name of recipe file. Indication must be without file ending and path.</param>
      <param name="description">Description of recipe file</param>
      <param name="forceOverwrite">True: If the recipe file indicated in the 'fileName' parameter already exists the values in this file are overwritten.False: If the recipe file indicated in the 'fileName' parameter already exists the values in this file are not overwritten. The old values of the file remain. The current values from the recipe cache are not saved.</param>
      <param name="normalized">Recipe values can be interpreted absolutely of relatively. With the absolute interpretation the values are directly exchanged with the VWOPC kernel. The relative interpretation allows via the standard factor and the nominal factor variable the conversion in relation to a "standard quantum". If only absolute recipe values are used in the application the parameter must always be set to False.True: The current recipe values of the recipe cache are interpreted as relative values. There is no automatic conversion by the standard factor and the nominal factor variable when the values are saved.False: The current recipe values of the recipe cache are interpreted as absolute values. There is automatic conversion by the standard factor and the nominal factor variable when the values are saved. If 'normalized' is not used, the values will be transmitted absolute.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Save(System.String,System.String,System.Boolean)">
      <summary>Saves the recipe values as a file</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
      <param name="fileName">Name of recipe file. Indication must be without file ending and path.</param>
      <param name="description">Description of recipe file</param>
      <param name="forceOverwrite">True: If the recipe file indicated in the 'fileName' parameter already exists the values in this file are overwritten.False: If the recipe file indicated in the 'fileName' parameter already exists the values in this file are not overwritten. The old values of the file remain. The current values from the recipe cache are not saved.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Send(System.String)">
      <summary>Loads the recipe data from a file directly into the process variables.</summary>
      <returns>'True': Access was successful, otherwise 'False'</returns>
      <param name="fileName">Name of recipe file tob e loaded</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Send(System.String,System.Boolean)">
      <summary>Loads the recipe data from a file directly into the process variables.</summary>
      <returns>'True': Access was successful, otherwise 'False'</returns>
      <param name="fileName">Name of recipe file tob e loaded</param>
      <param name="normalized">Recipe values can be interpreted absolutely or relatively. With the absolute interpretation the values are directly exchanged with the VWOPC kernel. The relative interpretation allows the conversion through the standard factor and the target factor variable in relation to a "standard volume". If in the application only absolute recipe values are used the parameter must always be set to False.True: The recipe values are loaded from the recipe into the process as relative values. No automatic conversion with the standard factor and the target factor variable takes place.False: The recipe values are loaded from the recipe into the process as absolute values. An automatic conversion with the standard factor and the target factor variable takes place.If 'normalized' is not used in the function access absolute values are transmitted.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.Set">
      <summary>Writes the current values of the recipe cache into the process</summary>
      <returns>True: the method was successfully started. False: an error has occurred.</returns>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.SetValue(System.String,System.Object)">
      <summary>Writes a value into the recipe cache</summary>
      <returns>True: the method was successfully conducted. False: an error has occurred.</returns>
      <param name="VWItem">Designator of the recipe element whose new value is to be written</param>
      <param name="recipeValue">New value to be written</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.SetValues(System.String[],System.Object[],outSystem.Boolean[])">
      <summary>Writes multiple values in the recipe cache</summary>
      <returns>True: the method was conducted sussessfully. False: an error has occurred.</returns>
      <param name="VWItems">Field of recipe element designators</param>
      <param name="recipeValues">Field of the 'Object' data type containing the recipe element values to be written</param>
      <param name="results">A non-initialized field of the 'Boolean' type is expected as a passing value. After the method access the information as to whether the method call was successful for each individual element can be read here.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.SetValues(System.String[],System.Object[])">
      <summary>Writes multiple values in the recipe cache</summary>
      <returns>True: the method was conducted sussessfully. False: an error has occurred.</returns>
      <param name="VWItems">Field of recipe element designators</param>
      <param name="recipeValues">Field of the 'Object' data type containing the recipe element values to be written</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.StartEdit">
      <summary>Starts the recipe mode</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.StopEdit">
      <summary>Stops the recipe mode</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClass.UnlockRecipe(System.Boolean)">
      <summary>Re-releases a blocked recipe</summary>
      <returns>True: the recipe block could be cancelled, otherwise False.</returns>
      <param name="force">Optional parameter. If 'True' is indicated as a value the recipe is released for editing, notwithstanding the 'LockRecipe' reference counter.</param>
    </member>
    <member name="E:VisiWinNET.Recipe.RecipeClass.GetDone">
      <summary>Signals the end of the 'Get' operation</summary>
      <param name="sender">Indication of the 'RecipeClass' type object that has triggered the event</param>
      <param name="e">'GetRecipeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Recipe.RecipeClass.LoadDone">
      <summary>Signals the end of the 'Load' operation</summary>
      <param name="sender">Indication of the 'RecipeClass' type object that has triggered the event</param>
      <param name="e">'LoadRecipeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Recipe.RecipeClass.SaveDone">
      <summary>Signals the end of the 'Save' operation</summary>
      <param name="sender">Indication of the 'RecipeClass' type object that has triggered the event</param>
      <param name="e">'SaveRecipeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Recipe.RecipeClass.SendDone">
      <summary>Signals the end of the 'Send' operation</summary>
      <param name="sender">Specification of object of the 'RecipeClass' type having triggered the event</param>
      <param name="e">'SendRecipeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Recipe.RecipeClass.SetDone">
      <summary>Signals the end of the 'Set' operation</summary>
      <param name="sender">Indication of the 'RecipeClass' type object that has triggered the event</param>
      <param name="e">'SetRecipeEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeClasses">
      <summary>Class encapsulating as a collection all recipe definitions of the project</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClasses.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClasses.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="name">Indication of the recipe definition name for access to the element</param>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeClasses.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of the list index for access to the element </param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeClasses.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'RecipeClass' objects</returns>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeErrorParam">
      <summary>Describes a value that caused an error when reading from a recipe file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeErrorParam.Error">
      <summary>Returns the cause of the error</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeErrorParam.Member">
      <summary>Returns the variable designator</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeFile">
      <summary>Encapsulates the information of a recipe file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFile.Changes">
      <summary>Returns the information of the change history for the file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFile.Description">
      <summary>Returns the description to the file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFile.FileName">
      <summary>Returns the name of the file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFile.Notes">
      <summary>Returns the notes written to a file</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.GetTimeOfLastChange">
      <summary>Returns the date of the latest file change</summary>
      <returns>Indication of date and time of the last file change</returns>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.GetValue(System.String,outSystem.Object,System.Boolean)">
      <summary>Reads a value from the recipe file</summary>
      <returns>'True' if the specified process variable value was found in the recipe file, otherwise 'False'</returns>
      <param name="VWItem">Designator of the process variables to be read</param>
      <param name="recipeValue">Variable of the 'Object' tape in which after the function access the read value can be retrieved</param>
      <param name="normalized">True: The returned value is converted through "Standard factor" and "Nominal factor variable".False: The value is returned without conversion.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.GetValues(System.String[],outSystem.Object[],System.Boolean)">
      <summary>Reads several process variables from the recipe file</summary>
      <returns>'True' if all specified recipe values could be read, otherwise 'False'</returns>
      <param name="VWItems">Field of process variable designators</param>
      <param name="recipeValues">Variable field of the 'Object()' type in which after the function access the read values can be retrieved</param>
      <param name="normalized">True: The returned values are converted through "Standard factor" and "Nominal factor variable".False: The values are returned without conversion.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.GetValues(System.String[],outSystem.Object[],outSystem.Boolean[],System.Boolean)">
      <summary>Reads several process variables from the recipe file</summary>
      <returns>'True' if all specified recipe values could be read, otherwise 'False'</returns>
      <param name="VWItems">Field of process variable designators</param>
      <param name="recipeValues">Variable field of the 'Object()' type in which after the function access the read values can be retrieved</param>
      <param name="results">Variable field of the 'Boolean()' type in which after the function access every recipe value can be checked for successful reading</param>
      <param name="normalized">True: The returned values are converted through "Standard factor" and "Nominal factor variable".False: The values are returned without conversion.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.Validate">
      <summary>
      </summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFile.WhoSavedRecipe">
      <summary>Returns the name of the user who has filed the latest change</summary>
      <returns>Name of user</returns>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeFiles">
      <summary>Object for access to the files of a recipe</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFiles.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFiles.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeFiles.Item(System.String)">
      <summary>Access to an element in the list with help of the file name</summary>
      <param name="fileName">Indication of file name for access to the collection element. The file name must be specified without ending and path.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Copy(System.String,System.String,System.Boolean)">
      <summary>Copies the specified recipe file with instructions on whether an already existing file may be overwritten</summary>
      <returns>'True': The file was copied, otherwise 'False'</returns>
      <param name="sourceFile">Specification of the name of the file to be copied (without path and ending) </param>
      <param name="destinationFile">Specification of the name of the copy (without path and ending)</param>
      <param name="overwrite">True: If the target file already exists it is overwritten.False: An already existing target file is not overwritten.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Copy(System.String,System.String)">
      <summary>Copies the specified recipe file. If a file with the new name already exists it is not overwritten.</summary>
      <returns>'True': The file was copied, otherwise 'False'</returns>
      <param name="sourceFile">Specification of name of the file to be copies (without path and ending) </param>
      <param name="destinationFile">Specification of the name of the copy (without path and ending)</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Copy(System.String,System.String,System.Boolean,System.String)">
      <summary>Copies the specified recipe file and writes a new description into the copy</summary>
      <returns>'True': The file was copied, otherwise 'False'</returns>
      <param name="sourceFile">Specification of the name of the file to be copied (without path and ending) </param>
      <param name="destinationFile">Specification of the name of the copy (without path and ending)</param>
      <param name="overwrite">True: If the target file already exists it is overwritten.False: An already existing target file is not overwritten.</param>
      <param name="newDescription">Description text that can be read as 'Description' in the file to be newly created</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Copy(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Copies the specified recipe file into another directory</summary>
      <returns>'True': The file was copied, otherwise 'False'</returns>
      <param name="sourcePath">Directory in which the file to be copied is stored</param>
      <param name="sourceFile">Name of the file to be copied (without path and ending)</param>
      <param name="destinationPath">Directory in which the copy is to be stored</param>
      <param name="destinationFile">Name of the copy (without path and ending)</param>
      <param name="overwrite">True: If the target file already exists it is overwritten.False: An already existing target file is not overwritten.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Copy(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
      <summary>Copies the specified recipe file into another directory, in the process writing a new description into the copy</summary>
      <returns>'True': The file was copied, otherwise 'False'</returns>
      <param name="sourcePath">Directory in which the file to be copied is stored</param>
      <param name="sourceFile">Name of file to be copied (without path and ending)</param>
      <param name="destinationPath">Directory in which the copy is to be stored</param>
      <param name="destinationFile">Name of copy (without path and ending)</param>
      <param name="overwrite">True: If the target file aleady exists it is overwritten.False: An already existing target file is not overwritten.</param>
      <param name="newDescription">Description text that can be read as 'Description' in the file to be newly created</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Delete(System.String)">
      <summary>Deletes the specified recipe file</summary>
      <returns>True: Deletion was successfully conducted. False: Deletion has failed.</returns>
      <param name="fileName">Name of the recipe file. The specification is without path.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Exists(System.String)">
      <summary>Checks whether the specified recipe file is existent in the recipe path</summary>
      <returns>True: The specified file exists False: The specified file does not exist.</returns>
      <param name="fileName">Name of the recipe file</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'RecipeFile' objects</returns>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Rename(System.String,System.String)">
      <summary>Renames the recipe file specified in 'oldName' </summary>
      <returns>'True': The file was renamed, otherwise 'False'</returns>
      <param name="oldName">Name of file to be renamed (without path and ending)</param>
      <param name="newName">New name for the file</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Rename(System.String,System.String,System.Boolean,System.String)">
      <summary>Renames the recipe file specified in 'oldName', in the process specifying a new description for the file</summary>
      <returns>'True': The file was renamed, otherwise 'False'</returns>
      <param name="oldName">Name of file to be renamed (without path and ending)</param>
      <param name="newName">New name for the file</param>
      <param name="overwrite">True: An already existing file with the new name is overwritten.False: If a file with the name already exists this is not overwritten. The Rename function returns 'False'.</param>
      <param name="newDescription">Text that is adopted into the renamed file as description</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeFiles.Rename(System.String,System.String,System.Boolean)">
      <summary>Renames the recipe file specified in 'oldName', in the process determining whether an already ecisting file with 'newName' is to be overwritten.</summary>
      <returns>'True': The file was renamed, otherwise 'False'</returns>
      <param name="oldName">Name of file to be renamed (without path and ending)</param>
      <param name="newName">New name for the file</param>
      <param name="overwrite">True: An already existing file with the new name is overwritten.False: If a file with the name already exists this is not overwritten. The Rename function returns 'False'.</param>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeManager">
      <summary>Class for access to all recipe definitions of the project</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeManager.#ctor">
      <summary>Initializes a new instance of the 'RecipeManager' class</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeManager.Classes">
      <summary>Collection containing the recipe definitions of the project</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeManager.UnlockAll">
      <summary>Nullifies all blocks of the 'RecipeClass' objects</summary>
      <returns>'True': The blocking was ended, otherwise 'False'</returns>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeNotes">
      <summary>Collection containing the recipe notes in the recipe cache or in a recipe file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNotes.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNotes.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Collection index of element to be returned</param>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNotes.MaxTime">
      <summary>Determines the end point that can be used for filtering the data</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNotes.MinTime">
      <summary>Determines the start point that can be used for filtering the data</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNotes.User">
      <summary>Determines a user name to be used for filtering the data</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.AddNote(VisiWinNET.Recipe.RecipeNote)">
      <summary>Adds a new note to the file/ to the recipe cache</summary>
      <returns>Internal unequivocal identifier of the new note from the recipe file</returns>
      <param name="newNote">Indication of note to be added as an object</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.AddNote(System.DateTime,System.String)">
      <summary>Adds a new note to the file/ to the recipe cache</summary>
      <returns>Internal unequivocal identifier of the new note from the recipe file</returns>
      <param name="timeStamp">Time stamp to be saved with the note</param>
      <param name="note">Note text</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.ClearNotes">
      <summary>Deletes the notes contained in the collection</summary>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'RecipeNote' objects</returns>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.RemoveNote(VisiWinNET.Recipe.RecipeNote)">
      <summary>Deletes a note from the recipe cache / from the file</summary>
      <param name="note">Spedification of note on an appropriate object to be deleted. Internally the note is searched for via the ID property of the passed object, and subsequently deleted.</param>
    </member>
    <member name="M:VisiWinNET.Recipe.RecipeNotes.RemoveNote(System.String)">
      <summary>Deletes a note from the recipe cache / from the file</summary>
      <param name="noteID">Specification of note to be deleted via the internal unequivocal identifier</param>
    </member>
    <member name="T:VisiWinNET.Recipe.SaveRecipeEventArgs">
      <summary>Provides data for the 'SaveDone' event</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SaveRecipeEventArgs.FileName">
      <summary>Returns the name of the recipe file in which the values from the recipe cache are to be saved</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SaveRecipeEventArgs.FilePath">
      <summary>Returns the path for the recipe files currently used by the recipe definition</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SaveRecipeEventArgs.Result">
      <summary>Returns whether the 'Save' method call was successful</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SendRecipeEventArgs">
      <summary>Provides data for the 'SendDone' event</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SendRecipeEventArgs.ErrorParams">
      <summary>Returns a field of 'RecipeErrorParam' objects describing the recipe values that caused an error with reading from the file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SendRecipeEventArgs.FileName">
      <summary>Returns the name of the recipe file from which the recipe values are to be loaded into the process</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SendRecipeEventArgs.FilePath">
      <summary>Returns the path for the recipe files currently used by the recipe definition</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SendRecipeEventArgs.Result">
      <summary>Returns whether the 'Load' method access was successful</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SetRecipeEventArgs">
      <summary>Provides data for the 'SetDone' event</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.SetRecipeEventArgs.Result">
      <summary>Returns whether the 'Set' method call was successful</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.GetRecipeEventHandler">
      <summary>Delegate for the 'GetDone' event</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.LoadRecipeEventHandler">
      <summary>Delegate for the 'LoadDone' event</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SaveRecipeEventHandler">
      <summary>Delegate for the 'SaveDone' event</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SendRecipeEventHandler">
      <summary>Delegate for the 'SendDone' event</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SetRecipeEventHandler">
      <summary>Delegate for the 'SetDone' event</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.GetRecipeResults">
      <summary>Enumeration containing the possible results of the 'Get' method</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.GetRecipeResults.OPCError">
      <summary>A data communication error has occurred. The recipe values could not be read.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.GetRecipeResults.Succeeded">
      <summary>Reading the recipe values from the variable core into the recipe cache was successful.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.LoadRecipeResults">
      <summary>Enumeration containing the possible results of the 'Load' method</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.LoadRecipeResults.FileCorrupted">
      <summary>An error has occurred during the loading. Possibly the recipe file is damaged.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.LoadRecipeResults.FileNotFound">
      <summary>An error has occurred during the loading. The indicated recipe file was not found.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.LoadRecipeResults.LoadedWithErrors">
      <summary>Errors have occurred with loading the recipe values. One or multiple recipe values could not be loaded from the file. The recipe values detected as faulty are listed in the 'ErrorParams' property.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.LoadRecipeResults.Succeeded">
      <summary>Loading the recipe values from the recipe file into the recipe cache was successful.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeErrorCode">
      <summary>Enumeration containing the possible error causes when loading a value from a recipe file</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeErrorCode.DatatypeConversionError">
      <summary>The data type of the value from the recipe file does not equal the data type of the variable from the recipe server.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeErrorCode.MemberNotFound">
      <summary>In the recipe definition of the recipe file no value was found for the element.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeErrorCode.NoMember">
      <summary>In the recipe file a value was found for which there is no element in the recipe definition.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeErrorCode.Succeeded">
      <summary>Loading of the value was successful.
Attention: This return is not used in the 'RecipeErrorParam' object.
Here only faultily loaded recipe values are indicated.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeErrorCode.Unknown">
      <summary>An unknown error has occurred with loading the value.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeLockState">
      <summary>Contains the possible lock states of a recipe.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeLockState.LockedByOtherClient">
      <summary>The recipe is blocked by another Client application. The application receiving the 'LockedByOtherClient' status cannot edit the recipe.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeLockState.LockedByThisClient">
      <summary>The recipe is blocked by the own Client application. The application receiving the 'LockedByThisClient' status can edit the recipe. Other Clients receive 'LockedByOtherClient' until the recipe is unlocked through 'UnlockRecipe'.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.RecipeLockState.Unlocked">
      <summary>The recipe is not blocked.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SaveRecipeResults">
      <summary>Enumeration containing the possible results of the 'Save' method</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SaveRecipeResults.ExceededMaxFiles">
      <summary>The maximum number of files on a recipe set in the configuration of the recipe system was exceeded. The new file was not created.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SaveRecipeResults.FileNotCreated">
      <summary>The specified recipe file could not be created.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SaveRecipeResults.InternalError">
      <summary>An error in the recipe server prevented saving the recipe file.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SaveRecipeResults.Succeeded">
      <summary>Saving the recipe values from the recipe cache into the recipe file was succesful.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SaveRecipeResults.UnableToOverwrite">
      <summary>The specified recipe file was already in existence, and could not be overwritten. Where applicable it has to be verified whether the file is blocked by a writing protection or whether further applications have current access to the file.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SendRecipeResults">
      <summary>Enumeration containing the possible results of the 'Send' method</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SendRecipeResults.FileCorrupted">
      <summary>An error has occurred during the loading. Possibly the recipe file is damaged.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SendRecipeResults.FileNotFound">
      <summary>An error has occurred during the loading. The indicated recipe file was not found.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SendRecipeResults.SentWithErrors">
      <summary>Errors have occurred with loading the recipe values. One or multiple recipe values could not be loaded from the file. The recipe values detected as faulty are listed in the 'ErrorParams' property.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SendRecipeResults.Succeeded">
      <summary>Loading the recipe values from the recipe file into the process was successful.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.SetRecipeResults">
      <summary>Enumeraction containing the possible results of the 'Set' method</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SetRecipeResults.OPCError">
      <summary>A data transfer error has occurred. The recipe values could not be set.</summary>
    </member>
    <member name="F:VisiWinNET.Recipe.SetRecipeResults.Succeeded">
      <summary>Writing the recipe values from the recipe cache into the variable core was successful.</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeChange">
      <summary>Recipe value change recorded by the recipe change history</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChange.NewValue">
      <summary>New recorded value of the variable determined through 'VWItem'.</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChange.OldValue">
      <summary>Prior recorded value of the variable determined through 'VWItem'</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChange.TimeStamp">
      <summary>Time of the change</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChange.UserName">
      <summary>Name of the user who has carried out the change</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeChange.VWItem">
      <summary>Name of the variable</summary>
    </member>
    <member name="T:VisiWinNET.Recipe.RecipeNote">
      <summary>Structure encapsulating the information of a note in a recipe file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNote.ID">
      <summary>Returns the unequivocal identifier of the note within the recipe file</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNote.Note">
      <summary>Returns the text of the note</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNote.TimeStamp">
      <summary>Returns the time stamp that was passed when the note was added</summary>
    </member>
    <member name="P:VisiWinNET.Recipe.RecipeNote.UserName">
      <summary>Indicates the name of the user who was logged on with the application when the note was added</summary>
    </member>
    <member name="T:VisiWinNET.Services.AppEventService">
      <summary>Contains the access to system-wide published messages such as messages from an USV</summary>
    </member>
    <member name="M:VisiWinNET.Services.AppEventService.#ctor">
      <summary>Creates a new instance of the 'AppEventService' class</summary>
    </member>
    <member name="M:VisiWinNET.Services.AppEventService.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="E:VisiWinNET.Services.AppEventService.UPSEvent">
      <summary>Event displaying a system message</summary>
      <param name="sender">Object of the 'AppEventService' type through which the message was detected</param>
      <param name="e">Object of the 'UPSEventArgs' type containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Services.AppService">
      <summary>Contains general functions for reading/writing of process values, and for communication control</summary>
    </member>
    <member name="M:VisiWinNET.Services.AppService.#ctor">
      <summary>Creates a new instance of the 'AppService' class</summary>
    </member>
    <member name="M:VisiWinNET.Services.AppService.AddActiveForm(System.String)">
      <summary>Registers the data exchange of an "application-controlled" group via the control object</summary>
      <returns>Returns the reference counter to the group activation. If a group is repeatedly activated by the passed 'formName' the appropriate counter is incremented with every 'AddActiveForm' call. When the 'ReleaseActiveForm' method is called the counter is decremented. Only when the reference counter reaches the "0" value is the group really deactivated.</returns>
      <param name="formName">The passed argument value is compared with the value of the "Control object" group definition parameter in the variable kernel. If both values match (under consideration of the wildcard rules – see also "Data access" manual, "Control object" definition parameter) the communication is started.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.EnumServices">
      <summary>Enumerates all registered services.</summary>
      <returns>Returns the names of all services currently registered.</returns>
    </member>
    <member name="M:VisiWinNET.Services.AppService.GetItemID(System.String)">
      <summary>Returns the value of the 'ItemID' parameter from the variable definition.</summary>
      <returns>Specifies the communication component-specific ItemID</returns>
      <param name="VWItem">Identifier of the process variable from the variable kernelThe following information is expected as full identifier:{channel name.}{variable}&lt;.element resolution&gt;}with{channel name.}: name of the communication channel (with internal variables this part remains empty){variable}: the alias of the variable{&lt;.element resolution&gt;} identifier of the structure/field element in pointed brackets. Field elements are specified by square brackets. Structure elements are separated by the point operator.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.GetService(System.String)">
      <summary>Returns the queried service object.</summary>
      <returns>The queried service object</returns>
      <param name="serviceName">Name of queried server</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.RegisterService(System.String,VisiWinNET.Services.BaseService)">
      <summary>Registers the specified service.</summary>
      <returns>True: The service was registered. False: The service could not be registered. Possibly there is no connection with the server or a service with the specified name was already registered.</returns>
      <param name="serviceName">Designator for the service object. The name is used in EnumServices and GetService</param>
      <param name="myService">Service object</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.ReleaseActiveForm(System.String)">
      <summary>Deregisters the data exchange of an "application-controlled" group via the control object</summary>
      <returns>Returns the reference counter to the group activation. If a group is repeatedly activated by the passed 'formName' the appropriate counter is incremented with every 'AddActiveForm' call. When the 'ReleaseActiveForm' method is called the counter is decremented. Only when the reference counter reaches the "0" value is the group really deactivated.</returns>
      <param name="formName">The passed argument value is compared with the value of the "Control object" group definition parameter in the variable kernel. If both values match (under consideration of the wildcard rules – see also "Data access" manual, "Control object" definition parameter) the communication is stopped.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.SetItemID(System.String,System.String)">
      <summary>Sets the value of the 'ItemID' parameter of a variable definition.</summary>
      <param name="VWItem">Identifier of the process variable from the variable kernelThe following information is expected as full identifier:{channel name.}{variable}&lt;.element resolution&gt;}with{channel name.}: name of the communication channel (with internal variables this part remains empty){variable}: the alias of the variable{&lt;.element resolution&gt;} identifier of the structure/field element in pointed brackets. Field elements are specified by square brackets. Structure elements are separated by the point operator.</param>
      <param name="address">The new ItemID</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.UnregisterService(System.String)">
      <summary>Unregisters the specified service.</summary>
      <param name="serviceName">Name of server to be unregistered</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String)">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItem">Name of the process variable whose value is to be returned</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String,System.Boolean)">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItem">Name of the process variable whose value is to be returned</param>
      <param name="avoidCache">If 'AvoidCache' is set to 'True' the value of the variable is directly read from the communication component (OPC-Server or VisiWin driver).If 'AvoidCache' remains on the 'False' default value the value of the variable is read from the variable cache of the variable client. The variable client retains an internal copy of the variable already used in the application for optimizing purposes. This cache is filled with data in the main cycle of the variable core. Therefore, is it possible that for a short period of time the data in the variable client and thus in the application are not current.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String[],outVisiWinNET.DataAccess.OPCQuality[])">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be returned</param>
      <param name="qualities">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the access of 'VWGet' here the "Quality" information can be read that were generated by the system with reading the process variable value.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String[],System.Boolean)">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be returned</param>
      <param name="avoidCache">If 'AvoidCache' is set to 'True' the value of the variable is directly read from the communication component (OPC-Server or VisiWin driver).If 'AvoidCache' remains on the 'False' default value the value of the variable is read from the variable cache of the variable client. The variable client retains an internal copy of the variable already used in the application for optimizing purposes. This cache is filled with data in the main cycle of the variable core. Therefore, is it possible that for a short period of time the data in the variable client and thus in the application are not current.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String[],System.Boolean,outVisiWinNET.DataAccess.OPCQuality[])">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be returned</param>
      <param name="avoidCache">If 'AvoidCache' is set to 'True' the value of the variable is directly read from the communication component (OPC-Server or VisiWin driver).If 'AvoidCache' remains on the 'False' default value the value of the variable is read from the variable cache of the variable client. The variable client retains an internal copy of the variable already used in the application for optimizing purposes. This cache is filled with data in the main cycle of the variable core. Therefore, is it possible that for a short period of time the data in the variable client and thus in the application are not current.</param>
      <param name="qualities">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the access of 'VWGet' here the "Quality" information can be read that were generated by the system with reading the process variable value.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String[])">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be returned</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String,System.Boolean,outVisiWinNET.DataAccess.OPCQuality)">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItem">Name of the process variable whose value is to be returned</param>
      <param name="avoidCache">If 'AvoidCache' is set to 'True' the value of the variable is directly read from the communication component (OPC-Server or VisiWin driver).If 'AvoidCache' remains on the 'False' default value the value of the variable is read from the variable cache of the variable client. The variable client retains an internal copy of the variable already used in the application for optimizing purposes. This cache is filled with data in the main cycle of the variable core. Therefore, is it possible that for a short period of time the data in the variable client and thus in the application are not current.</param>
      <param name="quality">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the method access here the "Quality" information can be read that were generated by the system with reading the process variable value.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGet(System.String,outVisiWinNET.DataAccess.OPCQuality)">
      <summary>Static function to read out the content of one or more process variable</summary>
      <returns>Value of the queried process variable</returns>
      <param name="VWItem">Name of the process variable whose value is to be returned</param>
      <param name="quality">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the method access here the "Quality" information can be read that were generated by the system with reading the process variable value.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGetBit(System.String,System.Int32)">
      <summary>The 'VWGetBit' method reads a bit from a whole-numbered process variable.</summary>
      <returns>Value of the queried bit</returns>
      <param name="VWItem">Name of the process variable whose bit is to be returned</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWGetBit(System.String,System.Int32,System.Boolean)">
      <summary>The 'VWGetBit' method reads a bit from a whole-numbered process variable.</summary>
      <returns>Value of the queried bit</returns>
      <param name="VWItem">Name of the process variable whose bit is to be returned</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
      <param name="avoidCache">If 'AvoidCache' is set to 'True' the value of the variable is read directly from the communication component (OPC Server or driver).If 'AvoidCache' remains at the default value 'False' the value of the variable is read from the variable cache of the variable client. The variable client holds an internal copy of variables already used in the application for optimization purposes. This cache is filled with new date in the main cycle of the variable kernel. For this reason the data in the variable client and with this in the application may for a short period of time not be current.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSet(System.String,System.Object)">
      <summary>Function to set a process variable to a new value</summary>
      <returns>True: the value(s) where set. False: an error has occurred.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="newValue">Value to be written</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSet(System.String[],System.Object[])">
      <summary>Function to set a process variable to a new value</summary>
      <returns>True: the value(s) where set. False: an error has occurred.</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be written</param>
      <param name="newValues">Variable field containing the values to be written</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSet(System.String[],System.Object[],outVisiWinNET.DataAccess.OPCQuality[])">
      <summary>Function to set a process variable to a new value</summary>
      <returns>True: the value(s) where set. False: an error has occurred.</returns>
      <param name="VWItems">Field of the "String" data type whose elements contain the names of the variables to be written</param>
      <param name="newValues">Variable field containing the values to be written</param>
      <param name="qualities">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the access of 'VWSet' here the "Quality" information can be read that were generated by the system with writing the process variable value.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSet(System.String,System.Object,outVisiWinNET.DataAccess.OPCQuality,System.Object)">
      <summary>Function to set a process variable to a new value</summary>
      <returns>True: the value(s) where set. False: an error has occurred.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="newValue">Value to be written</param>
      <param name="quality">A not initialized variable of the 'OPCQuality' type is expected as passing value. Following the method access here the "Quality" information can be read that were generated by the system with writing the process variable value.</param>
      <param name="value">&lt;p class="HDC_Header"&gt;&lt;span class="expandcollapse" tabindex="0"&gt;&lt;img id="descriptionToggle" class="toggle" name="toggleSwitch" src="collapse.jpg"&gt;&lt;/img&gt;Description&lt;/span&gt;&lt;/p&gt;&lt;div id="descriptionSection" class="section" name="collapseableSection"&gt;$Content$ &lt;/div&gt; false</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSetBit(System.String,System.Int32,System.Int32)">
      <summary>The 'VWSetBit' method sets a bit in a whole-numbered process variable to the specified value.</summary>
      <returns>True: the bit could be set. False: the bit was not set, possibly the specified variable name has to be checked.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSetBit(System.String,System.Int32,System.Boolean)">
      <summary>The 'VWSetBit' method sets a bit in a whole-numbered process variable to the specified value.</summary>
      <returns>True: the bit could be set. False: the bit was not set, possibly the specified variable name has to be checked.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSetBit(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>The 'VWSetBit' method sets a bit in a whole-numbered process variable to the specified value.</summary>
      <returns>True: the bit could be set. False: the bit was not set, possibly the specified variable name has to be checked.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
      <param name="avoidCache">True: Prior to writing the value is read through the communication component.False: Prior to writing the value is read from the variable cache.</param>
    </member>
    <member name="M:VisiWinNET.Services.AppService.VWSetBit(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>The 'VWSetBit' method sets a bit in a whole-numbered process variable to the specified value.</summary>
      <returns>True: the bit could be set. False: the bit was not set, possibly the specified variable name has to be checked.</returns>
      <param name="VWItem">Name of process variable whose value is to be written</param>
      <param name="bitNumber">0-indicated specification of the bit that is to be read</param>
      <param name="bitValue">True: the bit is set to "1".False: the bit is set to "0".</param>
      <param name="avoidCache">True: Prior to writing the value is read through the communication component.False: Prior to writing the value is read from the variable cache.</param>
    </member>
    <member name="T:VisiWinNET.Services.BaseService">
      <summary>Is the basis class for a service serving the exchange of information between the individual Client applications in a Client-Server system.
</summary>
    </member>
    <member name="T:VisiWinNET.Services.BlinkEventArgs">
      <summary>Provides data for the 'DoBlink' event</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkEventArgs.BlinkState">
      <summary>Property to read the current blink status.</summary>
    </member>
    <member name="T:VisiWinNET.Services.BlinkManager">
      <summary>Class for the application-wide control of the blinking.</summary>
    </member>
    <member name="M:VisiWinNET.Services.BlinkManager.#ctor">
      <summary>Initializes a new instance of the 'BlinkManager' class.</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkManager.MainBlinkCycle">
      <summary>Determines the main blink cycle of the application.</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkManager.MainBlinkEnabled">
      <summary>Determines whether the application-wide blinking is active.</summary>
    </member>
    <member name="T:VisiWinNET.Services.BlinkService">
      <summary>Class for access to the application-wide synchronized blinking</summary>
    </member>
    <member name="M:VisiWinNET.Services.BlinkService.#ctor">
      <summary>Creates a new instance of the BlinkService class</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.BlinkColor">
      <summary>Caches a colour value for changing a control colour</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.BlinkCycle">
      <summary>Determines the blink cycle</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.CurrentState">
      <summary>Returns the current blinking phase</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.Enabled">
      <summary>Switches the blinking on or off.</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.FinalBlinkState">
      <summary>Last blinking status after deactivation</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.MainBlinkCycle">
      <summary>Returns the main blink cycle from the application</summary>
    </member>
    <member name="P:VisiWinNET.Services.BlinkService.Mode">
      <summary>Indicates the blinking mode for the controls using the object</summary>
    </member>
    <member name="M:VisiWinNET.Services.BlinkService.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Services.BlinkService.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Here the current value of the 'BlinkCycle' property is returned.</returns>
    </member>
    <member name="E:VisiWinNET.Services.BlinkService.DoBlink">
      <summary>Event to report the application-wide synchronized blinking</summary>
      <param name="sender">Indication of the 'BlinkService' type object that has triggered the event</param>
      <param name="e">'BlinkService.BlinkEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Services.KeyService">
      <summary>Class for application-wide pickup of keyboard input</summary>
    </member>
    <member name="M:VisiWinNET.Services.KeyService.#ctor">
      <summary>Creates a new instance of the KeyService class</summary>
    </member>
    <member name="P:VisiWinNET.Services.KeyService.KeyCode">
      <summary>Determines the key/key combination</summary>
    </member>
    <member name="M:VisiWinNET.Services.KeyService.BuildKeyCode(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Auxiliary function to calculate the 'KeyCode'</summary>
      <returns>Code for the key combination</returns>
      <param name="virtualKey">The 'virtualKeyCode' parameter returns the unequivocal key code of a key. Further information on the available key codes can be looked up in the MSDN (Keys enumeration/Keys collection).</param>
      <param name="shift">The 'virtualKeyCode' is operated in connection with the "Shift" key.</param>
      <param name="ctrl">The 'virtualKeyCode' is operated in connection with the "Ctrl" key.</param>
      <param name="alt">The 'virtualKeyCode' is operated in connection with the "Alt" key.</param>
    </member>
    <member name="M:VisiWinNET.Services.KeyService.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Services.KeyService.GetMnemonicKeyCode(System.String)">
      <summary>Searches for the key code for control or menu key access</summary>
      <returns>Code for key combination</returns>
      <param name="text">Text to be examined, containing the key access. The key access is determined in the text by inserting a "&amp;" character before the access character. </param>
    </member>
    <member name="M:VisiWinNET.Services.KeyService.TranslateKeyCode(System.Int32,outSystem.Windows.Forms.Keys,outSystem.Boolean,outSystem.Boolean,outSystem.Boolean)">
      <summary>Separates a key code back into the individual key states</summary>
      <param name="keyCode">Key code value whose key states are to be established</param>
      <param name="virtualKey">The 'virtualKeyCode' parameter expects a variable of the 'System.Windows.Forms.Keys' type. After the method access the unequivocal key code of the access key can be read from this variable. Further information can be looked up in the MSDN /Keys enumeration/Keys collection).</param>
      <param name="shift">The 'shift' parameter expects a variable of the Boolean type. After the method access it can be read from this variable whether the passed 'KeyCode' contains a pressed 'Shift' key.</param>
      <param name="ctrl">The 'ctrl' parameter expects a variable of the Boolean type. After the method access it can be read from this variable whether the passed 'KeyCode' contains a pressed 'Ctrl' key.</param>
      <param name="alt">The 'alt' parameter expects a variable of the Boolean type. After the method access it can be read from this variable whether the passed 'KeyCode' contains a pressed 'ALT' key.</param>
    </member>
    <member name="E:VisiWinNET.Services.KeyService.KeyDown">
      <summary>Is triggered when the key combination set via 'KeyCode' was entered in the application</summary>
      <param name="sender">Indication of the 'KeyService' type object that has triggered the event</param>
      <param name="e">'KeyEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Services.KeyService.KeyUp">
      <summary>Is triggered when the key combination set via 'KeyCode' was released in the application</summary>
      <param name="sender">Indication of the 'KeyService' type object that has triggered the event</param>
      <param name="e">'KeyEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Services.UPSEventArgs">
      <summary>Provides data for the UPSEvent</summary>
    </member>
    <member name="P:VisiWinNET.Services.UPSEventArgs.UPSEvent">
      <summary>Returns information on the source of the event</summary>
    </member>
    <member name="T:VisiWinNET.Services.BlinkHandler">
      <summary>Delegate for the 'DoBlink' event</summary>
    </member>
    <member name="T:VisiWinNET.Services.BlinkMode">
      <summary>Enumeration containing the different operating modes of the system-wide synchonized blinking</summary>
    </member>
    <member name="F:VisiWinNET.Services.BlinkMode.BlinkColor">
      <summary>A colour is to be changed in the blink cycle. The specified colour value is displayed alternating with the appropriate colour of a control. The colour changed in the control can be the background colour ('BackColor' property) or a status colour.</summary>
    </member>
    <member name="F:VisiWinNET.Services.BlinkMode.ChangeVisible">
      <summary>The control is set visible/invisible in the blink cycle.
This setting is typically used with graphic controls (e.g. 'Shape').</summary>
    </member>
    <member name="F:VisiWinNET.Services.BlinkMode.EventOnly">
      <summary>Only the 'DoBlink' event is triggered. In this event the cyclic change of a property can be effected.</summary>
    </member>
    <member name="T:VisiWinNET.Services.UPSEventCodes">
      <summary>Contains elements describing the source of an 'UPSEvent'</summary>
    </member>
    <member name="F:VisiWinNET.Services.UPSEventCodes.OnBatteryPower">
      <summary>Describes the "SystemPowerFailure Windows message. Is normally sent by the driver of a USV when the power has failed.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.Archive">
      <summary>Represents the access to an archive definition</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.#ctor(System.String)">
      <summary>Initializes a new instance of the 'Archive' class</summary>
      <param name="name">Name of the archive definition from the project databank</param>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.CurrentFile">
      <summary>Returns the name of the current file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.FilePath">
      <summary>Sets the file path of the archive files</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Files">
      <summary>Returns a collection encapsulating information from the files created by the archive</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.IsDisposed">
      <summary>Returns whether the "unmanaged code" resources used by an object are released.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.LocalizableText">
      <summary>Returns the internal identifier of the index text constituting the localizable definition name in the language currently selected in the project</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.MaxSamples">
      <summary>Returns the value of the "Archive size" (for progressive achives) and "Circular buffer size" (for circular buffers) resp. parameter</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Name">
      <summary>Name of the archive definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Notes">
      <summary>Returns a collection of notes written on the archive files</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Parameters">
      <summary>Access to the additional information that can be saved with the current archive file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.SampleMode">
      <summary>Returns the recording mode of the archive definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.ScanTime">
      <summary>Indicates the scan cycle</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Text">
      <summary>Returns the localizable definition name in the language currently selected in the project</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.Trends">
      <summary>Collection of trend objects</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archive.XVariable">
      <summary>Returns the name of the variable selected as 'XVariable'</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.AddTrend(VisiWinNET.Trend.TrendDefinition,System.Boolean)">
      <summary>Adds a dynamically generated trend definition to the archive.</summary>
      <returns>True: adding the definition was successful, otherwise False</returns>
      <param name="newTrend">Object of the 'TrendDefinition' type containing parameters for trend recording</param>
      <param name="saveSettings">True: the added definition is made persistent in the runtime project databank (&lt;Projectname.rtn&gt;). After a re-start of the visualization application the definition still exists.False: The definition is only valid until the visualization application is re-started.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.AsyncGetTrendData(System.String,System.Object,System.Object,System.String)">
      <summary>Starts an asynchronous query of X/Y trend data</summary>
      <returns>True: the query is processed by the archive server. False: an error has occurred.</returns>
      <param name="trend">Unequivocal name of trend.The names of the projected trends of an archive can be listed via the 'Trends' property.</param>
      <param name="minX">With a X/Y trend (Scan Mode parameter of the archive definition is set to "Change of the X variable") the value of the variable defined as "x-axis" is saved instead of a time stamp. The minX parameter specifies the lower filter limit for this case.</param>
      <param name="maxX">Specifies the upper filter limit for the X/Y recording.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.AsyncGetTrendData(System.String,System.DateTime,System.DateTime,System.String)">
      <summary>Starts an asynchronous query of X/t trend data</summary>
      <returns>True: the query is processed by the archive server. False: an error has occurred.</returns>
      <param name="trend">Unequivocal name of trend.The names of the projected trends of an archive can be listed via the 'Trends' property.</param>
      <param name="minTime">Indicates the time stamp from which the value output is to commence. If the 'DateTime.MinValue' constant is specified here the output begins at the oldest time stamp, i.e. with the first recorded value. </param>
      <param name="maxTime">Indicates the time stamp up to which the value output is to continue. If the 'DateTime.MaxValue' constant is specified here the output continues to the youngest time stamp.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.AsyncGetTrendsData(System.String[],System.Object,System.Object,System.String,System.Int32)">
      <summary>Starts an asynchronous query of trend data for multiple trends</summary>
      <returns>Returns a TicketID administrated by the system that allows the allocation to the access in the 'RequestedTrendsData' event</returns>
      <param name="trends">Field of the 'String()' data type in which the trend names are specified for which the trend date are queried</param>
      <param name="minX">With a X/Y trend (Scan Mode parameter of the archive definition is set to "Change of the X variable") the value of the variable defined as "x-axis" is saved instead of a time stamp. The minX parameter specifies the lower filter limit for this case.</param>
      <param name="maxX">Specifies the upper filter limit for the X/Y recording.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="maxSamples">Specifies the maximum numer of returned values per trend. Possible specifications are:"0": All values filtered through Max-/Min-/ Time/-X/Y und FileName are returned."-1": The number of returned data is determined through the MaxRequestSamples entry in the "trend_server" category in the project configuration (see manual "Configuration settings on the target system"."&gt;0": The number of returned data is directly specified as maxSamples.If the number of the recorded values in the specified filter is higher than the number of the requested values individual values are not returned. If for example 500 values are requested through maxSamples and 2000 recorded values are available the system returns evers fourth value.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.AsyncGetTrendsData(System.String[],System.DateTime,System.DateTime,System.String,System.Int32)">
      <summary>Starts an asynchronous query of trend data for multiple trends</summary>
      <returns>Returns a TicketID administrated by the system that allows the allocation to the access in the 'RequestedTrendsData' event</returns>
      <param name="trends">Field of the 'String()' data type in which the trend names are specified for which the trend date are queried</param>
      <param name="minTime">Indicates the time stamp from which the value output is to commence. If the 'DateTime.MinValue' constant is specified here the output begins at the oldest time stamp, i.e. with the first recorded value. </param>
      <param name="maxTime">Indicates the time stamp up to which the value output is to continue. If the 'DateTime.MaxValue' constant is specified here the output continues to the youngest time stamp.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="maxSamples">Specifies the maximum numer of returned values per trend. Possible specifications are:"0": All values filtered through Max-/Min-/ Time/-X/Y und FileName are returned."-1": The number of returned data is determined through the MaxRequestSamples entry in the "trend_server" category in the project configuration (see manual "Configuration settings on the target system"."&gt;0": The number of returned data is directly specified as maxSamples.If the number of the recorded values in the specified filter is higher than the number of the requested values individual values are not returned. If for example 500 values are requested through maxSamples and 2000 recorded values are available the system returns evers fourth value.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.Clear">
      <summary>Deletes the contents of the current archive file.</summary>
      <returns>True: the method was successful. False: an error has occurred.</returns>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.DeleteTrend(System.String)">
      <summary>Deletes a dynamically generated trend definition.</summary>
      <returns>True: deletion was successful, otherwise False</returns>
      <param name="trendName">Name of trend definition to be deleted</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.RecordOneSample(System.String)">
      <summary>Triggers a one-off manual recording of the trend values</summary>
      <returns>True: the method access was successfully carried out. False: the method access was aborted due to an error.</returns>
      <param name="trendName">Name of trend definition to be recorded. If no name is specified all trends in the archive are recorded.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.RecordOneSample(System.String[])">
      <summary>Triggers a one-off manual recording of the trend values</summary>
      <returns>True: the method access was successfully carried out. False: the method access was aborted due to an error.</returns>
      <param name="trendNames">Names of trend definitions to be recorded, passed as a field</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.SetScanTime(System.Int32,System.Boolean)">
      <summary>Sets the scan time of the archive</summary>
      <param name="scanTime">New scan time</param>
      <param name="saveToFile">Determines whether the change is to be stored in the project databank.True: The change of the scan time is stored in the project databank. With the next start of the project that time is used again.False: The change is not stored. With the next start of the project the original value from the project databank is used for the scan time.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.StartRecording">
      <summary>Starts the recording</summary>
      <returns>True: the recording was started, otherwise 'False'</returns>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.StopRecording">
      <summary>Stops the recording</summary>
      <returns>True: the recording was stopped, otherwise 'False'.</returns>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.SyncGetTrendData(System.String,System.Object,System.Object,System.String,outVisiWinNET.Trend.TrendSample[])">
      <summary>Starts an synchronous query of X/Y trend data</summary>
      <returns>Returns the number of the established trend recordings</returns>
      <param name="trend">Unequivocal name of trend.The names of the projected trends of an archive can be listed via the 'Trends' property.</param>
      <param name="minX">With a X/Y trend (Scan Mode parameter of the archive definition is set to "Change of the X variable") the value of the variable defined as "x-axis" is saved instead of a time stamp. The minX parameter specifies the lower filter limit for this case.</param>
      <param name="maxX">Specifies the upper filter limit for the X/Y recording.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="data">A non-initialized field of the 'TrendSample' type is expected as a value. After access the trend values are shown here.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.SyncGetTrendData(System.String,System.DateTime,System.DateTime,System.String,outVisiWinNET.Trend.TrendSample[])">
      <summary>Starts an synchronous query of X/t trend data</summary>
      <returns>Returns the number of the established trend recordings</returns>
      <param name="trend">Unequivocal name of trend.The names of the projected trends of an archive can be listed via the 'Trends' property.</param>
      <param name="minTime">Indicates the time stamp from which the value output is to commence. If the 'DateTime.MinValue' constant is specified here the output begins at the oldest time stamp, i.e. with the first recorded value. </param>
      <param name="maxTime">Indicates the time stamp up to which the value output is to continue. If the 'DateTime.MaxValue' constant is specified here the output continues to the youngest time stamp.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="data">A non-initialized field of the 'TrendSample' type is expected as a value. After access the trend values are shown here.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.SyncGetTrendsData(System.String[],System.DateTime,System.DateTime,System.String,System.Int32,outVisiWinNET.Trend.TrendSample[])">
      <summary>Starts an synchronous query of data from multiple trends</summary>
      <returns>Returns the sum of all identified trend recording data</returns>
      <param name="trends">Field of the 'String()' data type in which the trend names are specified for which the trend date are queried</param>
      <param name="minTime">Indicates the time stamp from which the value output is to commence. If the 'DateTime.MinValue' constant is specified here the output begins at the oldest time stamp, i.e. with the first recorded value. </param>
      <param name="maxTime">Indicates the time stamp up to which the value output is to continue. If the 'DateTime.MaxValue' constant is specified here the output continues to the youngest time stamp.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="maxSamples">Specifies the maximum numer of returned values per trend. Possible specifications are:"0": All values filtered through Max-/Min-/ Time/-X/Y und FileName are returned."-1": The number of returned data is determined through the MaxRequestSamples entry in the "trend_server" category in the project configuration (see manual "Configuration settings on the target system"."&gt;0": The number of returned data is directly specified as maxSamples.If the number of the recorded values in the specified filter is higher than the number of the requested values individual values are not returned. If for example 500 values are requested through maxSamples and 2000 recorded values are available the system returns evers fourth value.</param>
      <param name="data">As value a non-initializes two-dimentional field of the 'TrendSample' type is expected. After the access the trend values are available here.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.SyncGetTrendsData(System.String[],System.Object,System.Object,System.String,System.Int32,outVisiWinNET.Trend.TrendSample[])">
      <summary>Starts an synchronous query of data from multiple trends</summary>
      <returns>Returns the sum of all identified trend recording data</returns>
      <param name="trends">Field of the 'String()' data type in which the trend names are specified for which the trend date are queried</param>
      <param name="minX">With a X/Y trend (Scan Mode parameter of the archive definition is set to "Change of the X variable") the value of the variable defined as "x-axis" is saved instead of a time stamp. The minX parameter specifies the lower filter limit for this case.</param>
      <param name="maxX">Specifies the upper filter limit for the X/Y recording.</param>
      <param name="fileName">If the name of an archive file is specified here the search for trend data is restricted to this particular file. If the parameter remains empty the search will be conducted across all present files of the archive.</param>
      <param name="maxSamples">Specifies the maximum numer of returned values per trend. Possible specifications are:"0": All values filtered through Max-/Min-/ Time/-X/Y und FileName are returned."-1": The number of returned data is determined through the MaxRequestSamples entry in the "trend_server" category in the project configuration (see manual "Configuration settings on the target system"."&gt;0": The number of returned data is directly specified as maxSamples.If the number of the recorded values in the specified filter is higher than the number of the requested values individual values are not returned. If for example 500 values are requested through maxSamples and 2000 recorded values are available the system returns evers fourth value.</param>
      <param name="data">As value a non-initializes two-dimentional field of the 'TrendSample' type is expected. After the access the trend values are available here.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Character string describing the property values of the 'Archive' object</returns>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.TrendOnline(System.String[],System.Boolean)">
      <summary>Registers multiple trend definitions for the 'NewTrendData' event</summary>
      <param name="trends">Field of trend names whose recording is to be reported in the 'NewTrendData' event</param>
      <param name="online">True: the event is triggered for the specified trend definition.False: the event is no longer triggered for the specified trend definition.</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archive.TrendOnline(System.String,System.Boolean)">
      <summary>Registers one trend definition for the 'NewTrendData' event</summary>
      <param name="trend">Name of the trend whose recording is to be reported in the 'NewTrendData' event</param>
      <param name="online">True: the event is triggered for the specified trend definition.False: the event is no longer triggered for the specified trend definition.</param>
    </member>
    <member name="E:VisiWinNET.Trend.Archive.NewTrendData">
      <summary>Is triggered when trend data registered for monitoring are recorded in the archive</summary>
      <param name="sender">Indication of the 'Archive' type object that has triggered the event</param>
      <param name="e">'NewTrendDataEventArgs' type object containing further information on the event.</param>
    </member>
    <member name="E:VisiWinNET.Trend.Archive.NewTrendsData">
      <summary>Is triggered when trend data registered for monitoring are recorded in the archive</summary>
      <param name="sender">Specification of the 'Archive' type object that has triggered the event</param>
      <param name="e">Object of the 'NewTrendsDataEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Trend.Archive.RequestedTrendData">
      <summary>Is triggered when a query started through 'AsyncGetTrendData' was completed</summary>
      <param name="sender">Indication of the 'Archive' type object that has triggered the event</param>
      <param name="e">'RequestedTrendDataEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Trend.Archive.RequestedTrendsData">
      <summary>Is triggered when a query started through 'AsyncGetTrendsData' was completed</summary>
      <param name="sender">Specification of the 'Archive' type object that has triggered the event</param>
      <param name="e">Object of the 'RequestedTrendsDataEventArgs' type containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.Trend.Archive.TrendTicker">
      <summary>Is triggered when an archive file is manipulated</summary>
      <param name="sender">Indication of the 'Archive' type object that has triggered the event</param>
      <param name="e">'TrendTickerEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.Trend.ArchiveNotes">
      <summary>Class for access to saved notes on an archive.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNotes.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNotes.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Specification of element to be read via the enumerator index</param>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNotes.MaxTime">
      <summary>Determines the end point that can be used for filtering the data</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNotes.MinTime">
      <summary>Determines the start point that can be used for filtering the data</summary>
    </member>
    <member name="M:VisiWinNET.Trend.ArchiveNotes.Add(VisiWinNET.Trend.ArchiveNote)">
      <summary>Adds a new note to the archive</summary>
      <returns>True: the method access was successful. False: an error has occurred.</returns>
      <param name="note">Indication of new note as an object</param>
    </member>
    <member name="M:VisiWinNET.Trend.ArchiveNotes.Add(System.DateTime,System.String)">
      <summary>Adds a new note to the archive</summary>
      <returns>True: the method access was successful. False: an error has occurred.</returns>
      <param name="timeStamp">Indication of time stamp</param>
      <param name="noteText">Indication of note text</param>
    </member>
    <member name="M:VisiWinNET.Trend.ArchiveNotes.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'ArchiveNote' objects</returns>
    </member>
    <member name="T:VisiWinNET.Trend.Archives">
      <summary>Class encapsulating the access to the archive definitions of the project</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archives.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Archives.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.Trend.Archives.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="name">Specification of element to be read via the definition name</param>
    </member>
    <member name="M:VisiWinNET.Trend.Archives.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Archives.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'Archive' objects</returns>
    </member>
    <member name="T:VisiWinNET.Trend.CustomParameters">
      <summary>Saving of any information within an archive file</summary>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.DeleteEntry(System.String,System.String)">
      <summary>Deletes an entry from the specified section</summary>
      <param name="section">Name of sction the entry is allocated to</param>
      <param name="entry">Name of entry to be deleted</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.DeleteSection(System.String)">
      <summary>Deletes the specified section and all allocated entries</summary>
      <param name="section">Name of section to be deleted</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.GetEntries(System.String,outSystem.String[],outSystem.Array)">
      <summary>Lists the entries allocated to the specified section</summary>
      <returns>Number of returned entries</returns>
      <param name="section">Name of section whose entries are to be returned</param>
      <param name="entries">A non-initialized variable field of the 'String' type is expected as passing value. After the method call the names of the entries can be read here.</param>
      <param name="values">A non-initialized variable field of the 'Array' type is expected as passing value. After the method call the names of the entries can be read here. The data type of the individual 'Array' elements is specified as 'Object' (see MSDN). The exaxt data type specification of an element can be read out through the 'GetType' method.</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.GetEntries(System.String,System.String,outSystem.String[],outSystem.Array)">
      <summary>Lists the entries allocated to the specified section</summary>
      <returns>Number of returned entries</returns>
      <param name="section">Name of section whose entries are to be returned</param>
      <param name="fileName">Name of the archive file. If no archive file is specified the method call refers to the file currently used by the archive server.</param>
      <param name="entries">A non-initialized variable field of the 'String' type is expected as passing value. After the method call the names of the entries can be read here.</param>
      <param name="values">A non-initialized variable field of the 'Array' type is expected as passing value. After the method call the names of the entries can be read here. The data type of the individual 'Array' elements is specified as 'Object' (see MSDN). The exaxt data type specification of an element can be read out through the 'GetType' method.</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.GetSections">
      <summary>Lists the information sections of an archive</summary>
      <returns>Field of the 'String' type containing all section designators</returns>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.Read(System.String,System.String,System.Object)">
      <summary>Reads an entry</summary>
      <returns>Value of the 'Object' type entry. Via the 'GetType' method the data type of the value can be read out.</returns>
      <param name="section">Name of section the queried entry is allocated to</param>
      <param name="entry">Name of entry whose value is to be returned</param>
      <param name="defaultValue">Substitute value that is returned if the entry is not existent</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.Read(System.String,System.String)">
      <summary>Reads an entry</summary>
      <returns>Value of the 'Object' type entry. Via the 'GetType' method the data type of the value can be read out.</returns>
      <param name="section">Name of section the queried entry is allocated to</param>
      <param name="entry">Name of entry whose value is to be returned</param>
    </member>
    <member name="M:VisiWinNET.Trend.CustomParameters.Write(System.String,System.String,System.Object)">
      <summary>Writes an entry</summary>
      <returns>True: the method access was successful. False: an error has occurred.</returns>
      <param name="section">Name of section the entry to be written is allocated to</param>
      <param name="entry">Name of entry whose value is to be written</param>
      <param name="entryValue">Value to be written</param>
    </member>
    <member name="T:VisiWinNET.Trend.DataFile">
      <summary>Class encapsulating the information of an archive file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFile.FileName">
      <summary>Indicates the name of the file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFile.MaxTime">
      <summary>Returns the time stamp of the last value recorded in the file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFile.MinTime">
      <summary>Returns the time stamp of the first value recorded in the file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFile.Notes">
      <summary>Returns a collection of notes saved in the file</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFile.Parameters">
      <summary>Allows access to the additional information that can be saved on the archive file</summary>
    </member>
    <member name="T:VisiWinNET.Trend.DataFiles">
      <summary>Collection of the file names/recording periods of the files created by an archive. </summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFiles.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DataFiles.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.Trend.DataFiles.Item(System.String)">
      <summary>Access to an element in the list with help of the file name</summary>
      <param name="name">Specification of element to be read via the file name. The file name is to be indicated without ending and path.</param>
    </member>
    <member name="M:VisiWinNET.Trend.DataFiles.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'DataFile' objects</returns>
    </member>
    <member name="T:VisiWinNET.Trend.DisplayParameters">
      <summary>Class for access to the display parameters of a trend definition</summary>
    </member>
    <member name="M:VisiWinNET.Trend.DisplayParameters.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the 'DisplayParameters' class</summary>
      <param name="archive">Name of the archive definition from the project database</param>
      <param name="trend">Name of the trend definition from the project database</param>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.CurveMode">
      <summary>Determines how the line is interpolated between points</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.LimitMax">
      <summary>y-position of the upper tolerance band</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.LimitMaxColor">
      <summary>Colour of the upper tolerance band</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.LimitMin">
      <summary>y-position of the lower tolerance band</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.LimitMinColor">
      <summary>Colour of the lower tolerance band</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.MaxValue">
      <summary>Maximum displayable recording value</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.MinValue">
      <summary>Minimum displayable recording value</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.PenColor">
      <summary>Colour of curve</summary>
    </member>
    <member name="P:VisiWinNET.Trend.DisplayParameters.PenWidth">
      <summary>Line width of the curve</summary>
    </member>
    <member name="M:VisiWinNET.Trend.DisplayParameters.AssumeCurrentConfig(System.Boolean)">
      <summary>Method for writing back the display parameter</summary>
      <param name="saveToFile">True: The changes are stored in the project file. They will become available again with a new application start.False: The changes are sent to the archive server, and returned with subsequent calls. With a new application start, however, the "old" values from the project databank will be returned.</param>
    </member>
    <member name="T:VisiWinNET.Trend.NewTrendDataEventArgs">
      <summary>Provides data for the 'NewTrendData' event</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendDataEventArgs.Count">
      <summary>Indicates the number of data sets</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendDataEventArgs.Data">
      <summary>Field of newly recorded data sets</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendDataEventArgs.Trend">
      <summary>Name of the trend definition whose values were newly recorded</summary>
    </member>
    <member name="M:VisiWinNET.Trend.NewTrendDataEventArgs.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>In this case the name of the trend definition whose newly recorded data are passed in the event is indicated.</returns>
    </member>
    <member name="T:VisiWinNET.Trend.NewTrendsDataEventArgs">
      <summary>Provides data for the 'NewTrendsData' event</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendsDataEventArgs.Count">
      <summary>Indicates the number of data sets</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendsDataEventArgs.Data">
      <summary>Field of newly recorded data sets</summary>
    </member>
    <member name="P:VisiWinNET.Trend.NewTrendsDataEventArgs.Trends">
      <summary>Names of the trend definitions whose values were newly recorded</summary>
    </member>
    <member name="T:VisiWinNET.Trend.ParameterConfig">
      <summary>Class for access to the recording parameters of a trend definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ParameterConfig.Hysteresis">
      <summary>Value of set hysteresis</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ParameterConfig.Maximum">
      <summary>Value of the "Maximum" definition parameter</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ParameterConfig.Minimum">
      <summary>Value of the "Minimum" definition parameter</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ParameterConfig.VWItem">
      <summary>Name of recorded process variable</summary>
    </member>
    <member name="T:VisiWinNET.Trend.RequestedTrendDataEventArgs">
      <summary>Provides data for the 'RequestedTrendData' event</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendDataEventArgs.FileName">
      <summary>Specifies the file name that was passed in the 'AsyncGetTrendData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendDataEventArgs.MaxTime">
      <summary>Returns the 'maxTime' parameter value that was passed in the 'AsyncGetTrendData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendDataEventArgs.MaxX">
      <summary>Returns the 'maxX' parameter value that was passed in the 'AsyncGetTrendData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendDataEventArgs.MinTime">
      <summary>Returns the 'minTime' parameter value that was passed in the 'AsyncGetTrendData' query</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendDataEventArgs.MinX">
      <summary>Returns the 'minX' parameter value that was passed in the 'AsyncGetTrendData' query</summary>
    </member>
    <member name="T:VisiWinNET.Trend.RequestedTrendsDataEventArgs">
      <summary>Provides data for the 'RequestedTrendsData' event</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.FileName">
      <summary>Specifies the file name that was passed in the 'AsyncGetTrendsData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.MaxTime">
      <summary>Returns the 'maxTime' parameter value that was passed in the 'AsyncGetTrendsData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.MaxX">
      <summary>Returns the 'maxX' parameter value that was passed in the 'AsyncGetTrendsData' query.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.MinTime">
      <summary>Returns the 'minTime' parameter value that was passed in the 'AsyncGetTrendsData' query</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.MinX">
      <summary>Returns the 'minX' parameter value that was passed in the 'AsyncGetTrendsData' query</summary>
    </member>
    <member name="P:VisiWinNET.Trend.RequestedTrendsDataEventArgs.Ticket">
      <summary>Returns the TicketID issued by the system that was provided as return value with accessing 'AsyncGetTrendData'.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.Trend">
      <summary>Represents the access to a trend definition</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.#ctor">
      <summary>Creates a new instance of the Trend class</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the Trend class</summary>
      <param name="archive">Name of archive to which the requested trend definition is allocated</param>
      <param name="name">Name of requested trend definition</param>
    </member>
    <member name="P:VisiWinNET.Trend.Trend.Archive">
      <summary>Name of the archive definition the trend is allocated to</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trend.DisplayParameters">
      <summary>Object containing the display parameters of the trend definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trend.Name">
      <summary>Name of the trend definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trend.Parameters">
      <summary>Object containing the recording parameters of the trend definition</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trend.Text">
      <summary>Returns the localizable definition name in the language currently selected in the project</summary>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.GetTrend(System.String,System.String)">
      <summary>Static method to create a 'Trend' instance</summary>
      <returns>'Trend' type object containing the information of the specified trend definition</returns>
      <param name="archive">Name of archive definition to which the trend is allocated</param>
      <param name="name">Name of trend definition for which the object is to be returned</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.RecordSample(System.DateTime,System.Object)">
      <summary>Manually records a new X/t value.</summary>
      <returns>True: the value could be stored, otherwise False.</returns>
      <param name="time">Time stamp</param>
      <param name="value">Value to be stored</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.RecordSample(System.Object,System.Object)">
      <summary>Manually records a new X/Y value.</summary>
      <returns>True: the value could be stored, otherwise False.</returns>
      <param name="xValue">x-value for XY trends</param>
      <param name="yValue">y-value for XY trends</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.RecordSamples(System.DateTime[],System.Object[])">
      <summary>Manually records multiple X/t values</summary>
      <returns>True: the values could be stored, otherwise False.</returns>
      <param name="times">Field o time stamps</param>
      <param name="values">Field of values to be stored</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.RecordSamples(System.Object[],System.Object[])">
      <summary>Manually records multiple X/Y values</summary>
      <returns>True: the values could be stored, otherwise False.</returns>
      <param name="xValues">Field of x-values (for XY trends)</param>
      <param name="yValues">Field of y-values (for XY trends)</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trend.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Name of trend definition</returns>
    </member>
    <member name="T:VisiWinNET.Trend.TrendDefinition">
      <summary>Encapsulates the information of a trend definition generated at runtime.</summary>
    </member>
    <member name="M:VisiWinNET.Trend.TrendDefinition.#ctor">
      <summary>Initializes a new instance of the 'TrendDefinition' class.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendDefinition.Comment">
      <summary>Determines the value for the "Comment" definition parameter.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendDefinition.Filter">
      <summary>Determines the value for the "Filter" definition parameter.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendDefinition.FilterDepth">
      <summary>Determines the value for the "Filter depth" definition parameter.</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendDefinition.HysteresisMode">
      <summary>Determines the value for the "Hysteresis mode" definition parameter.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.TrendManager">
      <summary>Class allowing at runtime access to the definitions and data of the archive system</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendManager.Archives">
      <summary>Static property allowing as a collection access to the archive definitions of the project </summary>
    </member>
    <member name="T:VisiWinNET.Trend.Trends">
      <summary>Class encapsulating the trend definitions of an archive as a collection</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trends.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.Trend.Trends.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.Trend.Trends.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="name">Specification of element to be read via the definition name</param>
    </member>
    <member name="M:VisiWinNET.Trend.Trends.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'Trend' objects</returns>
    </member>
    <member name="M:VisiWinNET.Trend.Trends.Refresh">
      <summary>Re-reads the contents of the collection from the project databank</summary>
    </member>
    <member name="T:VisiWinNET.Trend.TrendTickerEventArgs">
      <summary>Provides data for the 'TrendTicker' event</summary>
    </member>
    <member name="M:VisiWinNET.Trend.TrendTickerEventArgs.#ctor(System.String,System.Int32)">
      <summary>Creates a new instance of the 'TrendTickerEventArgs' class</summary>
      <param name="trend">Currently not used</param>
      <param name="code">Indication of the cause of the 'TrendTicker' event</param>
    </member>
    <member name="P:VisiWinNET.Trend.TrendTickerEventArgs.TickerCode">
      <summary>Indication of the cause of the 'TrendTicker' event</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendTickerEventArgs.Trend">
      <summary>Currently not used</summary>
    </member>
    <member name="T:VisiWinNET.Trend.NewTrendDataHandler">
      <summary>Delegate for the 'NewTrendData' event</summary>
    </member>
    <member name="T:VisiWinNET.Trend.NewTrendsDataHandler">
      <summary>Delegate for the 'NewTrendsData' event</summary>
    </member>
    <member name="T:VisiWinNET.Trend.RequestedTrendDataHandler">
      <summary>Delegate for the 'RequestedTrendData' event</summary>
    </member>
    <member name="T:VisiWinNET.Trend.RequestedTrendsDataHandler">
      <summary>Delegate for the 'RequestedTrendsData' event</summary>
    </member>
    <member name="T:VisiWinNET.Trend.TrendTickerHandler">
      <summary>Delegate for the 'TrendTicker' event</summary>
    </member>
    <member name="T:VisiWinNET.Trend.CurveModes">
      <summary>Collection of the "Output modes" of a trend definition</summary>
    </member>
    <member name="F:VisiWinNET.Trend.CurveModes.Interpolated">
      <summary>The line is displayed as a straight line between the individual depicted points.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.CurveModes.StepCurve">
      <summary>The line is displayed as a "staircase". Starting from point 1 the line runs at the level of the same Y coordinate as far as the X coordinate of point 2. Then it assumes the Y coordinate of point 2.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.FilterModes">
      <summary>Enumeration containing the possible filter types for the trend recording.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.FilterModes.AverageValue">
      <summary>Filter setting "Midpoint"</summary>
    </member>
    <member name="F:VisiWinNET.Trend.FilterModes.Averaging">
      <summary>Filter setting "Averaging"</summary>
    </member>
    <member name="F:VisiWinNET.Trend.FilterModes.Max">
      <summary>Filter setting "Maximum"</summary>
    </member>
    <member name="F:VisiWinNET.Trend.FilterModes.Min">
      <summary>Filter setting "Minimum"</summary>
    </member>
    <member name="F:VisiWinNET.Trend.FilterModes.NoFilter">
      <summary>No filter is used.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.HysteresisModes">
      <summary>Enumeration containing the possible hysteresis modes for the trend recording.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.HysteresisModes.Absolute">
      <summary>The value of the 'Hysteresis' property is used as recording hysteresis.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.HysteresisModes.NoHysteresis">
      <summary>No hysteresis is used.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.HysteresisModes.PromilleMaxMin">
      <summary>The value of the 'Hysteresis' property is interpreted as 1/1000 of the difference between the "Maximum" and "Minimum" parameters.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.HysteresisModes.PromilleValue">
      <summary>The value of the 'Hysteresis' property is interpreted as 1/1000 of the last recorded value.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.SampleModes">
      <summary>Enumeration of the different recording modes</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleModes.SyncToKernel">
      <summary>The cycle of the variable core is used as a time base for the recording. The 'ScanTime' property is then a multiple of this cycle.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleModes.TimeBase">
      <summary>The time base for the recording is a millisecond. The 'ScanTime' property indicates how many milliseconds are to pass per scan.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleModes.XVariable">
      <summary>The recording takes place when the value of the process variable determined in the 'XVariable' property changes.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.SampleStates">
      <summary>Enumeration containing the different additional informations on a recorded value</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.ArchiveCleared">
      <summary>No value exists as the archive file was deleted.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.BadQuality">
      <summary>At the time of recording the Quality Flag of the process variable reported an error.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.ErrorValue">
      <summary>An error has occurred with the recording of the trend value and instead of the trend value the substitute value or the value of the substitute value variable resp. was recorded.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.FirstValueinNewFile">
      <summary>The trend value is the first value in the archive file.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.HysteresisValue">
      <summary>The trend value was recorded as it is beyond the projected hysteresis.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.MaxValue">
      <summary>The recorded value has exceeded the maximum value or the value of the maximum variable resp.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.MinValue">
      <summary>The recorded value has fallen short ofthe minimum value or the value of the minimum variable resp.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.OutsideInterval">
      <summary>The trend value lies beyond the requested interval. The trend server delivers this value so that the curve can be displayed up to the border of the display area.
Example: With a recording interval of 10 minutes there can in the worst case be a gap of 9 minutes at the end of the curve display. This gap can be bridged with the additional value.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.SameYNewX">
      <summary>The X-value belonging to this trend value was changed. This flag is set when an unchanged value is not re-recorded but the time stamp on the recording is adapted.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.Standard">
      <summary>The value to be recorded has changed.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.StartedRecording">
      <summary>The trend value is the first value of a new recording.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.SubstitutedMaxValue">
      <summary>The recorded value has exceeded the maximum value or the value of the maximum variable resp., and was replaced by the substitute value maximum or the substitute value maximum variable resp.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.SampleStates.SubstitutedMinValue">
      <summary>The recorded value has fallen short ofthe minimum value or the value of the minimum variable resp., and was replaced by the substitute value minimum or the substitute value minimum variable resp.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.TickerCodes">
      <summary>Collection of the different causes for the 'TrendTicker' event of the 'Archive' class</summary>
    </member>
    <member name="F:VisiWinNET.Trend.TickerCodes.ClearedFile">
      <summary>The current archive file was deleted.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.TickerCodes.NewFile">
      <summary>A new archive file was created.</summary>
    </member>
    <member name="F:VisiWinNET.Trend.TickerCodes.SwappedFile">
      <summary>The old archive file of the archive indicated in the 'Trend' parameter was renamed &lt;File name&gt;.vwh. This event always occurs when a new archive file is created.</summary>
    </member>
    <member name="T:VisiWinNET.Trend.ArchiveNote">
      <summary>Structure to gather information to a recording note</summary>
    </member>
    <member name="M:VisiWinNET.Trend.ArchiveNote.#ctor(System.String,System.DateTime)">
      <summary>Creates a new instance of the 'ArchiveNote' structure</summary>
      <param name="noteText">Text of note</param>
      <param name="timeStamp">Time stamp of note</param>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNote.NoteText">
      <summary>Text of the note</summary>
    </member>
    <member name="P:VisiWinNET.Trend.ArchiveNote.TimeStamp">
      <summary>Time stamp specified to the note</summary>
    </member>
    <member name="T:VisiWinNET.Trend.TrendSample">
      <summary>Structure containing information on a recording value</summary>
    </member>
    <member name="M:VisiWinNET.Trend.TrendSample.#ctor(System.Object,System.Object,System.UInt32)">
      <summary>Initializes a new instance of the 'TrendSample' structure.</summary>
      <param name="XValue">Value for the 'XValue' property</param>
      <param name="YValue">Value for the 'YValue' property</param>
      <param name="state">Value for the 'State' property</param>
    </member>
    <member name="P:VisiWinNET.Trend.TrendSample.State">
      <summary>Additional information on the recording value</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendSample.Time">
      <summary>Time stamp of the recording</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendSample.Value">
      <summary>Recorded value</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendSample.XValue">
      <summary>Specifies the recorded X variable value with a X/Y recording</summary>
    </member>
    <member name="P:VisiWinNET.Trend.TrendSample.YValue">
      <summary>Returns the recorded trend value with a X/Y recording</summary>
    </member>
    <member name="M:VisiWinNET.Trend.TrendSample.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>The character string contains the following information (separated by a "|" character): - Time stamp - Value - Status.</returns>
    </member>
    <member name="T:VisiWinNET.UserManagement.AuthorizationEventArgs">
      <summary>Provides data for the 'AuthorizationChanged', 'ChangeVisible' and 'ChangeEnabled' events</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationEventArgs.IsAuthorized">
      <summary>Indicates whether the 'IsAuthorized' status is set</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AuthorizationObject">
      <summary>Class for functional linking of a control with the user administration</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.AuthorizationObject.#ctor">
      <summary>Creates a new instance of the 'AuthorizationObject' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationObject.Enabled">
      <summary>Determines whether the control is to remain deactivated in spite of an existing authorization</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationObject.IsAuthorized">
      <summary>Indication of authorization by the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationObject.Mode">
      <summary>Indicates whether the object is to be displayed invisible or deactivated with missing authorization</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationObject.Right">
      <summary>Determines the right or the user level</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AuthorizationObject.Visible">
      <summary>Determines whether the control is to remain deactivated in spite of an existing authorization</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.AuthorizationObject.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.AuthorizationObject.ToString">
      <summary>Returns a string representing the current object.</summary>
      <returns>Returns the user level (in the level-orientated user administration) or the name of the right (in the rights-orientated user administration)</returns>
    </member>
    <member name="E:VisiWinNET.UserManagement.AuthorizationObject.AuthorizationChanged">
      <summary>Is triggered when the authorization changes</summary>
      <param name="sender">Indication of the 'AuthorizationObject' type object that has triggered the event</param>
      <param name="e">'AuthorizationObject.AuthorizationEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.AuthorizationObject.ChangeEnabled">
      <summary>Is triggered when the value of the 'Enabled' property is changed by the user administration</summary>
      <param name="sender">Indication of the 'AuthorizationObject' type object that has triggered the event</param>
      <param name="e">'AuthorizationObject.AuthorizationEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.AuthorizationObject.ChangeVisible">
      <summary>Is triggered when the value of the 'Visible' property is changed by the user administration</summary>
      <param name="sender">Indication of the 'AuthorizationObject' type object that has triggered the event</param>
      <param name="e">'AuthorizationObject.AuthorizationEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.AutoLogOffEventArgs">
      <summary>Provides data for the 'AutoLogOff' event</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AutoLogOffEventArgs.CancelAutoLogOff">
      <summary>Allows aborting the automatic logoff</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.AutoLogOffEventArgs.CurrentUser">
      <summary>Contains the information about the user who is to be logged off from the system via the "automatic logoff"</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.Config">
      <summary>Encapsulates information from the user administration configuration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Config.PasswordPolicies">
      <summary>Access to the rules to determine a password for a user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Config.UserPolicies">
      <summary>Access to the rules to determine a logon name for a user</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ForbiddenPasswords">
      <summary>Access to the list of forbidden passwords from the user administration</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.ForbiddenPasswords.#ctor">
      <summary>Creates a new instance of the 'ForbiddenPasswords' type</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.ForbiddenPasswords.Add(System.String)">
      <summary>Adds a word to the list</summary>
      <returns>True if the word was added to the listFalse if the word already existed in the list</returns>
      <param name="password">Newly to be added forbidden password</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.ForbiddenPasswords.GetEnumerator">
      <summary>Returns a reference to an enumerator interface providing access to the elements of a register (enumeration).
</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all forbidden passwords as 'String' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.ForbiddenPasswords.IsForbidden(System.String)">
      <summary>Tests whether a password to be verified is contained in the list of forbidden passwords</summary>
      <returns>True: The password to be verified is contained in the list.</returns>
      <param name="password">Password to be verified</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.ForbiddenPasswords.Remove(System.String)">
      <summary>Deletes the specified password from the list of forbidden passwords</summary>
      <returns>True: The specified password was found in the list, and deleted, otherwise False</returns>
      <param name="password">Password to be deleted</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.GroupRights">
      <summary>Collection of rights of a user group</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.GroupRights.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.GroupRights.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Specification of element to be read via the enumeration index</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.Add(System.String)">
      <summary>Links the user group with the specified right</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="name">Name of a right</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.Add(System.String[])">
      <summary>Links the user group with the specified rights</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="names">Field of rights names</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.Ienumerator type containing all 'Right' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.Remove(System.String[])">
      <summary>Cancels the link with the indicated rights</summary>
      <returns>True: the operation was successful, otherwise 'False'</returns>
      <param name="names">Field of rights names</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.Remove(System.String)">
      <summary>Cancels the link with the indicated right</summary>
      <returns>True: the operation was successful, otherwise 'False'</returns>
      <param name="name">Name of a right</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupRights.Set(System.String[])">
      <summary>Directly sets a user group's links to rights</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="names">Field of rights names</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.GroupUsers">
      <summary>Class encapsulating as a collection the users belonging to a user group</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.GroupUsers.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.GroupUsers.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Specification of element to be read via the enumeration index</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupUsers.Add(VisiWinNET.UserManagement.User)">
      <summary>Adds a new user to the user group</summary>
      <returns>Information on the success of the operation</returns>
      <param name="newUser">Object containing the information of the new user</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupUsers.Add(VisiWinNET.UserManagement.User,outVisiWinNET.UserManagement.UserCompliance,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Adds a new user to the user group</summary>
      <returns>Information on the success of the operation</returns>
      <param name="newUser">Object containing the information of the new user</param>
      <param name="userCompliance">An object of the 'UserCompliance' type is expected as value. Subsequent to the call detail information on the test against the user name rules from the user administration configuration is available in the object.</param>
      <param name="passwordCompliance">An object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information on the test against the password rules from the user administration configuration is available in the object.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupUsers.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'User' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.GroupUsers.Remove(System.String)">
      <summary>Deletes the specified user from the group</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="name">Logon name of user to be deleted</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.LogOffEventArgs">
      <summary>Provides data for the 'UserLoggedOff' event.</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.LogOffEventArgs.AutoLoggedOff">
      <summary>Indicates the cause of the logoff</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.LogOffEventArgs.CurrentUser">
      <summary>Contains information on the user who was logged off</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.LogOnEventArgs">
      <summary>Provides data for the 'UserLoggedOn' event</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.LogOnEventArgs.CurrentUser">
      <summary>Contains information on the user who was logged on</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.machineGroupAssignment">
      <summary>Contains the information on the allocation of a user to a user group on a computer. </summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.machineGroupAssignment.machine">
      <summary>Name of the computer from the project configuration</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.machineGroupAssignment.userGroup">
      <summary>Name of user group</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.machineGroupAssignment.#ctor">
      <summary>Initializes a new instance of the 'machineGroupAssignment' class.</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.machineGroupAssignment.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the 'machineGroupAssignment' class.</summary>
      <param name="strMachine">Name of the computer from the project configuration</param>
      <param name="strUserGroup">Name of the user group</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.MachineManager">
      <summary>Administrates the user group allocation in the "project-spanning user administration".</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.#ctor">
      <summary>Initializes a new instance of the 'MachineManager' class.</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.DeleteAssignmentForUser(System.String)">
      <summary>Deletes all user group allocations for the specified user.</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="user">Logon name of user</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.DeleteAssignmentForUserGroup(System.String)">
      <summary>Deletes all user group allocations for the specified user group.</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="userGroup">Name of user group</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.DeleteAssignmentForUserOnMachine(System.String,System.String)">
      <summary>Deletes the allocation of the user for a computer.</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="user">Logon name of user</param>
      <param name="machine">Alias of the computer (from the project configuration)</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.DeleteAssignmentOnMachine(System.String)">
      <summary>Deletes all user group allocations for a computer</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="machine">Alias of the computer (from the project configuration)</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.GetMachineGroupsForUser(System.String)">
      <summary>Returns the user group allocations for the specified user.</summary>
      <returns>Field of the 'machineGroupAssignment' type. Here it is specified for every computer to which user group the user is allocated.</returns>
      <param name="user">Logon name of user</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.GetUserGroupsForMachine(System.String)">
      <summary>Returns the user group allocations for the specified computer.</summary>
      <returns>Field of the 'userGroupAssignment' type. Here it is specified for every user to which user group he is allocated on this computer.</returns>
      <param name="machine">Alias of the computer (from the project configuration)</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.SetMachineGroupsForUser(System.String,VisiWinNET.UserManagement.machineGroupAssignment[])">
      <summary>Determines the user group allocation for the specified user.</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="user">Logon name of user</param>
      <param name="assignment">Field of the 'machineGroupAssignment' data type. Here the specification of a user group is expected for every user. Users that are to remain allocated to their original user group (the group in which the user definition was entered) need not be specified.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.MachineManager.SetUserGroupsForMachine(System.String,VisiWinNET.UserManagement.userGroupAssignment[])">
      <summary>Determines the user group allocation for the specified computer.</summary>
      <returns>'True': The method access was successful, otherwise 'False'</returns>
      <param name="machine">Alias of the computer (from the project configuration)</param>
      <param name="assignment">Field of the 'userGroupAssignment' data type. Here the specification of a user group is expected for every user. Users that are to remain allocated to their original user group (the group in which the user definition was entered) need not be specified.</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.PasswordCompliance">
      <summary>Contains information returned from the system with the verification of a password</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.PasswordCompliance.#ctor">
      <summary>Creates a new instance of the 'PasswordCompliance' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.Compliant">
      <summary>Returns whether the password violates one of the password rules</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.ForbiddenPasswords">
      <summary>Test result of the verification whether the password is contained in the list of forbidden passwords</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MaximumLength">
      <summary>Test result of the verification whether the password exceeds the "maximum password length" (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MaximumSubsequentEqualChars">
      <summary>Test result of the verification whether the password exceeds the number of "maximum repeated characters" (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MinimumDiffCharsToPriorPW">
      <summary>Test result of the verification whether the password shows the number of differences to the old password as specified in the "minimum difference to previous password" parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MinimumDifferentChars">
      <summary>Test result of the verification whether the password shows the "minimum number of different characters" (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MinimumLength">
      <summary>Test result of the verification whether the password falls short of the "minimum password length" (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MustContainDigits">
      <summary>Test result of the verification whether the password contains numerals (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MustContainLetters">
      <summary>Rest result of the verification whether the password contains letters (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MustContainSpecialCharacters">
      <summary>Test result of the verification whether the password contains special characters (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.MustContainUpperandLowerCase">
      <summary>Test result of the verification whether the password contains upper and lower case characters (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.PasswordAgingCount">
      <summary>Test result of the verification whether the password has already been used since the specified number of password changes (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.PasswordAgingTime">
      <summary>Test result of the verification whether the password has already been used since the specified timespan (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordCompliance.UserNameUnequalPassword">
      <summary>Test result of the verification whether the password differs from the user name (parameter from the user administration configuration)</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.PasswordCompliance.ToString">
      <summary>Returns a string representing the current object.
</summary>
      <returns>A description of some property values</returns>
    </member>
    <member name="T:VisiWinNET.UserManagement.PasswordPolicies">
      <summary>Encapsulates the information from the password rules and the list of forbidden passwords from the configuration of the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.ForbiddenPasswords">
      <summary>Access to the list of forbidden passwords</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MaximumLength">
      <summary>Specifies the maximum allowed length of a password</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MaximumSubsequentEqualChars">
      <summary>Specifies the maximum allowed number of repeated characters in a password</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MinimumDiffCharsToPriorPW">
      <summary>Specifies the minimum difference to the previous password</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MinimumDifferentChars">
      <summary>Specifies the minimum number of different characters in the password</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MinimumLength">
      <summary>Specifies the minimum allowed length of a password</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MustContainDigits">
      <summary>Specifies whether a password is to contain numerals</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MustContainLetters">
      <summary>Specifies whether a password is to contain letters</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MustContainSpecialCharacters">
      <summary>Specifies whether a password is to contain special characters</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.MustContainUpperandLowerCase">
      <summary>Specifies whether a password is to contain upper and lower case characters</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.PasswordAgingCount">
      <summary>Specifies after how many password changes a password can be used again</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.PasswordAgingTime">
      <summary>Specifies after how many days a password can be used again</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.PasswordPolicies.UserNameUnequalPassword">
      <summary>Specifies whether the user name can be used as password</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.PasswordPolicies.ValidatePassword(System.String,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Tests the specifies password against the password rules contained in the object as properties</summary>
      <returns>A 'ValidatePasswordSuccess' value containing the test result.If 'ViolatedPolicies' is returned the object passed in the 'compliance' parameter returns further details on the test result.</returns>
      <param name="newPassword">Password to be tested</param>
      <param name="compliance">An object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information about the test against the password rules from the user administration configuration is available in the object.</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.Right">
      <summary>Class allowing access to a right of the VisiWinNET user administration</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.Right.#ctor">
      <summary>Creates a new instance of the 'Right' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.Active">
      <summary>Determines whether the right is active</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.Comment">
      <summary>Determines the comment on the right</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.GroupNames">
      <summary>Specifies the names of the user groups linked with the right</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.Groups">
      <summary>Administrates the links with user groups</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.LocalizableText">
      <summary>Returns the internal identifier of the index text used as "Runtime name"</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.Name">
      <summary>Determines the name of the right</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Right.Text">
      <summary>Value of the "Runtime name" parameter from the project databank</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.Right.Get(System.String)">
      <summary>Static method to create an object encapsulating the parameters of a right of the user administration</summary>
      <returns>Requested rights object</returns>
      <param name="name">Name of the right</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.RightGroups">
      <summary>Class encapsulating as a collection the user groups linked with a right</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.RightGroups.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.RightGroups.Item(System.Int32)">
      <summary>Access to an element in a register</summary>
      <param name="index">Specification of enumeration index for access to the element.The first element is addressed with the index '0'.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.Add(System.String)">
      <summary>Links the right with the indicated user group</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="name">Name of user group</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.Add(System.String[])">
      <summary>Links the right with the indicated user groups</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="names">Field of user group names</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'UserGroup' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.Remove(System.String[])">
      <summary>Cancels the link with the indicated user groups</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="names">Field of user group names</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.Remove(System.String)">
      <summary>Cancels the link with the indicated user group</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="name">Name of user group</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.RightGroups.Set(System.String[])">
      <summary>Directly sets the right's link with user groups</summary>
      <returns>True: the operation was successful, otherwise 'False'.</returns>
      <param name="names">Field of user group names</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.Rights">
      <summary>Class encapsulating all rights of the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Rights.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Rights.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Specification of enumeration index for element access.The first element is addressed with the '0' index.</param>
    </member>
    <member name="P:VisiWinNET.UserManagement.Rights.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="name">Specification of name of rights definition for element accesss</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Rights.Add(VisiWinNET.UserManagement.Right)">
      <summary>Adds a new right to the project</summary>
      <returns>Information on the success of the operation</returns>
      <param name="newRight">Newly instantiated object of the 'Right' type in which at least the 'Name' property must be set, i.e. the name must be existent as an unequivocal designator for the new definition.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Rights.Change(VisiWinNET.UserManagement.Right)">
      <summary>Changes the parameters of an existing right</summary>
      <returns>Information on the success of the operation</returns>
      <param name="changedRight">Object containing the changed parameters of the right</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Rights.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'Right' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.Rights.Remove(System.String)">
      <summary>Deletes the specified right from the project</summary>
      <returns>True' the operation was succesful, otherwise 'False'</returns>
      <param name="name">Name of right to be deleted</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.SecondsToAutoLogOffChangedEventArgs">
      <summary>Provides data for the 'SecondsToAutoLogOffChanged' event</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.SecondsToAutoLogOffChangedEventArgs.SecondsToAutoLogOff">
      <summary>Time until automatic logoff</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.User">
      <summary>Contains the information on a user contained in the user administration</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.User.#ctor">
      <summary>Creates a new instance of the User class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.Code">
      <summary>Determines the value for the "machine code" parameter.</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.Comment">
      <summary>Comment on the user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.DeactivationTime">
      <summary>Time of deactivation</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.FullName">
      <summary>Full name of the user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.Group">
      <summary>Returns a reference to the user group object</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.GroupName">
      <summary>Determines the name of the user group the user belongs to</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.InitialPassword">
      <summary>Indicates the password for adding or changing a user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.InvalidatedUntil">
      <summary>Returns the point in time until which a user is blocked by the system if he has exceeded the number of "max. allowed failed logon attempts" set in the user group.</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.LastLogon">
      <summary>Returns the point in time of the latest successful logon of the user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.Name">
      <summary>Logon name of the user</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.PasswordUsedSince">
      <summary>Specifies since when the current password has been used</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.RemainingLogOns">
      <summary>Returns how many more times the user can try to log on before he is barred</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.RenewPassword">
      <summary>Indication of validity of current password in days</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.User.State">
      <summary>Indicates the status of the user</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.User.ChangePassword(System.String,System.String)">
      <summary>Method for password change</summary>
      <returns>Returns information on the action and the source of the error where applicable</returns>
      <param name="newPassword">Input of new password to be used</param>
      <param name="oldPassword">Input of password used previously</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.User.ChangePassword(System.String,System.String,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Method for password change</summary>
      <returns>Returns information on the action and the source of the error where applicable</returns>
      <param name="newPassword">Input of new password to be used</param>
      <param name="oldPassword">Input of password used previously</param>
      <param name="compliance">An object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information is available in the object on the test against the password rules from the user administration configurtion.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.User.Get(System.String)">
      <summary>Methode fo reading user properties</summary>
      <returns>Class with the information on the queried user</returns>
      <param name="name">Logon name of the user whose properties are to be returned</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.User.ValidatePassword(System.String,System.String,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Tests a password against the password rules from the user administration</summary>
      <returns>A 'ValidatePasswordSuccess' value containing the test result.If 'ViolatedPolicies' is returned the object passed in the 'compliance' parameter returns further details on the test result.</returns>
      <param name="newPassword">Password to be tested</param>
      <param name="oldPassword">Currently valid password of the user</param>
      <param name="compliance">An object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information is available in the object about the test against the password rules from the user administration configuration.</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserCompliance">
      <summary>Contains information returned from the system with the verification of a user name</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserCompliance.#ctor">
      <summary>Creates a new instance of the 'UserCompliance' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserCompliance.Compliant">
      <summary>Returns whether the user name violates one of the user name rules</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserCompliance.MaximumLength">
      <summary>Test result of the verification whether the user name exceeds the "maximum user name length" (parameter from the user administration configuration)</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserCompliance.MinimumLength">
      <summary>Test result of the verification whether the user name falls short of the "minimum user name length" (parameter from the user administration configuration)</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserCompliance.ToString">
      <summary>Returns a string representing the current object.
</summary>
      <returns>A description of some property values</returns>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserGroup">
      <summary>Encapsulates the parameters of a user group from the user administration</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserGroup.#ctor">
      <summary>Creates a new instance of the 'UserGroup' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.AutoLogOffTime">
      <summary>Determines the value of the "Time until automatic logoff" parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Comment">
      <summary>Determines the comment on the definition</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.ExcludeInactiveUserTime">
      <summary>Value of the 'block unused account after ... days' parameter from the project database</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Level">
      <summary>Determines the user level of the user goup</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.LocalizableText">
      <summary>Returns the internal identifier of the index text used as "Runtime name"</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.MaxFailedLogOns">
      <summary>Determines the value of the "Maximum allowed failed logon attempts" parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.MinimumPasswordAge">
      <summary>Returns the value of the "Password minimum age" parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Name">
      <summary>Determines the name of the user group</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.ProposeLastUserTime">
      <summary>Returns the value of the 'Suggest last user for ... hours' parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.RenewPasswordHintTime">
      <summary>Returns the value of the 'Notice ... days prior to expiry' parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.RenewPasswordInterval">
      <summary>Determines the value of the "Password renewal inverval" parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.RightNames">
      <summary>Specifies the names of the rights linked with the user group</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Rights">
      <summary>Administrates the links with rights</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Text">
      <summary>Value of the "Runtime name" parameter from the project databank</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.UserExclusionTime">
      <summary>Value of the 'Block account for ... minutes due to failed logon' parameter from the project database</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.Users">
      <summary>Returns a collection of user objects belonging to the user group</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroup.UsersRemovable">
      <summary>Determines whether users of this group may be deleted</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.userGroupAssignment">
      <summary>Describes an allocation of a user to a user group on a computer. It is used in the "project-spanning user administration".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.userGroupAssignment.user">
      <summary>Logon name of user</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.userGroupAssignment.userGroup">
      <summary>Name of user group</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.userGroupAssignment.#ctor">
      <summary>Initializes a new instance oft he 'userGroupAssignment' class.</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.userGroupAssignment.#ctor(System.String,System.String)">
      <summary>Initializes a new instance oft he 'userGroupAssignment' class.</summary>
      <param name="strUser">Logon name of the user</param>
      <param name="strUserGroup">Name of the user group</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserGroups">
      <summary>Class administrating the user groups of the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroups.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroups.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserGroups.Item(System.String)">
      <summary>Access to an element in the list with help of the name</summary>
      <param name="name">Indication of element to be read via the user group name</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserGroups.Add(VisiWinNET.UserManagement.UserGroup)">
      <summary>Adds a new user group to the object</summary>
      <returns>Information on the success of the operation</returns>
      <param name="newGroup">Object of the 'UserGroup' type containing the data of the new user group</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserGroups.Change(VisiWinNET.UserManagement.UserGroup)">
      <summary>Changes the information of the indicated user group</summary>
      <returns>Information on the success of the operation</returns>
      <param name="changedGroup">Object of the 'UserGroup' type whose properties are changed</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserGroups.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'UserGroup' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserGroups.Remove(System.String)">
      <summary>Deletes the indicated user group from the project</summary>
      <returns>Information on the success of the operation</returns>
      <param name="name">Name uf user group to be deleted</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserManager">
      <summary>Class for administration of user administration information</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.#ctor">
      <summary>Initializes a new instance of the 'UserManager' class</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.AuthorizationSystem">
      <summary>Returns the system used in the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.ComputerName">
      <summary>Returns the computer name of the current instance.</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.Config">
      <summary>Specifies data from the user administration configuration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.CurrentUser">
      <summary>Returns the user who is currently logged on</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.CurrentUserName">
      <summary>Returns the logon name of the user currently logged on to the system.</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.Groups">
      <summary>Returns an object for access to all user groups in the project</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.ProposedLastUser">
      <summary>Specifies the name of the last logged on user who for a specified timespan is suggested for a new logon (see 'Suggest last user for ... hours' parameter</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.Rights">
      <summary>Returns an object for access to all rights from the user administration in the project</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.SecondsToAutoLogOff">
      <summary>Returns the time (in seconds) after which the user currently logged on in the system is automatically logged off if no further operation is made in the application</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserManager.Users">
      <summary>Returns an object for access to all users in the project</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.Dispose">
      <summary>Releases the resources utilized by the object that are used as "unmanaged code".</summary>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.LogOff">
      <summary>Logs a user off</summary>
      <returns>True: the logged on user was logged off. False: an error has occurred (no access to toe server).</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.LogOn(System.String,System.String)">
      <summary>Logs a user on</summary>
      <returns>Returns a status message on the logon procedure</returns>
      <param name="name">Name of user to be logged on</param>
      <param name="password">Password of user to be logged on</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.LogOn(System.String,System.String,System.String)">
      <summary>Logs a user on</summary>
      <returns>Returns a status message on the logon procedure</returns>
      <param name="name">Name of user to be logged on</param>
      <param name="password">Password of user to be logged on</param>
      <param name="code">Machine code of user to be logged on</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.SetSuperUser(System.String,System.String,System.String)">
      <summary>Determines the Super User</summary>
      <returns>The return value returns the information whether the SuperUser could be set.</returns>
      <param name="name">Logon name of the SuperUser</param>
      <param name="password">Password of the SuperUser</param>
      <param name="fullName">Full name of the SuperUser</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.SetUserAdmin(System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>Determines the UserAdmin.</summary>
      <returns>Provides information on the success of the operation. Where applicable the cause of the error is returned here.</returns>
      <param name="name">Logon name of the UserAdmin</param>
      <param name="password">Password of the UserAdmin</param>
      <param name="fullName">Full name of the UserAdmin</param>
      <param name="level">Authorization level of the UserAdmin. This parameter is only to be used if the "level-orientated user administration" is used.</param>
      <param name="autoLogoff">Time until automatic logoff if the application is not operated</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.SetUserAdmin(System.String,System.String,System.String,System.String[],System.Int32)">
      <summary>Determines the UserAdmin.</summary>
      <returns>Provides information on the success of the operation. Where applicable the cause of the error is returned here.</returns>
      <param name="name">Logon name of the UserAdmin</param>
      <param name="password">Password of the UserAdmin</param>
      <param name="fullName">Full name of the UserAdmin</param>
      <param name="rights">Collection of rights that the UserAdmin possesses. This parameter is only to be used if the "rights-orientated user administration" is used.</param>
      <param name="autoLogoff">Time until automatic logoff if the application is not operated</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.VerifyUser(System.String,System.String)">
      <summary>Allows verification of logon information without a logon.</summary>
      <returns>Indicates whether a logon is possible with this information. Should this not be the case the exact cause of the error can be established by the return value.</returns>
      <param name="name">Specification of user name to be verified</param>
      <param name="password">Spedification of password to be verified with the user name</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.UserManager.VerifyUser(System.String,System.String,System.String)">
      <summary>Allows verification of logon information without a logon.</summary>
      <returns>Indicates whether a logon is possible with this information. Should this not be the case the exact cause of the error can be established by the return value.</returns>
      <param name="name">Specification of user name to be verified</param>
      <param name="password">Spedification of password to be verified with the user name</param>
      <param name="code">Specification of machine code to be verified with the user name</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.UserManager.AutoLogOffQuery">
      <summary>Occurs prior to a user being automativally logged off due to non-operation</summary>
      <param name="sender">Indication of the 'UserManager' type object that has triggered the event</param>
      <param name="e">'AutoLogOffEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.UserManager.SecondsToAutoLogOffChanged">
      <summary>Cyclic event until automatic logoff</summary>
      <param name="sender">Indication of the 'UserManager' type object that has triggered the event</param>
      <param name="e">'SecondsToAutoLogOffChangedEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.UserManager.UserLoggedOff">
      <summary>When a user was logged off by the system</summary>
      <param name="sender">Indication of the 'UserManager' type object that has triggered the event</param>
      <param name="e">'LogOffEventArgs' type object containing further information on the event</param>
    </member>
    <member name="E:VisiWinNET.UserManagement.UserManager.UserLoggedOn">
      <summary>Occurs when a user has logged on</summary>
      <param name="sender">Indication of the 'UserManager' type object that has triggered the event</param>
      <param name="e">'LogOnEventArgs' type object containing further information on the event</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserPolicies">
      <summary>Encapsulates the information of the user name rules from the configuration of the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserPolicies.MaximumLength">
      <summary>Specifies the maximum length for a user name</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.UserPolicies.MinimumLength">
      <summary>Specifies the minimum length for a user name</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.Users">
      <summary>Class administrating all users of the user administration</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Users.Count">
      <summary>Number of elements in a register</summary>
    </member>
    <member name="P:VisiWinNET.UserManagement.Users.Item(System.Int32)">
      <summary>Access to an element in the list with help of the element index</summary>
      <param name="index">Indication of element to be read via the enumeration index</param>
    </member>
    <member name="P:VisiWinNET.UserManagement.Users.Item(System.String)">
      <summary>Access to an element in the list with help of the 'login name'</summary>
      <param name="name">Indication of element to be read via the logon name</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.Add(VisiWinNET.UserManagement.User)">
      <summary>Adds a new user to the user administration</summary>
      <returns>Information on the success of the action</returns>
      <param name="newUser">Information on the new user.At least the 'Name', 'FullName' and 'GroupName' properties must be specified in the passed object.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.Add(VisiWinNET.UserManagement.User,outVisiWinNET.UserManagement.UserCompliance,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Adds a new user to the user administration</summary>
      <returns>Information on the success of the action</returns>
      <param name="newUser">Information on the new user.At least the 'Name', 'FullName' and 'GroupName' properties must be specified in the passed object.</param>
      <param name="userCompliance">An object of the 'UserCompliance' type is expected as value. Subsequent to the call detail information about the test against the user name ruiles from the user administration configuration is available in the object.</param>
      <param name="passwordCompliance">An object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information about the test against the password rules from the user administration configuration is available in the object.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.Change(VisiWinNET.UserManagement.User)">
      <summary>Changes the parameters of a user</summary>
      <returns>Information on the success of the action</returns>
      <param name="changedUser">'User' object with changed information</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.Change(VisiWinNET.UserManagement.User,outVisiWinNET.UserManagement.PasswordCompliance)">
      <summary>Changes the parameters of a user</summary>
      <returns>Information on the success of the action</returns>
      <param name="changedUser">'User' object with changed information</param>
      <param name="compliance">Ab object of the 'PasswordCompliance' type is expected as value. Subsequent to the call detail information about the test against the password rules from the user administration configuration is available in the object.</param>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.GetEnumerator">
      <summary>Issues a cross-reference to an enumerator interface providing access to the elements of a register (enumeration).</summary>
      <returns>An object of the System.Collections.IEnumerator type containing all 'User' objects</returns>
    </member>
    <member name="M:VisiWinNET.UserManagement.Users.Remove(System.String)">
      <summary>Deletes the specified user from the project</summary>
      <returns>'True': the specified user was deleted, otherwise 'False'</returns>
      <param name="name">Name of user to be deleted</param>
    </member>
    <member name="T:VisiWinNET.UserManagement.AuthorizationChangedHandler">
      <summary>Delegate for the 'AuthorizationChanged' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AutoLogOffHandler">
      <summary>Delegate for the 'AutoLogOffQuery' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangeEnabledHandler">
      <summary>Delegate for the 'ChangeEnabled' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangeVisibleHandler">
      <summary>Delegate for the 'ChangeVisible' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.SecondsToAutoLogOffChangedHandler">
      <summary>Delegate for the 'SecondsToAutoLogOffChanged' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserLoggedOffHandler">
      <summary>Delegate for the 'UserLoggedOff' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserLoggedOnHandler">
      <summary>Delegate for the 'UserLoggedOn' event</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AddGroupSuccess">
      <summary>Enumeration containing the possible return values of the 'Add' method of a 'UserGroup' object</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.GroupAlreadyDefined">
      <summary>The group already exists. Comparison with existing user groups is done by name.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.MethodCallFailed">
      <summary>The method could not be carried out. (The server is currently not accessible.)</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.Succeeded">
      <summary>The user group was successfully added to the project.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.UnableToSaveGroup">
      <summary>The information of the new group could not be stored.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.UnknownRight">
      <summary>One of the specified rights could not be found in the project databank.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddGroupSuccess.WrongParam">
      <summary>A property in the passed object required for adding the user group is not initialized. This error message mostly refers to the non-initialized 'Name' property of the passed 'UserGroup' object.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AddRightSuccess">
      <summary>Enumeration containing the possible return values of the 'Add' method of a 'Rights' object</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.MethodCallFailed">
      <summary>The method could not be carried out. (The server is currently not accessible.)</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.NotValidForAuthorizationSystem">
      <summary>The method could not be carried out. This value points to the following error:
Rights have no function in the level-orientated user administration. They are not used. Therefore adding new rights is denied by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.RightAlreadyDefined">
      <summary>The right already exists. Comparison with existing rights is via the name.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.Succeeded">
      <summary>The right was successfully added to the project.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.UnableToSaveRight">
      <summary>The information of the new right could not be stored.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddRightSuccess.WrongParam">
      <summary>A property in the passed object required for adding the right is not initialized. This error message mostly refers to the non-initialized 'Name' property of the passed 'Right' object.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AddUserSuccess">
      <summary>Describes the result of adding a user</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.ForbiddenPassword">
      <summary>The entered password is specifically prohibited (specified as "prohibited password"), and must not be used.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.FullUserExists">
      <summary>The indicated name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.InvalidPassword">
      <summary>The password is empty</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.InvalidPasswordLength">
      <summary>The entered password does not contain the default number of characters.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.LockedPassword">
      <summary>The specified password cannot be used as it violates the rules of the user administration configuration. This refers to the setting of "Password can be re-used after ... days/password changes".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.MachineCodeExists">
      <summary>The indicated machine code  already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.NoCharactersInPassword">
      <summary>The entered password does not contain letters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.NoNumbersInPassword">
      <summary>The entered password does not contain digits as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.PasswordMustContainSpecialCharacters">
      <summary>The entered password does not contain special characters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.Succeeded">
      <summary>Adding the user was successful</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.UnableToSaveUser">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.UnknownGroup">
      <summary>The specified user group was not found in the project.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AddUserSuccess.UserExists">
      <summary>The indicated Logon name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AuthorizationModes">
      <summary>Enumeration to determine the function with a deactivation by the user administration</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AuthorizationModes.Disabled">
      <summary>The control is displayed as deactivated, and accepts no further input (Enabled=False).</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AuthorizationModes.Invisible">
      <summary>The control is set invisible.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.AuthorizationSystemTypes">
      <summary>Enumerates the available user administration systems</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AuthorizationSystemTypes.Level">
      <summary>Level-orientated user administration</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.AuthorizationSystemTypes.Rights">
      <summary>Rights-orientated user administration</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangeGroupSuccess">
      <summary>Enumeration containing the possible return values of the 'Change'/'Remove' methods of a 'UserGroup' object</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.DeleteNotPermitted">
      <summary>The user group cannot be deleted as the 'Users of this group can be deleted' parameter is not active. The fact that the users cannot be deleted makes the group undeletable, too.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.InvalidGroup">
      <summary>The user group whose parameters were to be changed could not be found in the project databank.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.MethodCallFailed">
      <summary>The method could not be carried out. (The server is currently not accessible.)</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.Succeeded">
      <summary>The parameter change of the indicated user group was effected.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.UnableToSaveGroup">
      <summary>The information of the group could not be stored.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.UnknownGroup">
      <summary>The specified user group is not known to the server. A user group with this name does not exist.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeGroupSuccess.UnknownRight">
      <summary>One of the specified rights could not be found in the project databank.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangePasswordSuccess">
      <summary>Describes the result with a user password change</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.ForbiddenPassword">
      <summary>The entered password is explicitly prohibited, and must not be used.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.LockedPassword">
      <summary>The specified password cannot be used as it violates the rules of the user administration configuration. This refers to the setting of "Password can be re-used after ... days/password changes".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.NewPasswordInvalid">
      <summary>The password is empty.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.NewPasswordInvalidLength">
      <summary>The entered password does not contain the default number of characters.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.NoCharactersInPassword">
      <summary>The entered password does not contain letters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.NoNumbersInPassword">
      <summary>The entered password does not contain digits as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.OldPasswordInvalid">
      <summary>Entering the old password was incorrect.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.PasswordMustContainSpecialCharacters">
      <summary>The entered password does not contain special characters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.Succeeded">
      <summary>The password was successfully changed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.UnableToSavePassword">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangePasswordSuccess.UnknownUser">
      <summary>The indicated user was not found in the user administration.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangeRightSuccess">
      <summary>Contains the possible return values of the 'Change' method of a 'Rights' object</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeRightSuccess.MethodCallFailed">
      <summary>The method could not be carried out. (The server is currently not accessible.)</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeRightSuccess.Succeeded">
      <summary>The parameter change of the indicated right was effected.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeRightSuccess.UnableToSaveRight">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeRightSuccess.UnknownGroup">
      <summary>One of the linked user groups could not be found.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeRightSuccess.UnknownRight">
      <summary>The indicated right is not known to the system. A right with this name does not exist.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ChangeUserSuccess">
      <summary>Describes the results with a user properties change</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.ForbiddenPassword">
      <summary>The entered password is explicitly prohibited, and must not be used.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.FullUserExists">
      <summary>The indicated name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.InvalidPassword">
      <summary>The password is empty.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.InvalidPasswordLength">
      <summary>The entered password does not contain the default number of characters.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.InvalidUserClass">
      <summary>The change to another user group is not possible because the "Users of this group may be deleted" option is NOT activated in the current croup.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.LockedPassword">
      <summary>The specified password cannot be used as it violates the rules of the user administration configuration. This refers to the setting of "Password can be re-used after ... days/password changes".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.MachineCodeExists">
      <summary>The indicated machine code  already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.NoCharactersInPassword">
      <summary>The entered password does not contain letters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.NoNumbersInPassword">
      <summary>The entered password does not contain digits as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.PasswordMustContainSpecialCharacters">
      <summary>The entered password does not contain special characters as requested by the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.Succeeded">
      <summary>The user properties were successfully changed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.UnableToSaveUser">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.UnknownUser">
      <summary>The indicated user was not found in the user administration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ChangeUserSuccess.UnknownUserClass">
      <summary>The indicated user group was not found in the user administration.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.LogOnSuccess">
      <summary>Describes the result of the user log-on.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.InvalidPassword">
      <summary>The specified user could not be logged on. The specified password is wrong.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.NoCorrespondingLocalUserClass">
      <summary>In the domain user administration the specified user was allocated to a group that could not be found in the project databank.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.NoCorrespondingLocalUserClass">
      <summary>In the domain user administration the specified user was allocated to a group that could not be found in the project databank.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.PasswordExpired">
      <summary>The specified user could not be logged on.
The specified password has expired due to the "Password renewal interval" parameter.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.PasswordExpired">
      <summary>The specified user could not be logged on.
The specified password has expired due to the "Password renewal interval" parameter.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.RenewPassword">
      <summary>The specified user could not be logged on.
He must first change the password allocated by the administrator. Then he can log on with the new password. This response is to be expected if the "Status" parameter of a new user is set to "Activated, change password next time".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.RenewPassword">
      <summary>The specified user could not be logged on.
He must first change the password allocated by the administrator. Then he can log on with the new password. This response is to be expected if the "Status" parameter of a new user is set to "Activated, change password next time".</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.Succeeded">
      <summary>The indicated user was successfully logged on.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.SucceededChangePasswordSoon">
      <summary>The specified user was successfully logged on. The user must change his password in the near future.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.TooLongSinceLastLogon">
      <summary>The specified user could not be logged on. He was logged out for too long ("Block unused account after ... days" parameter of the user group).</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.TooManyFailedLogOns">
      <summary>The indicated user could not be logged on. The user was deactivated by the system due to the set number of faulty logon attempts having been exceeded.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.TooManyFailedLogOns">
      <summary>The indicated user could not be logged on. The user was deactivated by the system due to the set number of faulty logon attempts having been exceeded.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.UnknownUser">
      <summary>The indicated user could not be logged on. The user is unknown.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.UserDeactivated">
      <summary>The indicated user could not be logged on. The user is deactivated.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.LogOnSuccess.UserDeactivated">
      <summary>The indicated user could not be logged on. The user is deactivated.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.PolicyCompliance">
      <summary>Contains the possible test results returned by the system with a user or password verification</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.PolicyCompliance.Compliant">
      <summary>Test successfully passed. No rule violation.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.PolicyCompliance.NotChecked">
      <summary>The test is not required due to information from the project database. The test is not carried out.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.PolicyCompliance.Violated">
      <summary>Test failed. Data cannot be adopted.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.SetAdminsSuccess">
      <summary>Enumeration containing the possible return values of the 'SetSuperUser' and 'SetUserAdmin' methods of a 'UserManager' object</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.SetAdminsSuccess.MethodCallFailed">
      <summary>The method could not be carried out. (The server is currently not accessible.)</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.SetAdminsSuccess.NotValidForAuthorizationSystem">
      <summary>The method could not be carried out. This value points to a programming fault. The 'SetUserAdmin' method is overloaded. It contains a syntax each für the two user administration systems (level/rights-orientated). For the level-orientated user administration the syntax with the 'level' parameter is to be selected. In the rights-orientated user administration the rights must be specified via the 'rights' parameter.
If 'NotValidForAuthorizationSystem' is returned by the method the wrong syntax was selected.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.SetAdminsSuccess.Succeeded">
      <summary>The SuperUser/UserAdmin information was made known to the system. Subsequent logons with the information indicated here log the SuperUser/UserAdmin on.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.SetAdminsSuccess.UserIsLoggedOn">
      <summary>The user specified through the method is currently logged on, and cannot be changed.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.UserStates">
      <summary>Describes the different states a user can assume</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.UserStates.Active">
      <summary>The user is active, and can log on to the system.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.UserStates.Deactivated">
      <summary>The user was deactivated by the user administration in the application. This makes sense, for example, if a user is not expected to work with the visualization for an extended period of time.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.UserStates.Invalidated">
      <summary>The user was deactivated by the system. A system deactivation occurs if a user logs on incorrectly too often or ignores the interval-controlled request for password change.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.UserStates.PasswordExpired">
      <summary>The entered password has expired.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.UserStates.Unknown">
      <summary>The user is not known to the system.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ValidatedAddUserSuccess">
      <summary>Contains the possible return values for the function to add a user in Users.Add and GroupUsers.Add</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.FullUserExists">
      <summary>The indicated name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.MachineCodeExists">
      <summary>The indicated machine code already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.Succeeded">
      <summary>Adding the user was successful</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.UnableToSaveUser">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.UnknownGroup">
      <summary>The specified user group was not found in the project.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.UserExists">
      <summary>The indicated Logon name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedAddUserSuccess.ViolatedPolicies">
      <summary>There was a violation of the password rules from the configuration of the user administration.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess">
      <summary>Contains the possible return values for the User.ChangePassword function</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.MinimumPasswordAge">
      <summary>The minimum age for the previous password (parameter in the user group) was not yet reached.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.OldPasswordInvalid">
      <summary>Entering the old password was incorrect.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.Succeeded">
      <summary>The password was successfully changed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.UnableToSavePassword">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.UnknownUser">
      <summary>The indicated user was not found in the user administration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangePasswordSuccess.ViolatedPolicies">
      <summary>There was a violation of the password rules from the configuration of the user administration.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ValidatedChangeUserSuccess">
      <summary>Contains the possible return values of the function to change the information of a user ('Users.Change").</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.FullUserExists">
      <summary>The indicated name already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.InvalidUserClass">
      <summary>The change to another user group is not possible because the "Users of this group may be deleted" option is NOT activated in the current group.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.MachineCodeExists">
      <summary>The indicated machine code already exists in the user administration ("Name", "Logon name" and "MachineCode" must be system-wide unequivocal for the user),</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.MethodCallFailed">
      <summary>The server could not be accessed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.Succeeded">
      <summary>The user properties were successfully changed.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.UnableToSaveUser">
      <summary>The server function could not store the information.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.UnknownUser">
      <summary>The indicated user was not found in the user administration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.UnknownUserClass">
      <summary>The indicated user group was not found in the user administration.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatedChangeUserSuccess.ViolatedPolicies">
      <summary>The password violated the rules from the user administration configuration.</summary>
    </member>
    <member name="T:VisiWinNET.UserManagement.ValidatePasswordSuccess">
      <summary>Contains the possible return values for the 'ValidatePassword' function</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.CantAccessDomainInfo">
      <summary>The specified domain could not be found or the domain could not be accessed. This return value is only to be expected if the "Use domain user administration" option was activated via the user administration configuration.
</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.MethodCallFailed">
      <summary>The server could not be accessed.
</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.MinimumPasswordAge">
      <summary>The minimum age for the previous password (parameter in the user group) was not yet reached.</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.OldPasswordInvalid">
      <summary>Entering the old password was incorrect.
</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.Succeeded">
      <summary>The password was successfully tested.
</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.UnknownUser">
      <summary>The indicated user was not found in the user administration.
</summary>
    </member>
    <member name="F:VisiWinNET.UserManagement.ValidatePasswordSuccess.ViolatedPolicies">
      <summary>There was a violation of the password rules from the configuration of the user administration.</summary>
    </member>
  </members>
</doc>